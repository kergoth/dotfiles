'use strict';
var lineExp = /\r?\n/g;
function getPosition(stream, index) {
    var position = {
        column: 0,
        line: 0
    };
    var match;
    var nextLineStart = 0;
    lineExp.lastIndex = 0;
    index = Math.min(index, stream.length - 1);
    while ((match = lineExp.exec(stream))) {
        if (lineExp.lastIndex > index) {
            position.column = index - nextLineStart;
            return position;
        }
        position.line += 1;
        nextLineStart = lineExp.lastIndex;
    }
    position.column = index - nextLineStart;
    return position;
}
exports.getPosition = getPosition;
function getLinesAt(stream, start, end) {
    if (typeof end === "undefined") { end = 0; }
    // TODO improve line grabber (remove horrible split for top-down line parser)
    var arr = stream.split(lineExp);
    start = Math.max(start, 0);
    if (!end) {
        end = arr.length - 1;
    } else {
        end = Math.min(end, arr.length - 1);
    }
    end = Math.max(end, start + 1);
    return arr.slice(start, end + 1);
}
exports.getLinesAt = getLinesAt;
function untrail(str) {
    if (typeof str !== 'string') {
        return String(str);
    }
    return str.replace(/\/$/, '');
}
exports.untrail = untrail;
var longString = '----------------------------------------';
function charPointer(column) {
    if (longString.length < column) {
        for (var i = longString.length; i < column; i++) {
            longString += '-';
        }
    }
    return longString.substr(0, column) + '^';
}
exports.charPointer = charPointer;
// TODO harden for deeper lines
function highlightPos(stream, line, column) {
    var lines = exports.getLinesAt(stream, 0, line + 2);
    if (typeof column === 'number') {
        lines.splice(line + 1, 0, exports.charPointer(column));
    }
    return lines.join('\n');
}
exports.highlightPos = highlightPos;
function linkPos(dest, line, column, oneBased) {
    if (typeof oneBased === "undefined") { oneBased = false; }
    if (typeof column !== 'number') {
        column = 0;
    }
    if (typeof line !== 'number') {
        line = 0;
    }
    if (oneBased) {
        column += 1;
        line += 1;
    }
    // return path.resolve(dest) + '[' + line + ',' + column + ']';
    return dest + '[' + line + ',' + column + ']';
}
exports.linkPos = linkPos;
