'use strict';

var findAsync = function () {
  var ref = _asyncToGenerator(function* (directory, name) {
    var names = [].concat(name);
    var chunks = directory.split(_path2.default.sep);
    var matched = [];

    while (chunks.length) {
      var currentDir = chunks.join(_path2.default.sep);
      if (currentDir === '') {
        currentDir = _path2.default.resolve(directory, '/');
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = names[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var fileName = _step2.value;

          var filePath = _path2.default.join(currentDir, fileName);
          try {
            yield access(filePath, _fs2.default.R_OK);
            matched.push(filePath);
            break;
          } catch (_) {
            // Do nothing
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      chunks.pop();
    }

    return matched;
  });

  return function findAsync(_x, _x2) {
    return ref.apply(this, arguments);
  };
}();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sbMemoize = require('sb-memoize');

var _sbMemoize2 = _interopRequireDefault(_sbMemoize);

var _sbPromisify = require('sb-promisify');

var _sbPromisify2 = _interopRequireDefault(_sbPromisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

var access = (0, _sbPromisify2.default)(_fs2.default.access);

function find(directory, name) {
  var names = [].concat(name);
  var chunks = directory.split(_path2.default.sep);
  var matched = [];

  while (chunks.length) {
    var currentDir = chunks.join(_path2.default.sep);
    if (currentDir === '') {
      currentDir = _path2.default.resolve(directory, '/');
    }
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var fileName = _step.value;

        var filePath = _path2.default.join(currentDir, fileName);

        try {
          _fs2.default.accessSync(filePath, _fs2.default.R_OK);
          matched.push(filePath);
          break;
        } catch (_) {
          // Do nothing
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    chunks.pop();
  }

  return matched;
}

module.exports = {
  find: (0, _sbMemoize2.default)(find),
  findAsync: (0, _sbMemoize2.default)(findAsync, { async: true })
};