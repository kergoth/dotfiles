'use strict';

var exec = function () {
  var _ref = _asyncToGenerator(function* (givenFilePath) {
    var givenParameters = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    (0, _helpers.validate)(givenFilePath, givenParameters, options);
    var spawnOptions = yield (0, _helpers.getSpawnOptions)(options);
    var filePath = givenFilePath;
    var parameters = givenParameters;
    if (process.platform === 'win32' && !options.shell) {
      spawnOptions.windowsVerbatimArguments = true;
      parameters = ['/s', '/c', '"' + [filePath].concat(parameters).map(_helpers.escape).join(' ') + '"'];
      filePath = process.env.comspec || 'cmd.exe';
    }
    delete spawnOptions.timeout;

    return yield new Promise(function (resolve, reject) {
      var spawnedProcess = (0, _child_process.spawn)(filePath, parameters, spawnOptions);
      var data = { stdout: [], stderr: [] };
      var timeout = void 0;

      if (spawnedProcess.stdout) {
        spawnedProcess.stdout.on('data', function (chunk) {
          data.stdout.push(chunk);
        });
      }
      if (spawnedProcess.stderr) {
        spawnedProcess.stderr.on('data', function (chunk) {
          data.stderr.push(chunk);
        });
      }
      spawnedProcess.on('error', function (error) {
        reject(error);
      });
      spawnedProcess.on('close', function (exitCode) {
        clearTimeout(timeout);
        if (options.stream === 'stdout') {
          if (data.stderr.length && options.throwOnStdErr) {
            reject(new Error(data.stderr.join('').trim()));
          } else {
            var stdout = data.stdout.join('').trim();
            if (exitCode !== 0 && !options.ignoreExitCode) {
              console.error('[atom-linter] Process exited with no-zero code, stdout: ', stdout);
              reject(new Error('Process exited with non-zero code: ' + exitCode));
            } else {
              resolve(stdout);
            }
          }
        } else if (options.stream === 'stderr') {
          var stderr = data.stderr.join('').trim();
          if (stderr.length === 0 && !options.allowEmptyStderr) {
            reject(new Error('Process exited with no output, code: ' + exitCode));
          } else {
            resolve(stderr);
          }
        } else {
          resolve({ stdout: data.stdout.join('').trim(), stderr: data.stderr.join('').trim(), exitCode: exitCode });
        }
      });

      if (spawnedProcess.stdin) {
        if (options.stdin) {
          try {
            spawnedProcess.stdin.write(options.stdin);
          } catch (_) {/* No Op */}
        }
        try {
          spawnedProcess.stdin.end();
        } catch (_) {/* No Op */}
      }

      if (options.timeout !== Infinity) {
        timeout = setTimeout(function () {
          try {
            spawnedProcess.kill();
          } catch (_) {/* No Op */}
          reject(new Error('Process execution timed out'));
        }, options.timeout);
      }
    });
  });

  return function exec(_x3) {
    return _ref.apply(this, arguments);
  };
}();

var _child_process = require('child_process');

var _helpers = require('./helpers');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function execNode(filePath) {
  var parameters = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  (0, _helpers.validate)(filePath, parameters, options);
  return exec(process.execPath, [filePath].concat(parameters), options);
}

module.exports = { exec: exec, execNode: execNode };