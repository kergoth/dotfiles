{"version":3,"sources":["../../../src/elements/types/FunctionDeclaration.js"],"names":["FunctionDeclaration","childNodes","expression","isFunction","children","params","async","id","isToken","passToken","skipNonCode","generator","moveNext","isNode","passNode","body","passStatement","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,mB;;;AACjB,iCAAYC,UAAZ,EAAwB;AAAA;;AAAA,oKACd,qBADc,EACSA,UADT;;AAEpB,cAAKC,UAAL,GAAkB,KAAlB;AACA,cAAKC,UAAL,GAAkB,IAAlB;AAHoB;AAIvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,eAAJ;AACA,gBAAIC,QAAQ,KAAZ;AACA,gBAAIC,KAAK,IAAT;;AAEA,gBAAIH,SAASI,OAAT,CAAiB,YAAjB,EAA+B,OAA/B,CAAJ,EAA6C;AACzCF,wBAAQ,IAAR;AACAF,yBAASK,SAAT,CAAmB,YAAnB,EAAiC,OAAjC;AACAL,yBAASM,WAAT;AACH;;AAEDN,qBAASK,SAAT,CAAmB,SAAnB,EAA8B,UAA9B;AACAL,qBAASM,WAAT;;AAEA,gBAAIC,YAAY,KAAhB;AACA,gBAAIP,SAASI,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrCG,4BAAY,IAAZ;AACAP,yBAASQ,QAAT;AACAR,yBAASM,WAAT;AACH;;AAED,gBAAIN,SAASS,MAAT,CAAgB,YAAhB,CAAJ,EAAmC;AAC/BN,qBAAKH,SAASU,QAAT,CAAkB,YAAlB,CAAL;AACAV,yBAASM,WAAT;AACH;;AAEDL,qBAAS,iCAAkBD,QAAlB,CAAT;AACAA,qBAASM,WAAT;;AAEA,gBAAIK,OAAOX,SAASY,aAAT,EAAX;;AAEAZ,qBAASa,SAAT;;AAEA,iBAAKX,KAAL,GAAaA,KAAb;AACA,iBAAKC,EAAL,GAAUA,EAAV;AACA,iBAAKF,MAAL,GAAcA,MAAd;AACA,iBAAKU,IAAL,GAAYA,IAAZ;AACA,iBAAKJ,SAAL,GAAiBA,SAAjB;AACH;;;;;kBA7CgBX,mB","file":"FunctionDeclaration.js","sourcesContent":["import Statement from '../Statement';\nimport getFunctionParams from './utils/getFunctionParams';\n\nexport default class FunctionDeclaration extends Statement {\n    constructor(childNodes) {\n        super('FunctionDeclaration', childNodes);\n        this.expression = false;\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let params;\n        let async = false;\n        let id = null;\n\n        if (children.isToken('Identifier', 'async')) {\n            async = true;\n            children.passToken('Identifier', 'async');\n            children.skipNonCode();\n        }\n\n        children.passToken('Keyword', 'function');\n        children.skipNonCode();\n\n        let generator = false;\n        if (children.isToken('Punctuator', '*')) {\n            generator = true;\n            children.moveNext();\n            children.skipNonCode();\n        }\n\n        if (children.isNode('Identifier')) {\n            id = children.passNode('Identifier');\n            children.skipNonCode();\n        }\n\n        params = getFunctionParams(children);\n        children.skipNonCode();\n\n        let body = children.passStatement();\n\n        children.assertEnd();\n\n        this.async = async;\n        this.id = id;\n        this.params = params;\n        this.body = body;\n        this.generator = generator;\n    }\n}\n"]}