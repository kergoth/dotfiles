{"version":3,"sources":["../../../src/elements/types/SequenceExpression.js"],"names":["SequenceExpression","childNodes","children","expressions","push","passExpression","skipNonCode","passToken","isEnd","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,kB;;;AAEjB;;AAEA,gCAAYC,UAAZ,EAAwB;AAAA;AAAA,6JACd,oBADc,EACQA,UADR;AAEvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,cAAc,EAAlB;;AAEAA,wBAAYC,IAAZ,CAAiBF,SAASG,cAAT,EAAjB;AACAH,qBAASI,WAAT;;AAEA,eAAG;AACCJ,yBAASK,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAL,yBAASI,WAAT;AACAH,4BAAYC,IAAZ,CAAiBF,SAASG,cAAT,EAAjB;AACAH,yBAASI,WAAT;AACH,aALD,QAKS,CAACJ,SAASM,KALnB;;AAOAN,qBAASO,SAAT;;AAEA,iBAAKN,WAAL,GAAmBA,WAAnB;AACH;;;;;kBAxBgBH,kB","file":"SequenceExpression.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class SequenceExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('SequenceExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let expressions = [];\n\n        expressions.push(children.passExpression());\n        children.skipNonCode();\n\n        do {\n            children.passToken('Punctuator', ',');\n            children.skipNonCode();\n            expressions.push(children.passExpression());\n            children.skipNonCode();\n        } while (!children.isEnd);\n\n        children.assertEnd();\n\n        this.expressions = expressions;\n    }\n}\n"]}