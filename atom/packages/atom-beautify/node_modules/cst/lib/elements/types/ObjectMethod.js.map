{"version":3,"sources":["../../../src/elements/types/ObjectMethod.js"],"names":["getterAndSetter","get","set","ObjectMethod","childNodes","isFunction","children","key","generator","computed","kind","async","params","body","method","isToken","passToken","skipNonCode","currentElement","value","readKey","passNode","assertEnd","isNode","result","passExpression"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB;AACpBC,SAAK,IADe;AAEpBC,SAAK;AAFe,CAAxB;;IAKqBC,Y;;;AACjB,0BAAYC,UAAZ,EAAwB;AAAA;;AAAA,sJACd,cADc,EACEA,UADF;;AAEpB,cAAKC,UAAL,GAAkB,IAAlB;AAFoB;AAGvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,YAAJ;AACA,gBAAIC,YAAY,KAAhB;AACA,gBAAIC,WAAW,KAAf;AACA,gBAAIC,OAAO,QAAX;AACA,gBAAIC,QAAQ,KAAZ;AACA,gBAAIC,SAAS,EAAb;AACA,gBAAIC,aAAJ;AACA,gBAAIC,SAAS,IAAb;;AAEA,gBAAIR,SAASS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrCT,yBAASU,SAAT;AACAV,yBAASW,WAAT;AACAT,4BAAY,IAAZ;AACH;;AAED,gBAAIF,SAASS,OAAT,CAAiB,YAAjB,EAA+B,OAA/B,CAAJ,EAA6C;AACzCJ,wBAAQ,IAAR;AACAL,yBAASU,SAAT;AACAV,yBAASW,WAAT;AACH;;AAED,gBAAIX,SAASS,OAAT,CAAiB,YAAjB,EAA+Bf,eAA/B,CAAJ,EAAqD;AACjDU,uBAAOJ,SAASY,cAAT,CAAwBC,KAA/B;AACAL,yBAAS,KAAT;;AAEAR,yBAASU,SAAT,CAAmB,YAAnB;AACAV,yBAASW,WAAT;AACH;;AAEDR,uBAAWH,SAASS,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAX;AACAR,kBAAMa,QAAQd,QAAR,CAAN;;AAEAA,qBAASW,WAAT;;AAEAL,qBAAS,iCAAkBN,QAAlB,CAAT;AACAA,qBAASW,WAAT;;AAEAJ,mBAAOP,SAASe,QAAT,CAAkB,gBAAlB,CAAP;;AAEAf,qBAASgB,SAAT;;AAEA,iBAAKd,SAAL,GAAiBA,SAAjB;AACA,iBAAKE,IAAL,GAAYA,IAAZ;AACA,iBAAKH,GAAL,GAAWA,GAAX;AACA,iBAAKE,QAAL,GAAgBA,QAAhB;AACA,iBAAKK,MAAL,GAAcA,MAAd;AACA,iBAAKF,MAAL,GAAcA,MAAd;AACA,iBAAKC,IAAL,GAAYA,IAAZ;AACA,iBAAKF,KAAL,GAAaA,KAAb;AACH;;;;;kBAxDgBR,Y;;;AA2DrB,SAASiB,OAAT,CAAiBd,QAAjB,EAA2B;AACvB,QAAIA,SAASiB,MAAT,CAAgB,eAAhB,KAAoCjB,SAASiB,MAAT,CAAgB,YAAhB,CAAxC,EAAuE;AACnE,eAAOjB,SAASe,QAAT,EAAP;AACH,KAFD,MAEO;AACHf,iBAASU,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAV,iBAASW,WAAT;AACA,YAAIO,SAASlB,SAASmB,cAAT,EAAb;AACAnB,iBAASW,WAAT;AACAX,iBAASU,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACA,eAAOQ,MAAP;AACH;AACJ","file":"ObjectMethod.js","sourcesContent":["import Node from '../Node';\nimport getFunctionParams from './utils/getFunctionParams';\n\nconst getterAndSetter = {\n    get: true,\n    set: true,\n};\n\nexport default class ObjectMethod extends Node {\n    constructor(childNodes) {\n        super('ObjectMethod', childNodes);\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let key;\n        let generator = false;\n        let computed = false;\n        let kind = 'method';\n        let async = false;\n        let params = [];\n        let body;\n        let method = true;\n\n        if (children.isToken('Punctuator', '*')) {\n            children.passToken();\n            children.skipNonCode();\n            generator = true;\n        }\n\n        if (children.isToken('Identifier', 'async')) {\n            async = true;\n            children.passToken();\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Identifier', getterAndSetter)) {\n            kind = children.currentElement.value;\n            method = false;\n\n            children.passToken('Identifier');\n            children.skipNonCode();\n        }\n\n        computed = children.isToken('Punctuator', '[');\n        key = readKey(children);\n\n        children.skipNonCode();\n\n        params = getFunctionParams(children);\n        children.skipNonCode();\n\n        body = children.passNode('BlockStatement');\n\n        children.assertEnd();\n\n        this.generator = generator;\n        this.kind = kind;\n        this.key = key;\n        this.computed = computed;\n        this.method = method;\n        this.params = params;\n        this.body = body;\n        this.async = async;\n    }\n}\n\nfunction readKey(children) {\n    if (children.isNode('StringLiteral') || children.isNode('Identifier')) {\n        return children.passNode();\n    } else {\n        children.passToken('Punctuator', '[');\n        children.skipNonCode();\n        let result = children.passExpression();\n        children.skipNonCode();\n        children.passToken('Punctuator', ']');\n        return result;\n    }\n}\n"]}