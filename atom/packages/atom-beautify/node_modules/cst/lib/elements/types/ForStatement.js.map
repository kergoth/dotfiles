{"version":3,"sources":["../../../src/elements/types/ForStatement.js"],"names":["ForStatement","childNodes","children","passToken","skipNonCode","init","isToken","isNode","currentElement","moveNext","passExpression","test","update","body","passStatement","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,Y;;;AACjB,0BAAYC,UAAZ,EAAwB;AAAA;AAAA,iJACd,cADc,EACEA,UADF;AAEvB;;;;wCAEeC,Q,EAAU;AACtBA,qBAASC,SAAT,CAAmB,SAAnB,EAA8B,KAA9B;AACAD,qBAASE,WAAT;;AAEAF,qBAASC,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAD,qBAASE,WAAT;;AAEA,gBAAIC,OAAO,IAAX;;AAEA,gBAAI,CAACH,SAASI,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAL,EAA0C;AACtC,oBAAIJ,SAASK,MAAT,CAAgB,qBAAhB,CAAJ,EAA4C;AACxCF,2BAAOH,SAASM,cAAhB;AACAN,6BAASO,QAAT;AACH,iBAHD,MAGO;AACHJ,2BAAOH,SAASQ,cAAT,EAAP;AACH;AACDR,yBAASE,WAAT;AACH;;AAEDF,qBAASC,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAD,qBAASE,WAAT;;AAEA,gBAAIO,OAAO,IAAX;AACA,gBAAI,CAACT,SAASI,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAL,EAA0C;AACtCK,uBAAOT,SAASQ,cAAT,EAAP;AACAR,yBAASE,WAAT;AACH;;AAEDF,qBAASC,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAD,qBAASE,WAAT;;AAEA,gBAAIQ,SAAS,IAAb;AACA,gBAAI,CAACV,SAASI,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAL,EAA0C;AACtCM,yBAASV,SAASQ,cAAT,EAAT;AACAR,yBAASE,WAAT;AACH;;AAEDF,qBAASC,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAD,qBAASE,WAAT;;AAEA,gBAAIS,OAAOX,SAASY,aAAT,EAAX;;AAEAZ,qBAASa,SAAT;;AAEA,iBAAKV,IAAL,GAAYA,IAAZ;AACA,iBAAKM,IAAL,GAAYA,IAAZ;AACA,iBAAKC,MAAL,GAAcA,MAAd;AACA,iBAAKC,IAAL,GAAYA,IAAZ;AACH;;;;;kBArDgBb,Y","file":"ForStatement.js","sourcesContent":["import Statement from '../Statement';\n\nexport default class ForStatement extends Statement {\n    constructor(childNodes) {\n        super('ForStatement', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.passToken('Keyword', 'for');\n        children.skipNonCode();\n\n        children.passToken('Punctuator', '(');\n        children.skipNonCode();\n\n        let init = null;\n\n        if (!children.isToken('Punctuator', ';')) {\n            if (children.isNode('VariableDeclaration')) {\n                init = children.currentElement;\n                children.moveNext();\n            } else {\n                init = children.passExpression();\n            }\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ';');\n        children.skipNonCode();\n\n        let test = null;\n        if (!children.isToken('Punctuator', ';')) {\n            test = children.passExpression();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ';');\n        children.skipNonCode();\n\n        let update = null;\n        if (!children.isToken('Punctuator', ')')) {\n            update = children.passExpression();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', ')');\n        children.skipNonCode();\n\n        let body = children.passStatement();\n\n        children.assertEnd();\n\n        this.init = init;\n        this.test = test;\n        this.update = update;\n        this.body = body;\n    }\n}\n"]}