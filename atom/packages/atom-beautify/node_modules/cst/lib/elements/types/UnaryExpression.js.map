{"version":3,"sources":["../../../src/elements/types/UnaryExpression.js"],"names":["unaryOperators","UnaryExpression","childNodes","prefix","children","currentElement","type","assertToken","operator","passToken","value","skipNonCode","argument","passExpression","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,iBAAiB;AACnB,SAAK,IADc;AAEnB,SAAK,IAFc;AAGnB,SAAK,IAHc;AAInB,SAAK,IAJc;AAKnB,cAAU,IALS;AAMnB,YAAQ,IANW;AAOnB,cAAU;AAPS,CAAvB;;IAUqBC,e;;;AAEjB;;AAEA,6BAAYC,UAAZ,EAAwB;AAAA;;AAAA,4JACd,iBADc,EACKA,UADL;;AAEpB,cAAKC,MAAL,GAAc,IAAd;AAFoB;AAGvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIA,SAASC,cAAT,CAAwBC,IAAxB,KAAiC,YAAjC,IAAiDF,SAASC,cAAT,CAAwBC,IAAxB,KAAiC,SAAtF,EAAiG;AAC7FF,yBAASG,WAAT,CAAqBH,SAASC,cAAT,CAAwBC,IAA7C,EAAmDN,cAAnD;AACH,aAFD,MAEO;AACHI,yBAASG,WAAT,CAAqB,YAArB;AACH;;AAED,gBAAIC,WAAWJ,SAASK,SAAT,GAAqBC,KAApC;AACAN,qBAASO,WAAT;;AAEA,gBAAIC,WAAWR,SAASS,cAAT,EAAf;;AAEAT,qBAASU,SAAT;;AAEA,iBAAKF,QAAL,GAAgBA,QAAhB;AACA,iBAAKJ,QAAL,GAAgBA,QAAhB;AACH;;;;;kBAzBgBP,e","file":"UnaryExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst unaryOperators = {\n    '-': true,\n    '+': true,\n    '!': true,\n    '~': true,\n    'typeof': true,\n    'void': true,\n    'delete': true,\n};\n\nexport default class UnaryExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"-a\" after \"b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('UnaryExpression', childNodes);\n        this.prefix = true;\n    }\n\n    _acceptChildren(children) {\n        if (children.currentElement.type === 'Punctuator' || children.currentElement.type === 'Keyword') {\n            children.assertToken(children.currentElement.type, unaryOperators);\n        } else {\n            children.assertToken('Punctuator');\n        }\n\n        let operator = children.passToken().value;\n        children.skipNonCode();\n\n        let argument = children.passExpression();\n\n        children.assertEnd();\n\n        this.argument = argument;\n        this.operator = operator;\n    }\n}\n"]}