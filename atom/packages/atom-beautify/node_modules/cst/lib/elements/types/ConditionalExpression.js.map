{"version":3,"sources":["../../../src/elements/types/ConditionalExpression.js"],"names":["ConditionalExpression","childNodes","children","test","passExpression","skipNonCode","passToken","consequent","alternate","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,qB;;;AAEjB;;AAEA,mCAAYC,UAAZ,EAAwB;AAAA;AAAA,mKACd,uBADc,EACWA,UADX;AAEvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,OAAOD,SAASE,cAAT,EAAX;AACAF,qBAASG,WAAT;;AAEAH,qBAASI,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAJ,qBAASG,WAAT;;AAEA,gBAAIE,aAAaL,SAASE,cAAT,EAAjB;AACAF,qBAASG,WAAT;;AAEAH,qBAASI,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAJ,qBAASG,WAAT;;AAEA,gBAAIG,YAAYN,SAASE,cAAT,EAAhB;AACAF,qBAASO,SAAT;;AAEA,iBAAKN,IAAL,GAAYA,IAAZ;AACA,iBAAKI,UAAL,GAAkBA,UAAlB;AACA,iBAAKC,SAAL,GAAiBA,SAAjB;AACH;;;;;kBA3BgBR,qB","file":"ConditionalExpression.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class ConditionalExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('ConditionalExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let test = children.passExpression();\n        children.skipNonCode();\n\n        children.passToken('Punctuator', '?');\n        children.skipNonCode();\n\n        let consequent = children.passExpression();\n        children.skipNonCode();\n\n        children.passToken('Punctuator', ':');\n        children.skipNonCode();\n\n        let alternate = children.passExpression();\n        children.assertEnd();\n\n        this.test = test;\n        this.consequent = consequent;\n        this.alternate = alternate;\n    }\n}\n"]}