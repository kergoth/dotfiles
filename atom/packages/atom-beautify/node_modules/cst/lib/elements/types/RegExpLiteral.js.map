{"version":3,"sources":["../../../src/elements/types/RegExpLiteral.js"],"names":["RegExpLiteral","childNodes","children","assertToken","pattern","currentElement","value","flags","extra","rawValue","undefined","raw","getSourceCode","moveNext","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,a;;;AACjB,2BAAYC,UAAZ,EAAwB;AAAA;AAAA,mJACd,eADc,EACGA,UADH;AAEvB;;;;wCAEeC,Q,EAAU;AACtBA,qBAASC,WAAT,CAAqB,mBAArB;AACA,gBAAIC,UAAUF,SAASG,cAAT,CAAwBC,KAAxB,CAA8BF,OAA5C;AACA,gBAAIG,QAAQL,SAASG,cAAT,CAAwBC,KAAxB,CAA8BC,KAA1C;AACA,gBAAIC,QAAQ;AACRC,0BAAUC,SADF;AAERC,qBAAKT,SAASG,cAAT,CAAwBO,aAAxB;AAFG,aAAZ;;AAKAV,qBAASW,QAAT;AACAX,qBAASY,SAAT;;AAEA,iBAAKN,KAAL,GAAaA,KAAb;AACA,iBAAKJ,OAAL,GAAeA,OAAf;AACA,iBAAKG,KAAL,GAAaA,KAAb;AACH;;;;;kBApBgBP,a","file":"RegExpLiteral.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class RegExpLiteral extends Expression {\n    constructor(childNodes) {\n        super('RegExpLiteral', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.assertToken('RegularExpression');\n        let pattern = children.currentElement.value.pattern;\n        let flags = children.currentElement.value.flags;\n        let extra = {\n            rawValue: undefined,\n            raw: children.currentElement.getSourceCode(),\n        };\n\n        children.moveNext();\n        children.assertEnd();\n\n        this.extra = extra;\n        this.pattern = pattern;\n        this.flags = flags;\n    }\n}\n"]}