{"version":3,"sources":["../../../src/elements/types/ArrowFunctionExpression.js"],"names":["ArrowFunctionExpression","childNodes","id","generator","isFunction","children","params","async","isToken","passToken","skipNonCode","currentElement","isPattern","push","moveNext","expression","isStatement","body","passExpression","passStatement","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqBA,uB;;;AACjB,qCAAYC,UAAZ,EAAwB;AAAA;;AAAA,4KACd,yBADc,EACaA,UADb;;AAEpB,cAAKC,EAAL,GAAU,IAAV;AACA,cAAKC,SAAL,GAAiB,KAAjB;AACA,cAAKC,UAAL,GAAkB,IAAlB;AAJoB;AAKvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,SAAS,EAAb;AACA,gBAAIC,QAAQ,KAAZ;;AAEA,gBAAIF,SAASG,OAAT,CAAiB,YAAjB,EAA+B,OAA/B,CAAJ,EAA6C;AACzCD,wBAAQ,IAAR;AACAF,yBAASI,SAAT,CAAmB,YAAnB,EAAiC,OAAjC;AACAJ,yBAASK,WAAT;AACH;;AAED,gBAAIL,SAASG,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrCF,yBAAS,iCAAkBD,QAAlB,CAAT;AACAA,yBAASK,WAAT;AACH,aAHD,MAGO,IAAIL,SAASM,cAAT,CAAwBC,SAA5B,EAAuC;AAC1CN,uBAAOO,IAAP,CAAYR,SAASM,cAArB;AACAN,yBAASS,QAAT;AACAT,yBAASK,WAAT;AACH;;AAEDL,qBAASI,SAAT,CAAmB,YAAnB,EAAiC,IAAjC;AACAJ,qBAASK,WAAT;;AAEA,gBAAIK,aAAa,CAACV,SAASM,cAAT,CAAwBK,WAA1C;;AAEA,gBAAIC,aAAJ;AACA,gBAAIF,UAAJ,EAAgB;AACZE,uBAAOZ,SAASa,cAAT,EAAP;AACH,aAFD,MAEO;AACHD,uBAAOZ,SAASc,aAAT,EAAP;AACH;;AAEDd,qBAASe,SAAT;;AAEA,iBAAKb,KAAL,GAAaA,KAAb;AACA,iBAAKD,MAAL,GAAcA,MAAd;AACA,iBAAKW,IAAL,GAAYA,IAAZ;AACA,iBAAKF,UAAL,GAAkBA,UAAlB;AACH;;;;;kBA7CgBf,uB","file":"ArrowFunctionExpression.js","sourcesContent":["import Expression from '../Expression';\nimport getFunctionParams from './utils/getFunctionParams';\n\nexport default class ArrowFunctionExpression extends Expression {\n    constructor(childNodes) {\n        super('ArrowFunctionExpression', childNodes);\n        this.id = null;\n        this.generator = false;\n        this.isFunction = true;\n    }\n\n    _acceptChildren(children) {\n        let params = [];\n        let async = false;\n\n        if (children.isToken('Identifier', 'async')) {\n            async = true;\n            children.passToken('Identifier', 'async');\n            children.skipNonCode();\n        }\n\n        if (children.isToken('Punctuator', '(')) {\n            params = getFunctionParams(children);\n            children.skipNonCode();\n        } else if (children.currentElement.isPattern) {\n            params.push(children.currentElement);\n            children.moveNext();\n            children.skipNonCode();\n        }\n\n        children.passToken('Punctuator', '=>');\n        children.skipNonCode();\n\n        let expression = !children.currentElement.isStatement;\n\n        let body;\n        if (expression) {\n            body = children.passExpression();\n        } else {\n            body = children.passStatement();\n        }\n\n        children.assertEnd();\n\n        this.async = async;\n        this.params = params;\n        this.body = body;\n        this.expression = expression;\n    }\n}\n"]}