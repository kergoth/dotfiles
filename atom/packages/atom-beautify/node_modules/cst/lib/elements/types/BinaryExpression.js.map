{"version":3,"sources":["../../../src/elements/types/BinaryExpression.js"],"names":["binaryOperators","BinaryExpression","childNodes","children","left","passExpression","skipNonCode","currentElement","type","assertToken","operator","passToken","value","right","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB;AACpB,UAAM,IADc;AAEpB,UAAM,IAFc;AAGpB,WAAO,IAHa;AAIpB,WAAO,IAJa;AAKpB,SAAK,IALe;AAMpB,UAAM,IANc;AAOpB,SAAK,IAPe;AAQpB,UAAM,IARc;AASpB,UAAM,IATc;AAUpB,UAAM,IAVc;AAWpB,WAAO,IAXa;AAYpB,SAAK,IAZe;AAapB,SAAK,IAbe;AAcpB,SAAK,IAde;AAepB,SAAK,IAfe;AAgBpB,SAAK,IAhBe;AAiBpB,SAAK,IAjBe;AAkBpB,SAAK,IAlBe;AAmBpB,SAAK,IAnBe;AAoBpB,UAAM,IApBc;AAqBpB,kBAAc,IArBM;AAsBpB,UAAM;AAtBc,CAAxB;;IAyBqBC,gB;;;AAEjB;;AAEA,8BAAYC,UAAZ,EAAwB;AAAA;AAAA,yJACd,kBADc,EACMA,UADN;AAEvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,OAAOD,SAASE,cAAT,EAAX;AACAF,qBAASG,WAAT;AACA,gBAAIH,SAASI,cAAT,CAAwBC,IAAxB,KAAiC,YAAjC,IAAiDL,SAASI,cAAT,CAAwBC,IAAxB,KAAiC,SAAtF,EAAiG;AAC7FL,yBAASM,WAAT,CAAqBN,SAASI,cAAT,CAAwBC,IAA7C,EAAmDR,eAAnD;AACH,aAFD,MAEO;AACHG,yBAASM,WAAT,CAAqB,YAArB;AACH;AACD,gBAAIC,WAAWP,SAASQ,SAAT,GAAqBC,KAApC;AACAT,qBAASG,WAAT;AACA,gBAAIO,QAAQV,SAASE,cAAT,EAAZ;AACAF,qBAASW,SAAT;;AAEA,iBAAKV,IAAL,GAAYA,IAAZ;AACA,iBAAKM,QAAL,GAAgBA,QAAhB;AACA,iBAAKG,KAAL,GAAaA,KAAb;AACH;;;;;kBAxBgBZ,gB","file":"BinaryExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst binaryOperators = {\n    '==': true,\n    '!=': true,\n    '===': true,\n    '!==': true,\n    '<': true,\n    '<=': true,\n    '>': true,\n    '>=': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true,\n    '+': true,\n    '-': true,\n    '*': true,\n    '/': true,\n    '%': true,\n    '|': true,\n    '^': true,\n    '&': true,\n    'in': true,\n    'instanceof': true,\n    '**': true,\n};\n\nexport default class BinaryExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"a + b\" before \" * b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('BinaryExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let left = children.passExpression();\n        children.skipNonCode();\n        if (children.currentElement.type === 'Punctuator' || children.currentElement.type === 'Keyword') {\n            children.assertToken(children.currentElement.type, binaryOperators);\n        } else {\n            children.assertToken('Punctuator');\n        }\n        let operator = children.passToken().value;\n        children.skipNonCode();\n        let right = children.passExpression();\n        children.assertEnd();\n\n        this.left = left;\n        this.operator = operator;\n        this.right = right;\n    }\n}\n"]}