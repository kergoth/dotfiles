{"version":3,"sources":["../../../src/elements/types/UpdateExpression.js"],"names":["updateOperators","UpdateExpression","childNodes","children","operator","argument","prefix","isToken","passToken","value","skipNonCode","passAssignable","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB;AACpB,UAAM,IADc;AAEpB,UAAM;AAFc,CAAxB;;IAKqBC,gB;;;AAEjB;;AAEA,8BAAYC,UAAZ,EAAwB;AAAA;AAAA,yJACd,kBADc,EACMA,UADN;AAEvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,iBAAJ;AACA,gBAAIC,iBAAJ;AACA,gBAAIC,eAAJ;;AAEA,gBAAIH,SAASI,OAAT,CAAiB,YAAjB,EAA+BP,eAA/B,CAAJ,EAAqD;AACjDI,2BAAWD,SAASK,SAAT,GAAqBC,KAAhC;AACAN,yBAASO,WAAT;AACAL,2BAAWF,SAASQ,cAAT,EAAX;AACAL,yBAAS,IAAT;AACH,aALD,MAKO;AACHD,2BAAWF,SAASQ,cAAT,EAAX;AACAR,yBAASO,WAAT;AACAN,2BAAWD,SAASK,SAAT,GAAqBC,KAAhC;AACAH,yBAAS,KAAT;AACH;;AAEDH,qBAASS,SAAT;;AAEA,iBAAKP,QAAL,GAAgBA,QAAhB;AACA,iBAAKD,QAAL,GAAgBA,QAAhB;AACA,iBAAKE,MAAL,GAAcA,MAAd;AACH;;;;;kBA9BgBL,gB","file":"UpdateExpression.js","sourcesContent":["import Expression from '../Expression';\n\nconst updateOperators = {\n    '++': true,\n    '--': true,\n};\n\nexport default class UpdateExpression extends Expression {\n\n    // TODO: Should respect operator precedence: putting \"++a\" after \"b\" without parens should raise an error.\n\n    constructor(childNodes) {\n        super('UpdateExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let operator;\n        let argument;\n        let prefix;\n\n        if (children.isToken('Punctuator', updateOperators)) {\n            operator = children.passToken().value;\n            children.skipNonCode();\n            argument = children.passAssignable();\n            prefix = true;\n        } else {\n            argument = children.passAssignable();\n            children.skipNonCode();\n            operator = children.passToken().value;\n            prefix = false;\n        }\n\n        children.assertEnd();\n\n        this.argument = argument;\n        this.operator = operator;\n        this.prefix = prefix;\n    }\n}\n"]}