{"version":3,"sources":["../../../src/elements/types/ClassBody.js"],"names":["isCode","currentElement","ClassBody","childNodes","children","body","assertToken","moveNext","skipNonCode","isToken","passToken","assertOneOfNode","isNode","push","passNode","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,SAASA,MAAT,OAAkC;AAAA,QAAjBC,cAAiB,QAAjBA,cAAiB;;AAAA,gBACbA,kBAAkB,EADL;AAAA,QACvBD,MADuB,SACvBA,MADuB;;AAE9B,WAAQA,WAAW,KAAnB;AACH;;IAEoBE,S;;;AACjB,uBAAYC,UAAZ,EAAwB;AAAA;AAAA,2IACd,WADc,EACDA,UADC;AAEvB;;;;wCAEeC,Q,EAAU;AACtB,gBAAIC,OAAO,EAAX;;AAEAD,qBAASE,WAAT,CAAqB,YAArB,EAAmC,GAAnC;AACAF,qBAASG,QAAT;AACAH,qBAASI,WAAT;;AAEA,mBAAO,CAACJ,SAASK,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAR,EAA6C;AACzC,oBAAIL,SAASK,OAAT,CAAiB,YAAjB,EAA+B,GAA/B,CAAJ,EAAyC;AACrC;AACAL,6BAASM,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACH,iBAHD,MAGO,IAAI,CAACV,OAAOI,QAAP,CAAL,EAAuB;AAC1BA,6BAASI,WAAT;AACH,iBAFM,MAEA;AACHJ,6BAASO,eAAT,CAAyB,CAAC,eAAD,EAAkB,aAAlB,CAAzB;AACA,wBAAIP,SAASQ,MAAT,CAAgB,eAAhB,CAAJ,EAAsC;AAClCP,6BAAKQ,IAAL,CAAUT,SAASU,QAAT,CAAkB,eAAlB,CAAV;AACH,qBAFD,MAEO,IAAIV,SAASQ,MAAT,CAAgB,aAAhB,CAAJ,EAAoC;AACvCP,6BAAKQ,IAAL,CAAUT,SAASU,QAAT,CAAkB,aAAlB,CAAV;AACH;AACJ;AACJ;;AAEDV,qBAASM,SAAT,CAAmB,YAAnB,EAAiC,GAAjC;AACAN,qBAASW,SAAT;;AAEA,iBAAKV,IAAL,GAAYA,IAAZ;AACH;;;;;kBAhCgBH,S","file":"ClassBody.js","sourcesContent":["import Node from '../Node';\n\nfunction isCode({currentElement}) {\n    const {isCode} = currentElement || {};\n    return (isCode !== false);\n}\n\nexport default class ClassBody extends Node {\n    constructor(childNodes) {\n        super('ClassBody', childNodes);\n    }\n\n    _acceptChildren(children) {\n        let body = [];\n\n        children.assertToken('Punctuator', '{');\n        children.moveNext();\n        children.skipNonCode();\n\n        while (!children.isToken('Punctuator', '}')) {\n            if (children.isToken('Punctuator', ';')) {\n                // For the class Test { x() {}; } case\n                children.passToken('Punctuator', ';');\n            } else if (!isCode(children)) {\n                children.skipNonCode();\n            } else {\n                children.assertOneOfNode(['ClassProperty', 'ClassMethod']);\n                if (children.isNode('ClassProperty')) {\n                    body.push(children.passNode('ClassProperty'));\n                } else if (children.isNode('ClassMethod')) {\n                    body.push(children.passNode('ClassMethod'));\n                }\n            }\n        }\n\n        children.passToken('Punctuator', '}');\n        children.assertEnd();\n\n        this.body = body;\n    }\n}\n"]}