{"version":3,"sources":["../../../src/elements/types/AwaitExpression.js"],"names":["AwaitExpression","childNodes","children","passToken","argument","isEnd","skipNonCode","passExpression","assertEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,e;;;AAEjB;;AAEA,6BAAYC,UAAZ,EAAwB;AAAA;AAAA,uJACd,iBADc,EACKA,UADL;AAEvB;;;;wCAEeC,Q,EAAU;AACtBA,qBAASC,SAAT,CAAmB,YAAnB,EAAiC,OAAjC;;AAEA,gBAAIC,WAAW,IAAf;;AAEA,gBAAI,CAACF,SAASG,KAAd,EAAqB;AACjBH,yBAASI,WAAT;AACAF,2BAAWF,SAASK,cAAT,EAAX;AACH;;AAEDL,qBAASM,SAAT;;AAEA,iBAAKJ,QAAL,GAAgBA,QAAhB;AACH;;;;;kBArBgBJ,e","file":"AwaitExpression.js","sourcesContent":["import Expression from '../Expression';\n\nexport default class AwaitExpression extends Expression {\n\n    // TODO: Requires an async function.\n\n    constructor(childNodes) {\n        super('AwaitExpression', childNodes);\n    }\n\n    _acceptChildren(children) {\n        children.passToken('Identifier', 'await');\n\n        let argument = null;\n\n        if (!children.isEnd) {\n            children.skipNonCode();\n            argument = children.passExpression();\n        }\n\n        children.assertEnd();\n\n        this.argument = argument;\n    }\n}\n"]}