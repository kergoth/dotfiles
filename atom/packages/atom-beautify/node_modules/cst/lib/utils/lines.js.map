{"version":3,"sources":["../../src/utils/lines.js"],"names":["getLines","getLineInfo","lineBreakRegex","lineBreakRegexGlobal","input","split","code","lines","lastIndex","lastOffset","match","exec","push","offset","text","substring","index","lineBreak","length","substr"],"mappings":";;;;;QAKgBA,Q,GAAAA,Q;QAIAC,W,GAAAA,W;AAPhB,IAAMC,iBAAiB,YAAvB;AACA,IAAMC,uBAAuB,aAA7B;;AAEO,SAASH,QAAT,CAAkBI,KAAlB,EAA2C;AAC9C,WAAOA,MAAMC,KAAN,CAAYH,cAAZ,CAAP;AACH;;AAEM,SAASD,WAAT,CAAqBK,IAArB,EAA2B;AAC9B,QAAIC,QAAQ,EAAZ;AACAJ,yBAAqBK,SAArB,GAAiC,CAAjC;AACA,QAAIC,aAAa,CAAjB;AACA,QAAIC,cAAJ;AACA,WAAO,CAACA,QAAQP,qBAAqBQ,IAArB,CAA0BL,IAA1B,CAAT,MAA8C,IAArD,EAA2D;AACvDC,cAAMK,IAAN,CAAW;AACPC,oBAAQJ,UADD;AAEPK,kBAAMR,KAAKS,SAAL,CAAeN,UAAf,EAA2BC,MAAMM,KAAjC,CAFC;AAGPC,uBAAWP,MAAM,CAAN;AAHJ,SAAX;AAKAD,qBAAaC,MAAMM,KAAN,GAAcN,MAAM,CAAN,EAASQ,MAApC;AACH;AACDX,UAAMK,IAAN,CAAW,EAACC,QAAQJ,UAAT,EAAqBK,MAAMR,KAAKa,MAAL,CAAYV,UAAZ,CAA3B,EAAoDQ,WAAW,IAA/D,EAAX;AACA,WAAOV,KAAP;AACH","file":"lines.js","sourcesContent":["/* @flow */\n\nconst lineBreakRegex = /\\r\\n|\\r|\\n/;\nconst lineBreakRegexGlobal = /\\r\\n|\\r|\\n/g;\n\nexport function getLines(input: string): string[] {\n    return input.split(lineBreakRegex);\n}\n\nexport function getLineInfo(code) {\n    let lines = [];\n    lineBreakRegexGlobal.lastIndex = 0;\n    let lastOffset = 0;\n    let match;\n    while ((match = lineBreakRegexGlobal.exec(code)) !== null) {\n        lines.push({\n            offset: lastOffset,\n            text: code.substring(lastOffset, match.index),\n            lineBreak: match[0],\n        });\n        lastOffset = match.index + match[0].length;\n    }\n    lines.push({offset: lastOffset, text: code.substr(lastOffset), lineBreak: null});\n    return lines;\n}\n"]}