{"version":3,"sources":["../../../src/plugins/scopes/ScopesApi.js"],"names":["scopedBlocks","ScopesApi","program","on","elements","map","_addElement","_removeElement","_scopesMap","_program","acquire","element","nodes","buildNodeList","i","length","_addNode","_updateTokenIfNecessary","_removeNode","parentElement","type","value","node","_addProgram","_addFunctionExpression","_addFunctionDeclaration","_addArrowFunctionExpression","_addObjectMethod","_addClassDeclaration","_addClassExpression","_addClassMethod","_addScopedBlock","_addBlockStatement","_addThisExpression","_addSuper","_addIdentifier","_addJSXIdentifier","_programScope","_addScope","parentScope","undefined","isFunctionScope","isProgramScope","_getParentScopeFor","isClassScope","isArrowFunctionScope","_getScopeFor","scope","get","destroy","delete","name","property","_addReferenceToScope","read","write","key","shorthand","computed","topLevelPattern","isPattern","right","container","params","indexOf","_addDefinitionToScope","Parameter","id","Variable","variableDeclaration","kind","LetVariable","Constant","init","param","CatchClauseError","left","operator","argument","ImportBinding","local","SelfReference","label","_removeBlockStatement","reference","_programReferences","_removeReference","definition","_programDefinitions","_removeDefinition","referenceInfo","_addReference","definitionInfo","_addDefinition","scopeInfo","set","variable","parentNode","result","nodesToProcess","shift","childElements","push"],"mappings":"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","file":"ScopesApi.js","sourcesContent":["/* @flow */\nimport type Variable from './Variable';\nimport type Reference from './Reference';\nimport type Definition from './Definition';\nimport type Element from '../../elements/Element';\nimport Token from '../../elements/Token';\nimport Node from '../../elements/Node';\nimport Program from '../../elements/types/Program';\nimport BlockStatement from '../../elements/types/BlockStatement';\nimport Identifier from '../../elements/types/Identifier';\nimport Scope from './Scope';\nimport type {ReferenceInfo, DefinitionInfo, ScopeInfo} from './Scope';\nimport AssignmentPattern from '../../elements/types/AssignmentPattern';\nimport FunctionExpression from '../../elements/types/FunctionExpression';\nimport FunctionDeclaration from '../../elements/types/FunctionDeclaration';\nimport ArrowFunctionExpression from '../../elements/types/ArrowFunctionExpression';\nimport VariableDeclarator from '../../elements/types/VariableDeclarator';\nimport VariableDeclaration from '../../elements/types/VariableDeclaration';\nimport AssignmentExpression from '../../elements/types/AssignmentExpression';\nimport UpdateExpression from '../../elements/types/UpdateExpression';\nimport ForOfStatement from '../../elements/types/ForOfStatement';\nimport ForInStatement from '../../elements/types/ForInStatement';\nimport MemberExpression from '../../elements/types/MemberExpression';\nimport ObjectProperty from '../../elements/types/ObjectProperty';\nimport ObjectMethod from '../../elements/types/ObjectMethod';\nimport ImportDefaultSpecifier from '../../elements/types/ImportDefaultSpecifier';\nimport ImportNamespaceSpecifier from '../../elements/types/ImportNamespaceSpecifier';\nimport ImportSpecifier from '../../elements/types/ImportSpecifier';\nimport ThisExpression from '../../elements/types/ThisExpression';\nimport Super from '../../elements/types/Super';\nimport CatchClause from '../../elements/types/CatchClause';\nimport LabeledStatement from '../../elements/types/LabeledStatement';\nimport BreakStatement from '../../elements/types/BreakStatement';\nimport ContinueStatement from '../../elements/types/ContinueStatement';\nimport ClassExpression from '../../elements/types/ClassExpression';\nimport ClassDeclaration from '../../elements/types/ClassDeclaration';\nimport ClassMethod from '../../elements/types/ClassMethod';\nimport JSXIdentifier from '../../elements/types/JSXIdentifier';\nimport JSXAttribute from '../../elements/types/JSXAttribute';\nimport JSXMemberExpression from '../../elements/types/JSXMemberExpression';\nimport JSXNamespacedName from '../../elements/types/JSXNamespacedName';\nimport {types} from './Definition';\n\nconst scopedBlocks = {\n    'ForStatement': true,\n    'ForInStatement': true,\n    'ForOfStatement': true,\n    'SwitchStatement': true,\n    'CatchClause': true,\n};\n\nexport default class ScopesApi {\n    constructor(program: Program) {\n        program.on('elements-add', (elements: Element[]) => {\n            elements.map(this._addElement, this);\n        });\n        program.on('elements-remove', (elements: Element[]) => {\n            elements.map(this._removeElement, this);\n        });\n        this._scopesMap = new Map();\n        this._program = program;\n        this._addElement(program);\n        this.acquire(this._program);\n    }\n\n    _program: Program;\n    _programScope: Scope;\n    _scopesMap: Map<Element, Scope>;\n\n    _addElement(element: Element) {\n        if (element instanceof Node) {\n            let nodes = buildNodeList((element: Node));\n            for (let i = 0; i < nodes.length; i++) {\n                this._addNode(nodes[i]);\n            }\n        }\n        this._updateTokenIfNecessary(element);\n    }\n\n    _removeElement(element: Element) {\n        if (element instanceof Node) {\n            let nodes = buildNodeList((element: Node));\n            for (let i = 0; i < nodes.length; i++) {\n                this._removeNode(nodes[i]);\n            }\n        }\n        this._updateTokenIfNecessary(element);\n    }\n\n    _updateTokenIfNecessary(element: Element) {\n        if (element instanceof Token) {\n            let parentElement = element.parentElement;\n            if (parentElement) {\n                if (element.type === 'Identifier') {\n                    this._removeElement(parentElement);\n                    this._addElement(parentElement);\n                    return;\n                }\n                if (\n                    element.type === 'Punctuator' &&\n                    element.value === ':' &&\n                    parentElement instanceof ObjectProperty\n                ) {\n                    this._removeElement(parentElement);\n                    this._addElement(parentElement);\n                    return;\n                }\n            }\n        }\n    }\n\n    _addNode(node: Node): void {\n        if (node instanceof Program) {\n            return this._addProgram(node);\n        }\n\n        if (node instanceof FunctionExpression) {\n            return this._addFunctionExpression(node);\n        }\n\n        if (node instanceof FunctionDeclaration) {\n            return this._addFunctionDeclaration(node);\n        }\n\n        if (node instanceof ArrowFunctionExpression) {\n            return this._addArrowFunctionExpression(node);\n        }\n\n        if (node instanceof ObjectMethod) {\n            return this._addObjectMethod(node);\n        }\n\n        if (node instanceof ClassDeclaration) {\n            return this._addClassDeclaration(node);\n        }\n\n        if (node instanceof ClassExpression) {\n            return this._addClassExpression(node);\n        }\n\n        if (node instanceof ClassMethod) {\n            return this._addClassMethod(node);\n        }\n\n        if (node.type in scopedBlocks) {\n            return this._addScopedBlock(node);\n        }\n\n        if (node instanceof BlockStatement) {\n            return this._addBlockStatement(node);\n        }\n\n        if (node instanceof ThisExpression) {\n            return this._addThisExpression(node);\n        }\n\n        if (node instanceof Super) {\n            return this._addSuper(node);\n        }\n\n        if (node instanceof Identifier) {\n            return this._addIdentifier(node);\n        }\n\n        if (node instanceof JSXIdentifier) {\n            return this._addJSXIdentifier(node);\n        }\n    }\n\n    _addProgram(node: Program) {\n        this._programScope = this._addScope({\n            node,\n            parentScope: undefined,\n            isFunctionScope: true,\n            isProgramScope: true,\n        });\n    }\n\n    _addClassExpression(node: ClassExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isClassScope: true,\n        });\n    }\n\n    _addClassDeclaration(node: ClassDeclaration) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isClassScope: true,\n        });\n    }\n\n    _addClassMethod(node: ClassMethod) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n        });\n    }\n\n    _addFunctionExpression(node: FunctionExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n        });\n    }\n\n    _addObjectMethod(node: ObjectMethod) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n        });\n    }\n\n    _addFunctionDeclaration(node: FunctionDeclaration) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n        });\n    }\n\n    _addArrowFunctionExpression(node: ArrowFunctionExpression) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n            isFunctionScope: true,\n            isArrowFunctionScope: true,\n        });\n    }\n\n    _addScopedBlock(node: Node) {\n        this._addScope({\n            node,\n            parentScope: this._getParentScopeFor(node),\n        });\n    }\n\n    _addBlockStatement(node: BlockStatement) {\n        let parentElement = node.parentElement;\n        if (\n            parentElement &&\n            (\n                parentElement.type === 'ForStatement' ||\n                parentElement.type === 'ForInStatement' ||\n                parentElement.type === 'ForOfStatement' ||\n                parentElement.type === 'CatchClause' ||\n                parentElement.type === 'ArrowFunctionExpression' ||\n                parentElement.type === 'FunctionExpression' ||\n                parentElement.type === 'FunctionDeclaration'\n            )\n        ) {\n            return;\n        }\n        this._addScope({\n            node,\n            parentScope: this._getScopeFor(parentElement),\n        });\n    }\n\n    _removeBlockStatement(node: BlockStatement) {\n        let parentElement = node.parentElement;\n        if (\n            parentElement &&\n            (\n                parentElement.type === 'ForStatement' ||\n                parentElement.type === 'ForInStatement' ||\n                parentElement.type === 'ForOfStatement' ||\n                parentElement.type === 'CatchClause' ||\n                parentElement.type === 'ArrowFunctionExpression' ||\n                parentElement.type === 'FunctionExpression' ||\n                parentElement.type === 'FunctionDeclaration'\n            )\n        ) {\n            return;\n        }\n\n        let scope = this._scopesMap.get(node);\n        if (scope) {\n            scope.destroy();\n            this._scopesMap.delete(node);\n        }\n    }\n\n    _addJSXIdentifier(node: JSXIdentifier) {\n        let name = node.name;\n        let scope = this._getScopeFor(node);\n        let parentElement = node.parentElement;\n\n        if (!scope || !parentElement) {\n            return;\n        }\n\n        if (parentElement instanceof JSXAttribute) {\n            if (node === parentElement.name) {\n                return;\n            }\n        }\n\n        if (parentElement instanceof JSXMemberExpression) {\n            if (node === parentElement.property) {\n                return;\n            }\n        }\n\n        if (parentElement instanceof JSXNamespacedName) {\n            if (node === parentElement.name) {\n                return;\n            }\n        }\n\n        this._addReferenceToScope(scope, {node, name, read: true, write: false});\n    }\n\n    _addIdentifier(node: Identifier) {\n        let scope = this._getScopeFor(node);\n        let parentElement = node.parentElement;\n\n        if (!scope || !parentElement) {\n            return;\n        }\n\n        let name = node.name;\n        if (parentElement instanceof ObjectProperty && parentElement.parentElement) {\n            if (node === parentElement.key && !parentElement.shorthand) {\n                if (parentElement.computed) {\n                    this._addReferenceToScope(scope, {node, name, read: true, write: false});\n                }\n                return;\n            }\n        }\n        let topLevelPattern = node;\n        while (topLevelPattern.parentElement) {\n            if (topLevelPattern.parentElement instanceof ObjectProperty) {\n                if (topLevelPattern.parentElement.parentElement.isPattern) {\n                    topLevelPattern = topLevelPattern.parentElement.parentElement;\n                    continue;\n                }\n            }\n            if (topLevelPattern.parentElement instanceof AssignmentPattern) {\n                if (topLevelPattern === topLevelPattern.parentElement.right) {\n                    break;\n                }\n            }\n            if (!topLevelPattern.parentElement.isPattern) {\n                break;\n            }\n            topLevelPattern = topLevelPattern.parentElement;\n        }\n\n        let container = topLevelPattern.parentElement;\n        if (!container) {\n            return;\n        }\n\n        if (\n            container instanceof ClassMethod ||\n            container instanceof ObjectMethod ||\n            container instanceof FunctionExpression ||\n            container instanceof FunctionDeclaration ||\n            container instanceof ArrowFunctionExpression\n        ) {\n            if (container.params.indexOf(topLevelPattern) !== -1) {\n                this._addDefinitionToScope(scope, {node, name, type: types.Parameter});\n                if (topLevelPattern instanceof AssignmentPattern) {\n                    this._addReferenceToScope(scope, {node, name, read: false, write: true, type: types.Parameter});\n                }\n                return;\n            }\n        }\n        if (container instanceof VariableDeclarator) {\n            if (container.id === topLevelPattern) {\n                let type = types.Variable;\n                let variableDeclaration = container.parentElement;\n                if (variableDeclaration && variableDeclaration instanceof VariableDeclaration) {\n                    if (variableDeclaration.kind === 'let') {\n                        type = types.LetVariable;\n                    }\n                    if (variableDeclaration.kind === 'const') {\n                        type = types.Constant;\n                    }\n                    this._addDefinitionToScope(scope, {node, name, type});\n                    let write = container.init ||\n                        variableDeclaration.parentElement instanceof ForOfStatement ||\n                        variableDeclaration.parentElement instanceof ForInStatement;\n                    if (write) {\n                        this._addReferenceToScope(scope, {node, name, read: false, write: true, type});\n                    }\n                }\n                return;\n            }\n        }\n        if (container instanceof CatchClause) {\n            if (container.param === topLevelPattern) {\n                this._addDefinitionToScope(scope, {node, name, type: types.CatchClauseError});\n                return;\n            }\n        }\n        if (container instanceof AssignmentExpression) {\n            if (container.left === topLevelPattern) {\n                this._addReferenceToScope(scope, {node, name, read: container.operator !== '=', write: true});\n                return;\n            }\n        }\n        if (container instanceof UpdateExpression) {\n            if (container.argument === topLevelPattern) {\n                this._addReferenceToScope(scope, {node, name, read: true, write: true});\n                return;\n            }\n        }\n        if (container instanceof MemberExpression) {\n            if (node === container.property && !container.computed) {\n                return;\n            }\n        }\n        if (container instanceof ObjectMethod) {\n            if (node === container.key && !container.computed && !container.shorthand) {\n                return;\n            }\n        }\n        if (container instanceof ClassMethod) {\n            if (node === container.key && !container.computed) {\n                return;\n            }\n        }\n        if (container instanceof ImportDefaultSpecifier) {\n            this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            return;\n        }\n        if (container instanceof ImportNamespaceSpecifier) {\n            this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            return;\n        }\n        if (container instanceof ImportSpecifier) {\n            if (container.local === node) {\n                this._addDefinitionToScope(scope, {node, name, type: types.ImportBinding});\n            }\n            return;\n        }\n        if (container instanceof ClassExpression) {\n            if (container.id === node) {\n                this._addDefinitionToScope(scope, {node, name, type: types.SelfReference});\n                this._addReferenceToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    read: false,\n                    write: true,\n                    type: types.SelfReference,\n                });\n                return;\n            }\n        }\n        if (container instanceof ClassDeclaration) {\n            if (container.id === node) {\n                let parentScope = this._getParentScopeFor(container);\n                if (parentScope) {\n                    this._addDefinitionToScope(parentScope, {node, name, type: types.LetVariable});\n                    this._addReferenceToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        read: false,\n                        write: true,\n                        type: types.LetVariable,\n                    });\n                    return;\n                }\n            }\n        }\n        if (container instanceof FunctionDeclaration) {\n            if (node === container.id) {\n                let parentScope = this._getParentScopeFor(container);\n                if (parentScope) {\n                    this._addDefinitionToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        type: types.LetVariable,\n                    });\n                    this._addReferenceToScope(parentScope, {\n                        node: node,\n                        name: node.name,\n                        read: false,\n                        write: true,\n                        type: types.LetVariable,\n                    });\n                }\n                return;\n            }\n        }\n        if (container instanceof FunctionExpression) {\n            if (node === container.id) {\n                this._addDefinitionToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    type: types.SelfReference,\n                });\n                this._addReferenceToScope(scope, {\n                    node: node,\n                    name: node.name,\n                    read: false,\n                    write: true,\n                    type: types.SelfReference,\n                });\n                return;\n            }\n        }\n        if (container instanceof LabeledStatement) {\n            if (node === container.label) {\n                return;\n            }\n        }\n        if (container instanceof BreakStatement || container instanceof ContinueStatement) {\n            return;\n        }\n        this._addReferenceToScope(scope, {node, name, read: true, write: false});\n    }\n\n    _addThisExpression(node: ThisExpression) {\n        let scope = this._getScopeFor(node);\n        if (scope) {\n            this._addReferenceToScope(scope, {node, name: 'this', read: true, write: false});\n        }\n    }\n\n    _addSuper(node: Super) {\n        let scope = this._getScopeFor(node);\n        if (scope) {\n            this._addReferenceToScope(scope, {node, name: 'super', read: true, write: false});\n        }\n    }\n\n    _removeNode(node: Node) {\n        if (\n            node instanceof FunctionExpression ||\n            node instanceof FunctionDeclaration ||\n            node instanceof ArrowFunctionExpression ||\n            node instanceof ClassDeclaration ||\n            node instanceof ClassExpression ||\n            node.type in scopedBlocks\n        ) {\n            let scope = this._scopesMap.get(node);\n            if (scope) {\n                scope.destroy();\n                this._scopesMap.delete(node);\n            }\n        }\n\n        if (node instanceof BlockStatement) {\n            return this._removeBlockStatement(node);\n        }\n\n        if (\n            node instanceof ThisExpression ||\n            node instanceof Super ||\n            node instanceof Identifier ||\n            node instanceof JSXIdentifier\n        ) {\n            let reference = this._programScope._programReferences.get(node);\n            if (reference) {\n                reference.scope._removeReference(reference);\n            }\n            let definition = this._programScope._programDefinitions.get(node);\n            if (definition) {\n                definition.scope._removeDefinition(definition);\n            }\n        }\n    }\n\n    _addReferenceToScope(scope: Scope, referenceInfo: ReferenceInfo) {\n        let reference = this._programScope._programReferences.get(referenceInfo.node);\n        if (!reference) {\n            scope._addReference(referenceInfo);\n        }\n    }\n\n    _addDefinitionToScope(scope: Scope, definitionInfo: DefinitionInfo) {\n        let definition = this._programScope._programDefinitions.get(definitionInfo.node);\n        if (!definition) {\n            scope._addDefinition(definitionInfo);\n        }\n    }\n\n    _addScope(scopeInfo: ScopeInfo): Scope {\n        let scope = this._scopesMap.get(scopeInfo.node);\n        if (!scope) {\n            scope = new Scope(scopeInfo);\n            this._scopesMap.set(scopeInfo.node, scope);\n        }\n        return scope;\n    }\n\n    _getParentScopeFor(element: Element): ?Scope {\n        return this._getScopeFor(element.parentElement);\n    }\n\n    _getScopeFor(element: ?Element): ?Scope {\n        while (element) {\n            let scope = this._scopesMap.get(element);\n            if (scope) {\n                return scope;\n            }\n            element = element.parentElement;\n        }\n        return null;\n    }\n\n    acquire(element: Node): ?Scope {\n        return this._scopesMap.get(element);\n    }\n\n    findReference(node: Node): ?Reference {\n        return this._programScope._programReferences.get(node);\n    }\n\n    findDefinition(node: Node): ?Definition {\n        return this._programScope._programDefinitions.get(node);\n    }\n\n    findVariable(node: Node): ?Variable {\n        let reference = this._programScope._programReferences.get(node);\n        if (reference) {\n            return reference.variable;\n        }\n        let definition = this._programScope._programDefinitions.get(node);\n        if (definition) {\n            return definition.variable;\n        }\n    }\n}\n\nfunction buildNodeList(parentNode: Node): Node[] {\n    let result: Node[] = [parentNode];\n    let nodesToProcess: Node[] = [parentNode];\n    while (nodesToProcess.length > 0) {\n        let node = nodesToProcess.shift();\n        let childElements = node.childElements;\n        for (let i = 0; i < childElements.length; i++) {\n            let element = childElements[i];\n            if (element instanceof Node) {\n                result.push(element);\n                nodesToProcess.push(element);\n            }\n        }\n    }\n    return result;\n}\n"]}