{"version":3,"sources":["../../../src/plugins/scopes/Scope.js"],"names":["Scope","scopeInfo","node","parentScope","isProgramScope","isFunctionScope","isClassScope","isArrowFunctionScope","childScopes","push","_depth","_variables","_references","_isProgramScope","Boolean","_isFunctionScope","_isClassScope","_isArrowFunctionScope","_programReferences","_programDefinitions","variable","variables","get","name","sort","variable1","variable2","typeOrder1","type","typeOrder2","set","definitionInfo","Variable","_addDefinition","item","scope","_adjustReferencesOnVariableAdd","_addVariable","definition","programScope","_getProgramScope","_removeDefinition","_definitions","size","removeVariable","delete","depth","references","reference","refVar","varDepth","_transferReferences","removeVariableIfRequired","_addReference","childScope","referenceInfo","_assignReference","currentScope","globalVariable","ImplicitGlobal","builtInVariable","BuiltIn","index","indexOf","splice","_removeReference","concat","values","scopeIndex","getReferences","forEach","length"],"mappings":"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","file":"Scope.js","sourcesContent":["/* @flow */\n\nimport type Node from '../../elements/Node';\nimport Reference from './Reference';\nimport Variable from './Variable';\nimport {default as Definition, types, typeOrder} from './Definition';\nimport toArray from '../../utils/toArray';\n\nexport default class Scope {\n    constructor(scopeInfo: ScopeInfo) {\n        let {node, parentScope, isProgramScope, isFunctionScope, isClassScope, isArrowFunctionScope} = scopeInfo;\n\n        this.node = node;\n        this.parentScope = parentScope;\n        if (parentScope) {\n            parentScope.childScopes.push(this);\n            this._depth = parentScope._depth + 1;\n        } else {\n            this._depth = 0;\n        }\n        this.childScopes = [];\n        this._variables = new Map();\n        this._references = new Map();\n        this._isProgramScope = Boolean(isProgramScope);\n        this._isFunctionScope = Boolean(isFunctionScope);\n        this._isClassScope = Boolean(isClassScope);\n        this._isArrowFunctionScope = Boolean(isArrowFunctionScope);\n\n        if (isProgramScope) {\n            this._programReferences = new Map();\n            this._programDefinitions = new Map();\n        }\n    }\n\n    _isProgramScope: boolean;\n    _isFunctionScope: boolean;\n    _isClassScope: boolean;\n    _isArrowFunctionScope: boolean;\n    node: Node;\n    _depth: number;\n    parentScope: ?Scope;\n    childScopes: Scope[];\n    _variables: Map<string, Variable[]>;\n    _references: Map<string, Reference[]>;\n\n    _programReferences: Map<Node, Reference>;\n    _programDefinitions: Map<Node, Definition>;\n\n    _addVariable(variable: Variable) {\n        let variables = this._variables.get(variable.name);\n        if (variables) {\n            variables.push(variable);\n            variables.sort((variable1: Variable, variable2: Variable) => {\n                let typeOrder1 = typeOrder[variable1.type];\n                let typeOrder2 = typeOrder[variable2.type];\n                if (typeOrder1 > typeOrder2) {\n                    return 1;\n                }\n                if (typeOrder1 < typeOrder2) {\n                    return -1;\n                }\n                return 0;\n            });\n        } else {\n            this._variables.set(variable.name, [variable]);\n        }\n    }\n\n    _addDefinition(definitionInfo: DefinitionInfo) {\n        let {node, name, type} = definitionInfo;\n        if (type === types.Variable) {\n            if (!this._isFunctionScope && this.parentScope) {\n                this.parentScope._addDefinition(definitionInfo);\n                return;\n            }\n        }\n\n        let variables = this._variables.get(name) || [];\n        let variable: ?Variable;\n        for (let item of variables) {\n            if (item.type === type) {\n                variable = item;\n                break;\n            }\n        }\n\n        if (!variable) {\n            variable = new Variable({name, type, scope: this});\n            this._adjustReferencesOnVariableAdd(variable);\n            this._addVariable(variable);\n        }\n\n        let definition = new Definition({node, type, scope: this});\n\n        variable._addDefinition(definition);\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programDefinitions.set(node, definition);\n        }\n    }\n\n    _removeDefinition(definition: Definition) {\n        let variable = definition.variable;\n\n        variable._removeDefinition(definition);\n\n        if (\n            variable._definitions.size === 0 &&\n            (\n                variable.type === 'LetVariable' ||\n                variable.type === 'Constant' ||\n                variable.type === 'Variable' ||\n                variable.type === 'Parameter' ||\n                variable.type === 'SelfReference' ||\n                variable.type === 'CatchClauseError' ||\n                variable.type === 'ImportBinding'\n            )\n        ) {\n            removeVariable(variable);\n        }\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programDefinitions.delete(definition.node);\n        }\n    }\n\n    _adjustReferencesOnVariableAdd(variable: Variable) {\n        let depth = variable.scope._depth;\n        let references = this._references.get(variable.name);\n        if (references) {\n            for (let reference of references) {\n                let refVar = reference.variable;\n                let varDepth = refVar.scope._depth;\n                if (varDepth === depth) {\n                    if (typeOrder[variable.type] < typeOrder[refVar.type]) {\n                        refVar._transferReferences(variable);\n                        removeVariableIfRequired(refVar);\n                    }\n                } else if (varDepth < depth) {\n                    refVar._references.delete(reference);\n                    variable._addReference(reference);\n                    reference.variable = variable;\n                    removeVariableIfRequired(refVar);\n                }\n            }\n        }\n\n        for (let childScope of this.childScopes) {\n            childScope._adjustReferencesOnVariableAdd(variable);\n        }\n    }\n\n    _addReference(referenceInfo: ReferenceInfo) {\n        let {name} = referenceInfo;\n        let reference = new Reference({scope: this, ...referenceInfo});\n        this._assignReference(reference, name);\n        let references = this._references.get(name);\n        if (references) {\n            references.push(reference);\n        } else {\n            this._references.set(name, [reference]);\n        }\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programReferences.set(reference.node, reference);\n        }\n    }\n\n    _assignReference(reference: Reference, name: string) {\n        let currentScope = this;\n        do {\n            let variables = currentScope._variables.get(name);\n            if (variables) {\n                if (reference.type) {\n                    for (let variable of variables) {\n                        if (variable.type === reference.type) {\n                            variable._addReference(reference);\n                            return;\n                        }\n                    }\n                } else {\n                    variables[0]._addReference(reference);\n                    return;\n                }\n            }\n            if (!currentScope.parentScope) {\n                let globalVariable = new Variable({\n                    name, type: types.ImplicitGlobal, scope: currentScope,\n                });\n                globalVariable._addReference(reference);\n                currentScope._addVariable(globalVariable);\n                return;\n            } else {\n                if (\n                    (\n                        (name === 'arguments' || name === 'this') &&\n                        currentScope._isFunctionScope &&\n                        !currentScope._isArrowFunctionScope &&\n                        !currentScope._isProgramScope\n                    ) ||\n                    (\n                        name === 'super' && currentScope._isClassScope\n                    )\n                ) {\n                    let builtInVariable = new Variable({\n                        name, type: types.BuiltIn, scope: currentScope,\n                    });\n                    builtInVariable._addReference(reference);\n                    currentScope._addVariable(builtInVariable);\n                    return;\n                }\n                currentScope = currentScope.parentScope;\n            }\n        } while (true);\n    }\n\n    _removeReference(reference: Reference) {\n        let variable = reference.variable;\n        let name = variable.name;\n        let references = this._references.get(name);\n        if (references) {\n            let index = references.indexOf(reference);\n            if (index !== -1) {\n                references.splice(index, 1);\n            }\n        }\n        variable._removeReference(reference);\n        if (\n            variable._references.size === 0 &&\n            (\n                variable.type === 'ImplicitGlobal' ||\n                variable.type === 'BuiltIn'\n            )\n        ) {\n            removeVariable(variable);\n        }\n\n        let programScope = this._getProgramScope();\n        if (programScope) {\n            programScope._programReferences.delete(reference.node);\n        }\n    }\n\n    _getProgramScope(): ?Scope {\n        let scope = this;\n        while (scope && !scope._isProgramScope) {\n            scope = scope.parentScope;\n        }\n        return scope;\n    }\n\n    getVariables(): Variable[] {\n        return [].concat(...toArray(this._variables.values()));\n    }\n\n    getReferences(): Reference[] {\n        return [].concat(...toArray(this._references.values()));\n    }\n\n    destroy() {\n        let parentScope = this.parentScope;\n        if (parentScope) {\n            let scopeIndex = parentScope.childScopes.indexOf(this);\n            if (scopeIndex !== -1) {\n                parentScope.childScopes.splice(scopeIndex, 1);\n            }\n        }\n        this.getReferences().forEach(this._removeReference, this);\n    }\n}\n\nfunction removeVariableIfRequired(variable: Variable) {\n    if (variable._references.size === 0 && variable._definitions.size === 0) {\n        let variables = variable.scope._variables.get(variable.name);\n        if (variables) {\n            let index = variables.indexOf(variable);\n\n            if (index !== -1) {\n                variables.splice(index, 1);\n            }\n\n            if (variables.length === 0) {\n                variable.scope._variables.delete(variable.name);\n            }\n        }\n    }\n}\n\nfunction removeVariable(variable: Variable) {\n    let scope = variable.scope;\n    let variables = scope._variables.get(variable.name);\n\n    if (variables) {\n        let index = variables.indexOf(variable);\n        if (index !== -1) {\n            variables.splice(index, 1);\n            if (variables.length === 0) {\n                scope._variables.delete(variable.name);\n            }\n            for (let reference of variable._references) {\n                reference.scope._assignReference(reference, variable.name);\n            }\n        }\n    }\n}\n\nexport type ReferenceInfo = {\n    node: Node,\n    name: string,\n    read: boolean,\n    write: boolean,\n    type?: string\n};\n\nexport type DefinitionInfo = {\n    node: Node,\n    name: string,\n    type: string\n};\n\nexport type ScopeInfo = {\n    node: Node,\n    parentScope: ?Scope,\n    isProgramScope?: boolean,\n    isFunctionScope?: boolean,\n    isClassScope?: boolean,\n    isArrowFunctionScope?: boolean\n};\n"]}