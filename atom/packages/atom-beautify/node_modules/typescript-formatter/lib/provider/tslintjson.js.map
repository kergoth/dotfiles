{"version":3,"file":"tslintjson.js","sourceRoot":"","sources":["tslintjson.ts"],"names":[],"mappings":";;AAEA,2BAA6B;AAC7B,uBAAyB;AAGzB,kCAAwD;AAyBxD,+BAAsC,QAAgB,EAAE,IAAa,EAAE,cAAqC;IAExG,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/F,IAAI,cAA6B,CAAC;IAClC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtD,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC;IACrC,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,cAAc,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,IAAI,aAAa,CAAC,CAAC;IAClF,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QAClB,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,UAAQ,cAAc,aAAQ,QAAU,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,MAAM,GAAmB,iBAAS,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACjF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;YACtC,cAAc,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAC9C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;YAC3C,cAAc,CAAC,mBAAmB,GAAG,KAAK,CAAC;QAC/C,CAAC;IACL,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YACpC,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,KAAK,KAAK,cAAc,CAAC,CAAC,CAAC;gBAC3B,cAAc,CAAC,+CAA+C,GAAG,IAAI,CAAC;YAC1E,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC;gBAChC,QAAQ;YACZ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,gBAAgB,CAAC,CAAC,CAAC;gBACpC,cAAc,CAAC,wCAAwC,GAAG,IAAI,CAAC;YACnE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,iBAAiB,CAAC,CAAC,CAAC;gBACrC,cAAc,CAAC,8BAA8B,GAAG,IAAI,CAAC;gBACrD,cAAc,CAAC,wCAAwC,GAAG,IAAI,CAAC;YACnE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC;gBAChC,QAAQ;YACZ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,gBAAgB,CAAC,CAAC,CAAC;gBACpC,cAAc,CAAC,6BAA6B,GAAG,IAAI,CAAC;YACxD,CAAC;QACL,CAAC;IACL,CAAC;IAED,MAAM,CAAC,cAAc,CAAC;AAC1B,CAAC;AAjDD,sDAiDC;AAED,qBAA4B,QAAgB,EAAE,aAAqB,EAAE,IAAa,EAAE,eAAsC;IAEtH,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/F,IAAI,cAA6B,CAAC;IAClC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtD,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC;IACrC,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,cAAc,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,IAAI,aAAa,CAAC,CAAC;IAClF,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QAClB,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAED,IAAI,MAAM,GAAmB,iBAAS,CAAC,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACjF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAED,IAAI,iBAAiB,GAAG,yCAAyC,EAAE,CAAC;IACpE,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;QACtD,iBAAiB,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACtD,CAAC;IAED,EAAE,CAAC,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,CAAC,CAAC;QAC7C,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,aAAa,CAAC;AACzB,CAAC;AA5BD,kCA4BC;AAED;IAEI,MAAM,CAAC;QACH,wBAAwB,EAAE,KAAK;KAClC,CAAC;AACN,CAAC","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName, parseJSON } from \"../utils\";\n\ninterface TslintSettings {\n    rules: {\n        indent: {\n            0: boolean;\n            1: string;\n        };\n        \"no-consecutive-blank-lines\": boolean,\n        whitespace: {\n            0: boolean;\n            1: string;\n            2: string;\n            3: string;\n            4: string;\n            5: string;\n            [key: string]: any;\n        };\n    };\n}\n\nexport interface AdditionalFormatSettings {\n    $noConsecutiveBlankLines: boolean;\n}\n\nexport function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): ts.FormatCodeSettings {\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName: string | null;\n    if (opts.tslintFile && path.isAbsolute(opts.tslintFile)) {\n        configFileName = opts.tslintFile;\n    } else {\n        configFileName = getConfigFileName(baseDir, opts.tslintFile || \"tslint.json\");\n    }\n    if (!configFileName) {\n        return formatSettings;\n    }\n\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: TslintSettings = parseJSON(fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.rules) {\n        return formatSettings;\n    }\n    if (config.rules.indent && config.rules.indent[0]) {\n        if (config.rules.indent[1] === \"spaces\") {\n            formatSettings.convertTabsToSpaces = true;\n        } else if (config.rules.indent[1] === \"tabs\") {\n            formatSettings.convertTabsToSpaces = false;\n        }\n    }\n    if (config.rules.whitespace && config.rules.whitespace[0]) {\n        for (let p in config.rules.whitespace) {\n            let value = config.rules.whitespace[p];\n            if (value === \"check-branch\") {\n                formatSettings.insertSpaceAfterKeywordsInControlFlowStatements = true;\n            } else if (value === \"check-decl\") {\n                // none?\n            } else if (value === \"check-operator\") {\n                formatSettings.insertSpaceBeforeAndAfterBinaryOperators = true;\n            } else if (value === \"check-separator\") {\n                formatSettings.insertSpaceAfterCommaDelimiter = true;\n                formatSettings.insertSpaceAfterSemicolonInForStatements = true;\n            } else if (value === \"check-type\") {\n                // none?\n            } else if (value === \"check-typecast\") {\n                formatSettings.insertSpaceAfterTypeAssertion = true;\n            }\n        }\n    }\n\n    return formatSettings;\n}\n\nexport function postProcess(fileName: string, formattedCode: string, opts: Options, _formatSettings: ts.FormatCodeSettings): string {\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName: string | null;\n    if (opts.tslintFile && path.isAbsolute(opts.tslintFile)) {\n        configFileName = opts.tslintFile;\n    } else {\n        configFileName = getConfigFileName(baseDir, opts.tslintFile || \"tslint.json\");\n    }\n    if (!configFileName) {\n        return formattedCode;\n    }\n\n    let config: TslintSettings = parseJSON(fs.readFileSync(configFileName, \"utf-8\"));\n    if (!config.rules) {\n        return formattedCode;\n    }\n\n    let additionalOptions = createDefaultAdditionalFormatCodeSettings();\n    if (config.rules[\"no-consecutive-blank-lines\"] === true) {\n        additionalOptions.$noConsecutiveBlankLines = true;\n    }\n\n    if (additionalOptions.$noConsecutiveBlankLines) {\n        formattedCode = formattedCode.replace(/\\n+^$/mg, \"\\n\");\n    }\n\n    return formattedCode;\n}\n\nfunction createDefaultAdditionalFormatCodeSettings(): AdditionalFormatSettings {\n\n    return {\n        $noConsecutiveBlankLines: false,\n    };\n}\n"]}