// Generated by CoffeeScript 1.9.3
(function() {
  var StringHelpers, _;

  _ = require('underscore');

  module.exports = StringHelpers = (function() {
    function StringHelpers() {}


    /*
      Trims leading and trailing spaces.  Also optionally trims internal excess spaces
     */

    StringHelpers.trim = function(str, options) {
      if (options == null) {
        options = {};
      }
      options = _.defaults(options, {
        all: false
      });
      str = str.replace(/^\s+|\s+$/g, "");
      if (options.all) {
        str = str.replace(/\s+/g, ' ');
      }
      return str;
    };


    /*
      Adds elipsis to string, if neccessary, for maximum string length not
      to exceed maxLength
     */

    StringHelpers.elipsize = function(str, maxLength) {
      if ((maxLength == null) || str.length <= maxLength) {
        return str;
      }
      return str.slice(0, maxLength - 3) + '...';
    };


    /*
      Returns true if the string is all whitespace characters
     */

    StringHelpers.isEmpty = function(str) {
      if (this.weaklyEqual(str, "")) {
        return true;
      }
    };


    /*
      Returns true if string starts with any of otherStrings.  
      otherStrings = one or array to compare to
     */

    StringHelpers.startsWith = function(str, otherStrings) {
      return this._withOneOrArray(otherStrings, function(otherStr) {
        if (str.slice(0, otherStr.length) === otherStr) {
          return true;
        }
      });
    };


    /*
      Returns true if string ends with any of otherStrings.  
      otherStrings = one or array to compare to
     */

    StringHelpers.endsWith = function(str, otherStrings) {
      return this._withOneOrArray(otherStrings, function(otherStr) {
        if (!((otherStr != null ? otherStr.length : void 0) > 0)) {
          return true;
        }
        if (str.slice(-1 * otherStr.length) === otherStr) {
          return true;
        }
      });
    };


    /*
      Returns true if string contains any of otherStrings.  
      otherStrings = one or array to compare to
     */

    StringHelpers.has = function(str, otherStrings) {
      return this._withOneOrArray(otherStrings, function(otherStr) {
        if (str.indexOf(otherStr) !== -1) {
          return true;
        }
      });
    };


    /*
      Returns the weak value of the string -- all lowercase, plus trimmed
      and with excess inner whitespace ignored, locale ignored by default. 
      
      The weakly... functions below use this method on both strings being
      compared to return positive match of mismatched case, etc.
     */

    StringHelpers.weakValue = function(str, options) {
      if (options == null) {
        options = {};
      }
      _.defaults(options, {
        ignoreCase: true,
        useLocale: false,
        trim: true
      });
      if (options.trim) {
        str = this.trim(str, {
          all: true
        });
      }
      if (options.ignoreCase) {
        if (options.useLocale) {
          return str = str.toLocaleLowerCase();
        } else {
          return str = str.toLowerCase();
        }
      }
    };


    /*
      Returns true if the first string weakly equals any of the otherStrings. 
      see weakValue() comments
     */

    StringHelpers.weaklyEqual = function(str, otherStrings, options) {
      if (options == null) {
        options = {};
      }
      return this._withOneOrArray(otherStrings, (function(_this) {
        return function(otherStr) {
          if (_this.weakValue(str, options) === _this.weakValue(otherStr, options)) {
            return true;
          }
        };
      })(this));
    };


    /*
      Returns -1, 0 or 1 like javascript localeCompare.  Comppares the weak values.  
      see weakValue() comments
     */

    StringHelpers.weaklyCompare = function(str, otherStrings, options) {
      if (options == null) {
        options = {};
      }
      return this._withOneOrArray(otherStrings, (function(_this) {
        return function(otherStr) {
          if (_this.weakValue(str, options).localeCompare(_this.weakValue(otherStr, options))) {
            return true;
          }
        };
      })(this));
    };


    /*
      Returns true if the first string weakly contains any of the otherStrings. 
      see weakValue() comments
     */

    StringHelpers.weaklyHas = function(str, otherStrings) {
      return this._withOneOrArray(otherStrings, (function(_this) {
        return function(otherStr) {
          if (_this.weakValue(str).indexOf(_this.weakValue(otherStr)) !== -1) {
            return true;
          }
        };
      })(this));
    };


    /*
      Returns true if the first string weakly starts with any of the otherStrings. 
      see weakValue() comments
     */

    StringHelpers.weaklyStartsWith = function(str, otherStrings) {
      return this._withOneOrArray(otherStrings, (function(_this) {
        return function(otherStr) {
          if (_this.startsWith(_this.weakValue(str), _this.weakValue(otherStr))) {
            return true;
          }
        };
      })(this));
    };


    /*
      Returns true if the first string weakly ends with any of the otherStrings. 
      see weakValue() comments
     */

    StringHelpers.weaklyEndsWith = function(str, otherStrings) {
      return this._withOneOrArray(otherStrings, (function(_this) {
        return function(otherStr) {
          if (_this.endsWith(_this.weakValue(str), _this.weakValue(otherStr))) {
            return true;
          }
        };
      })(this));
    };

    StringHelpers._withOneOrArray = function(strOrArray, fn) {
      var array, i, len, str, truth;
      array = _.isArray(strOrArray) ? strOrArray : [strOrArray];
      truth = false;
      for (i = 0, len = array.length; i < len; i++) {
        str = array[i];
        if (fn(str) === true) {
          truth = true;
          break;
        }
      }
      return truth;
    };

    return StringHelpers;

  })();

}).call(this);
