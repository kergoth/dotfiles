// Generated by CoffeeScript 1.10.0
(function() {
  var ChildProcess, Fs, GitLogUtils, Path, _;

  ChildProcess = require("child_process");

  Path = require("path");

  Fs = require("fs");

  _ = require('underscore');

  module.exports = GitLogUtils = (function() {
    function GitLogUtils() {}


    /*
      returns an array of javascript objects representing the commits that effected the requested file
      with line stats, that looks like this:
        [{
          "id": "1c41d8f647f7ad30749edcd0a554bd94e301c651",
          "authorName": "Bee Wilkerson",
          "relativeDate": "6 days ago",
          "authorDate": 1450881433,
          "message": "docs all work again after refactoring to bumble-build",
          "body": "",
          "hash": "1c41d8f",
          "linesAdded": 2,
          "linesDeleted": 2
        }, {
          ...
        }]
     */

    GitLogUtils.getCommitHistory = function(fileName) {
      var lastCommitObj, logItems, rawLog;
      logItems = [];
      lastCommitObj = null;
      rawLog = this._fetchFileHistory(fileName);
      return this._parseGitLogOutput(rawLog);
    };

    GitLogUtils._fetchFileHistory = function(fileName) {
      var cmd, directory, flags, format, fstats;
      format = ("{\"id\": \"%H\", \"authorName\": \"%an\", \"relativeDate\": \"%cr\", \"authorDate\": %at, " + " \"message\": \"%s\", \"body\": \"%b\", \"hash\": \"%h\"}").replace(/\"/g, "#/dquotes/");
      flags = " --pretty=\"format:" + format + "\" --topo-order --date=local --numstat";
      fstats = Fs.statSync(fileName);
      if (fstats.isDirectory()) {
        directory = fileName;
        fileName = "";
      } else {
        directory = Path.dirname(fileName);
      }
      fileName = Path.normalize(this._escapeForCli(fileName));
      cmd = "git log" + flags + " " + fileName;
      if (process.env.DEBUG === '1') {
        console.log('$ ' + cmd);
      }
      return ChildProcess.execSync(cmd, {
        stdio: 'pipe',
        cwd: directory
      }).toString();
    };

    GitLogUtils._parseGitLogOutput = function(output) {
      var i, lastCommitObj, lastCommitObject, len, line, logItems, logLines, matches;
      lastCommitObject = null;
      logItems = [];
      logLines = output.split("\n");
      for (i = 0, len = logLines.length; i < len; i++) {
        line = logLines[i];
        if (line[0] === '{' && line[line.length - 1] === '}') {
          lastCommitObj = this._parseCommitObj(line);
          if (lastCommitObj) {
            logItems.push(lastCommitObj);
          }
        } else if (line[0] === '{') {
          lastCommitObj = line;
        } else if (_.isString(lastCommitObj)) {
          lastCommitObj += line;
          if (line[line.length - 1] === '}') {
            lastCommitObj = this._parseCommitObj(lastCommitObj);
            if (lastCommitObj) {
              logItems.push(lastCommitObj);
            }
          }
        } else if ((lastCommitObj != null) && (matches = line.match(/^(\d+)\s*(\d+).*/))) {
          lastCommitObj.linesAdded = (lastCommitObj.linesAdded || 0) + Number.parseInt(matches[1]);
          lastCommitObj.linesDeleted = (lastCommitObj.linesDeleted || 0) + Number.parseInt(matches[2]);
        }
      }
      return logItems;
    };

    GitLogUtils._parseCommitObj = function(line) {
      var encLine, error;
      encLine = line.replace(/\t/g, '  ').replace(/\"/g, "'").replace(/(\n|\n\r)/g, '<br>').replace(/\r/g, '<br>').replace(/\#\/dquotes\//g, '"');
      try {
        return JSON.parse(encLine);
      } catch (error) {
        console.warn("failed to parse JSON " + encLine);
        return null;
      }
    };


    /*
      See nodejs Path.normalize().  This method extends Path.normalize() to add:
      - escape of space characters
     */

    GitLogUtils._escapeForCli = function(filePath) {
      var escapePrefix;
      escapePrefix = process.platform === 'win32' ? '^' : '\\';
      return filePath.replace(/([\s\(\)\-])/g, escapePrefix + '$1');
    };

    return GitLogUtils;

  })();

}).call(this);
