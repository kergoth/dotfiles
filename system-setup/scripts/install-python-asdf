#!/bin/sh
# shellcheck disable=SC2039

set -e

version_sort() {
    if [ -e /usr/bin/python3 ]; then
        /usr/bin/python3 -c 'import distutils.version,sys; versions=sys.stdin.readlines(); sversions=sorted(distutils.version.LooseVersion(v.rstrip()) for v in versions); print("\n".join(str(v) for v in sversions))'
    elif command -v gsort; then
        gsort -V
    else
        sort -V
    fi
}

# Ensure we can run llvm-profdata on FreeBSD
for llvmdir in /usr/local/llvm*/bin; do
    if [ -d "$llvmdir" ]; then
        PATH="$PATH:$llvmdir"
    fi
done

export PYTHONNOUSERSITE=1
export CFLAGS="${CFLAGS--O2}"
export LDFLAGS

no_lto=0
no_pgo=0

case "$OSTYPE" in
    darwin*)
        if command -v brew >/dev/null 2>&1; then
            eval "$(brew environment --shell=auto | grep -vw PATH)"
            CFLAGS="$CFLAGS -I$(brew --prefix sqlite)/include -I$(brew --prefix openssl)/include -I$(xcrun --show-sdk-path)/usr/include"
            LDFLAGS="$LDFLAGS -L$(brew --prefix sqlite)/lib -L$(brew --prefix openssl)/lib"
            # The python 3 build chokes due to a lack of llvm-ar at the moment
            no_lto=1
        fi
        # Silence spammy warnings on clang builds, as mentioned in the python
        # developer documentation.
        export CPPFLAGS="-Wno-unused-value -Wno-empty-body -Qunused-arguments \
                         -Wno-parentheses-equality -Wno-nullability-completeness"
        ;;
    *)
        if [ -e /etc/arch-release ]; then
            CFLAGS="$CFLAGS -I/usr/include/openssl-1.0"
            LDFLAGS="$LDFLAGS -L/usr/lib/openssl-1.0"
        fi
        ;;
esac
 
if [ -z "$CONFIGURE_OPTS" ] && [ -z "$PYTHON_CONFIGURE_OPTS" ]; then
    export PYTHON_CONFIGURE_OPTS="\
        --enable-shared \
        --with-system-expat \
        --with-system-zlib \
        --enable-loadable-sqlite-extensions \
    "
    if [ "$OSTYPE" = linux-gnu ]; then
        case "$(uname -r)" in
            *-Microsoft)
                # WSL. test_ssl keeps hanging indefinitely
                no_pgo=1
                ;;
        esac
    elif [ "$(uname -s)" = FreeBSD ]; then
        no_pgo=1
        no_lto=1
    fi
    if [ $no_pgo -eq 0 ]; then
        PYTHON_CONFIGURE_OPTS="$PYTHON_CONFIGURE_OPTS --enable-optimizations"
    fi
    if [ $no_lto -eq 0 ]; then
        PYTHON_CONFIGURE_OPTS="$PYTHON_CONFIGURE_OPTS --with-lto"
    fi
fi

# shellcheck source=./install-asdf
. "$(dirname "$0")/install-asdf"

unset PYENV_ROOT

if [ -e "$ASDF_DIR/plugins/python" ]; then
    asdf plugin-update python
else
    asdf plugin-list-all | grep '^python ' | sed -e 's/\*//' | while read -r name url; do asdf plugin-add "$name" "$url"; done
fi

PY3_VERSION="$(asdf list-all python | grep -E '^3\.[0-9]*(.[0-9]*)?$' | version_sort | tail -n 1)"
if [ ! -e "$ASDF_DIR/installs/python/$PY3_VERSION" ]; then
    asdf install python "$PY3_VERSION"
fi
asdf global python "$PY3_VERSION"

PY2_VERSION="$(asdf list-all python | grep -E '^2\.[0-9]*(.[0-9]*)?$' | version_sort | tail -n 1)"
if [ ! -e "$ASDF_DIR/installs/python/$PY2_VERSION" ]; then
    asdf install python "$PY2_VERSION"
fi

asdf global python "$PY2_VERSION" "$PY3_VERSION"
