#!/bin/sh

usage () {
    cat >&2 <<END
Usage: ${0##*/} [OPTIONS] GROUP_NAME [COMMAND [COMMAND..]

Creates a new session for the specified group.

Options:
  -l  List existing groups rather than creating a session
END
    # shellcheck disable=SC2046
    if [ $(list_groups | wc -l) -gt 0 ]; then
        echo >&2
        echo >&2 "Existing groups:"
        list_groups | sed -e 's/^/  /' >&2
    fi
    exit 2
}

list_groups () {
    tmux ls -F '#{?session_grouped,#{session_group},}' 2>/dev/null \
        | sort -u
}

modulo () {
    bc <<END
scale=0
$1 % $2
END
}

# Ensure we get unicode/256color
tmux() {
    if [ -e ~/.config/tmux/config ]; then
        set -- -f ~/.config/tmux/config "$@"
    fi
    command tmux -u2 "$@"
}


while getopts lh opt; do
    case "$opt" in
        l)
            list_groups
            exit 0
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
fi

group="$1"
shift


if list_groups | grep -Fx "$group"; then
    existing=1
else
    existing=0
fi

session="$(tmux new-session -d -t "$group" -P | cut -d: -f1)" || exit $?
if [ $# -gt 0 ] && [ $existing -eq 0 ]; then
    for i in $(seq 1 $#); do
        cmd="$(eval echo "\$$i")"
        if [ "$(modulo "$i" 2)" -eq 0 ]; then
            tmux split-window -h -t "$session" "$cmd"
        else
            tmux split-window -v -t "$session" "$cmd"
        fi
    done
    tmux kill-pane -t "$session:1.1"
fi
exec tmux attach-session -t "$session"
