[ui]
username = Christopher Larson <kergoth@gmail.com>
ignore = ~/.hgignore
commitsubrepos = False

[web]
cacerts = /etc/ssl/certs/ca-certificates.crt

[merge-tools]
vimdiff.executable = vim
vimdiff.args = -f -d -c "wincmd J" "$output" "$local" "$base" "$other"

[extensions]
bookmarks =
color =
crecord = ~/.hgext/crecord/crecord
extdiff =
fetch =
gpg =
graphlog =
histedit = ~/.hgext/histedit/hg_histedit.py
mq =
pager =
parentrevspec =
patchbomb =
pbranch = ~/.hgext/pbranch/hgext/pbranch.py
progress =
prompt = ~/.hgext/prompt/prompt.py
purge =
rebase =
record =
schemes =
shelve = ~/.hgext/shelve/hgshelve.py
transplant =

[mq]
secret = True

[progress]
delay = 1.0

[schemes]
bbs = ssh://hg@bitbucket.org/
bbsk = ssh://hg@bitbucket.org/kergoth/
bbk = https://bitbucket.org/kergoth/
gh = git://github.com/
ghs = git+ssh://git@github.com/

[auth]
bb.prefix = https://bitbucket.org/
bb.username = kergoth

[diff]
git = True
unified = 5

[email]
method = smtp
from = Christopher Larson <kergoth@gmail.com>

[smtp]
host = smtp.gmail.com
port = 587
username = kergoth@gmail.com
tls = True

[bookmarks]
track.current = True

[defaults]
rebase = --keepbranches
addremove = --similarity 100

[alias]
# Nudge: just push the current branch.
nudge = push --branch .

# Some useful little aliases.
st = status -SC

# Graph log
lg = glog --template='\033[0;33m{rev}\033[0m {desc|firstline|strip} \033[0;35m{branches}\033[0m \033[0;33m{tags}\033[0m\n\033[1;30m({date|age} by {author|person})\033[0m\n\n' --pager=on

# Show a single changeset
show = log --color=always --pager=on -pr

# Show mq status
qstatus = status --rev -2:.

# Short log
slog = log --template '{rev}:{node|short} {desc|firstline}\n' --pager=on

# Edit the current repo's hgrc file.
erc = !$EDITOR `$HG root`/.hg/hgrc

# Simple bug/todo tracking
# Idea from Justin: http://gist.github.com/464871
# Install t first: http://bitbucket.org/sjl/t/
bug = !t.py --task-dir="`$HG root`" --list=BUGS $@
todo = !t.py --task-dir="`$HG root`" --list=TODO $@

# Easily add ignore patterns to .hgignore and commit.
ignore = ![ -n "$@" ] && echo '$@' >> `$HG root`/.hgignore && \
          $HG commit `$HG root`/.hgignore -Am 'Add "$@" to .hgignore.'

# Ack for non-ignored files
ack = !$HG locate "set:not ignored()" | xargs ack $@
grep-wdir = !$HG locate "set:not ignored()" | xargs grep $@

# Run hg commands on all subrepos at once.
subs = !"$HG" debugsub | sed -n 's/^path //p; s/ /\ /g' | xargs          -I SUB $HG -R "`$HG root`/SUB" $@
psubs = !"$HG" debugsub | sed -n 's/^path //p; s/ /\ /g' | parallel -j10 -I SUB $HG -R "`$HG root`/SUB" $@

# Run shell commands on all subrepos at once.
subscmd = !"$HG" debugsub | sed -n 's/^path //p; s/ /\ /g' | xargs          -I SUB sh -c "cd \"`$HG root`/SUB\" && $@"
psubscmd = !"$HG" debugsub | sed -n 's/^path //p; s/ /\ /g' | parallel -j10 -I SUB sh -c "cd \"`$HG root`/SUB\" && $@"

# Run a command on a subrepo:
#
#     hg sub SUBREPO_REGEX ...command and arguments...
#
# The SUBREPO_REGEX should be a regex that will let grep match one and only one of
# the subrepos in .hgsub.  For example:
#
#     $ cat .hgsub
#     bundled/foo = ...
#     bundled/bar = ...
#
#     $ hg sub fo root
#     .../bundled/foo
#     $ hg sub ar status -m
#     M lol.py
sub = !grep = "`$HG root`/.hgsub" | cut -d' ' -f1 | grep "$1" | tr -d '\n ' | xargs -0 -I SUB $HG -R SUB $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20

update-git-subs = subscmd 'test -e .git && git fetch && git checkout remotes/origin/master'
update-hg-subs = subscmd 'test -e .hg && hg pull && hg update tip'
update-subs = !"$HG" update-hg-subs; "$HG" update-git-subs

# Local settings
%include ~/.hgrc_local
