#!/usr/bin/env python3
# TODO: Also handle UDF
# TODO: Also handle El Torito boot images

import argparse
import os
import pathlib
import re
import subprocess
import tempfile
import xml.etree.ElementTree as etree

from typing import List

joliet_line = re.compile(r'Joliet.*found')
makehybrid_arg_map = [
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/volumeSetIdentifier', 'iso-volume-name'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/volumeSetIdentifier', 'joliet-volume-name'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/volumeIdentifier', 'iso-volume-name'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/volumeIdentifier', 'joliet-volume-name'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/systemIdentifier', 'system-id'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/publisherIdentifier', 'publisher'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/dataPreparerIdentifier', 'preparer'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/copyrightFileIdentifier', 'copyright-file'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/abstractFileIdentifier', 'abstract-file'],
    ['image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/bibliographyFileIdentifier', 'bibliography-file'],
    ['image/fileSystems/fileSystem[@TYPE="HFS"]/masterDirectoryBlock/volumeName', 'hfs-volume-name'],
]


def main():
    args = parse_args()
    infoargs = []
    if args.offset is not None:
        infoargs.append('-N')
        infoargs.append(args.offset)
    infoargs.append('-i')
    infoargs.append(str(args.infile))

    info_output: str = subprocess.check_output(['isoinfo'] + infoargs + ['-d']).decode('utf-8')
    args.has_joliet = 'NO Joliet present' not in info_output
    if args.has_joliet:
        infoargs.append('-J')
    infocmd = ['isoinfo-x'] + infoargs

    with tempfile.TemporaryDirectory() as tmpdir:
        tmppath = pathlib.Path(tmpdir)

        filespath = tmppath / args.volume_name
        os.makedirs(filespath)

        if args.has_hfs:
            extract_image_file(args.infile, filespath)
            hfsfiles = list(filespath.iterdir())

            subprocess.check_call(infocmd, cwd=filespath)
            allfiles = list(filespath.iterdir())
            winfiles = set(allfiles) - set(hfsfiles)
            if not winfiles:
                raise SystemExit('Error: no iso/joliet files found?')

            create_iso(args, filespath, winfiles=winfiles, hfsfiles=hfsfiles)
        else:
            subprocess.check_call(infocmd, cwd=filespath)
            create_iso(args, filespath)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--offset')
    parser.add_argument('infile')
    parser.add_argument('outfile')
    args = parser.parse_args()
    args.infile = pathlib.Path(args.infile).resolve()
    args.outfile = pathlib.Path(args.outfile).resolve()

    isolyzed: bytes = subprocess.check_output(['isolyzer', args.infile])

    tree = args.tree = etree.fromstring(isolyzed)
    args.xpath_args = map_xpath_to_cmdline(tree)
    args.volume_name = xml_get_volume_name(tree)
    if args.volume_name is None:
        args.volume_name = args.infile.stem

    if not args.offset:
        offset_element = tree.find('image/tests/sizeDifferenceSectors')
        if offset_element is not None and offset_element.text is not None:
            offset = offset_element.text
            if offset.startswith('-'):
                offset = offset[1:]
            offset = offset.split('.', 1)[0]
            args.offset = str(int(offset) + 152)
    args.has_hfs = bool(tree.find('image/fileSystems/fileSystem[@TYPE="HFS"]'))

    return args


def map_xpath_to_cmdline(tree):
    seen = set()
    xpath_args = []
    for xpath, arg in makehybrid_arg_map:
        if arg in seen:
            continue
        seen.add(arg)
        element = tree.find(xpath)
        if element is not None and element.text is not None and element.text != 'NOT_SET':
            xpath_args.append('-' + arg)
            xpath_args.append(element.text)
    return xpath_args


def xml_get_volume_name(tree) -> str:
    volume_id = tree.find('image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/volumeIdentifier')
    if volume_id is not None and volume_id.text is not None:
        volume_name = volume_id.text
    else:
        volume_id = tree.find('image/fileSystems/fileSystem[@TYPE="ISO 9660"]/primaryVolumeDescriptor/volumeSetIdentifier')
        if volume_id is not None and volume_id.text is not None:
            volume_name = volume_id.text
    return volume_name


def extract_image_file(filename: pathlib.Path, destdir: pathlib.Path):
    with tempfile.TemporaryDirectory() as mntpath:
        subprocess.check_call(['hdiutil', 'attach', '-readonly', '-noautoopen', '-mountpoint', mntpath, filename])
        try:
            subprocess.check_call(['cp', '-a', mntpath + '/.', destdir])
        finally:
            subprocess.check_call(['hdiutil', 'detach', mntpath])


def create_iso(args, filespath, winfiles=None, hfsfiles=None):
    cmd = generate_iso_cmdline(args, filespath, winfiles, hfsfiles)
    try:
        os.unlink(args.outfile)
    except FileNotFoundError:
        pass
    subprocess.check_call(cmd)


def generate_iso_cmdline(args, filespath, winfiles=None, hfsfiles=None) -> List[str]:
    cmd = ['hdiutil', 'makehybrid', '-iso', '-default-volume-name', args.volume_name, '-o', args.outfile]
    if args.has_joliet:
        cmd.append('-joliet')

    if args.has_hfs:
        cmd.append('-hfs')
        if hfsfiles:
            hfsfiles = [str(f.relative_to(filespath)) for f in hfsfiles]
            hfsglobpat = '{' + ','.join(hfsfiles) + '}'
            hfsglob = filespath / hfsglobpat
            cmd.append('-only-hfs')
            cmd.append(hfsglob)

    if winfiles:
        winfiles = [str(f.relative_to(filespath)) for f in winfiles]
        winglobpat = '{' + ','.join(winfiles) + '}'
        winglob = filespath / winglobpat
        cmd.append('-only-iso')
        cmd.append(winglob)
        if args.has_joliet:
            cmd.append('-only-joliet')
            cmd.append(winglob)

    cmd.extend(args.xpath_args)
    cmd.append(filespath)
    return cmd


if __name__ == '__main__':
    main()
