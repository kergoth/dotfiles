#! /usr/bin/env python3
#
# Copyright (C) 2021 Richard Purdie
# Copyright (C) 2022 Christopher Larson
#
# SPDX-License-Identifier: GPL-2.0-only
#

import argparse
import io
import os
import sys
import warnings
warnings.simplefilter("default")

def setup_command_import(command, relpath='../lib'):
    """Set up sys.path based on the location of a binary in the PATH """
    PATH = os.getenv('PATH').split(':')
    cmd_paths = [os.path.join(path, relpath)
                for path in PATH if os.path.exists(os.path.join(path, command))]
    if not cmd_paths:
        raise ImportError("Unable to locate bb, please ensure PATH is set correctly.")

    sys.path[0:0] = cmd_paths

setup_command_import('bitbake')
try:
    import bb
except ImportError as exc:
    sys.exit("Unable to import 'bb' python package: %s" % exc)

import bb.tinfoil

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Bitbake Query Variable")
    parser.add_argument("variables", help="variable name to query", nargs='+', metavar='VARIABLE')
    parser.add_argument("-r", "--recipe", help="Recipe name to query", default=None, required=False)
    parser.add_argument('-u', '--unexpand', help='Do not expand the value (implies --value)', action="store_true")
    parser.add_argument('-f', '--flag', help='Specify a variable flag to query (implies --value)', default=None)
    parser.add_argument('--value', '-b', '--bare', help='Only report the value, no history and no variable name', action="store_true")
    args = parser.parse_args()

    if args.flag or args.unexpand:
        args.value = True

    with bb.tinfoil.Tinfoil(tracking=True) as tinfoil:
        if args.recipe:
            tinfoil.prepare(quiet=2)
            d = tinfoil.parse_recipe(args.recipe)
        else:
            tinfoil.prepare(quiet=2, config_only=True)
            d = tinfoil.config_data

        for variable in args.variables:
            if args.flag:
                print(str(d.getVarFlag(variable, args.flag, expand=(not args.unexpand))))
            elif args.value:
                print(str(d.getVar(variable, expand=(not args.unexpand))))
            else:
                if d.getVarFlag(variable, 'python', False) and d.getVarFlag(variable, "func", False):
                    print("# line: {0}, file: {1}".format(
                        d.getVarFlag(variable, "lineno", False),
                        d.getVarFlag(variable, "filename", False)))

                    varExpanded = d.expand(variable)
                    value = d.getVar(variable, expand=(not args.unexpand)).rstrip('\n')
                    flags = ['python']
                    if d.getVarFlag(variable, 'fakeroot', False):
                        flags.append('fakeroot')
                    print("%s %s() {\n%s\n}" % (' '.join(sorted(flags)), varExpanded, value))
                else:
                    bb.data.emit_var(variable, d=d, all=True)
