#!/usr/bin/env bash

set -euo pipefail

LOCKFILE="/tmp/deck-backup.lock"

usage() {
    echo "Usage: deck-backup [-h] [-c] [-f] [-s backup1,backup2,...]"
    echo "Options:"
    echo "  -h    Display this help message."
    echo "  -c    Check the last backup times."
    echo "  -f    Force an immediate backup."
    echo "  -s    Specify individual backup scripts to run (comma-separated list)."
}

check_backup_times() {
    echo "Checking last backup times..."
    for script in "$BACKUP_DIR"/*; do
        if [ -x "$script" ]; then
            backup_name=$(basename "$script" .sh)
            last_backup_file="$STATE_DIR/$backup_name.last_backup"
            if [ -f "$last_backup_file" ]; then
                last_backup_time=$(stat -c %Y "$last_backup_file")
                echo "Last backup time for $backup_name: $(date -d @$last_backup_time)"
            else
                echo "No backup record found for $backup_name"
            fi
        fi
    done
}

run_backup_script() {
    local script=$1
    local force=$2
    local backup_name
    backup_name=$(basename "$script" .sh)
    local frequency_var="BACKUP_FREQUENCY_$backup_name"
    local frequency=${!frequency_var:-${BACKUP_FREQUENCY:-7}}

    if [ "$force" = true ] || backup_needed "$backup_name" "$frequency"; then
        echo "Running backup script: $backup_name"
        if "$script"; then
            touch "$STATE_DIR/$backup_name.last_backup"
        else
            echo "Error: Backup script $backup_name failed" >&2
            exit 1
        fi
    else
        echo "Backup not needed for $backup_name (frequency: $frequency days)"
    fi
}

backup_needed() {
    local backup_name=$1
    local frequency=$2
    local last_backup_file="$STATE_DIR/$backup_name.last_backup"
    local last_backup_time
    local current_time
    local frequency_seconds

    if [ ! -f "$last_backup_file" ]; then
        return 0
    fi

    last_backup_time=$(stat -c %Y "$last_backup_file")
    current_time=$(date +%s)
    frequency_seconds=$((frequency * 86400))
    if ((current_time - last_backup_time >= frequency_seconds)); then
        return 0
    else
        return 1
    fi
}

process_backup_scripts() {
    local force=$1
    local specified_backups=$2
    local backup_array=()

    if [[ -n "$specified_backups" ]]; then
        IFS=',' read -r -a backup_array <<<"$specified_backups"
    elif [[ -n "${ENABLED_BACKUPS+set}" ]]; then
        return 0
    elif [[ -d "$BACKUP_DIR" ]]; then
        backup_array=()
        while IFS= read -r file; do
            backup_array+=("$file")
        done < <(find "$BACKUP_DIR" -maxdepth 1 -type f -perm /001 | sed 's#^.*/##')
    else
        echo "Warning: No backup scripts configured or found in $BACKUP_DIR" >&2
        return 0
    fi

    for backup_name in "${backup_array[@]}"; do
        script="$BACKUP_DIR/$backup_name"
        if [ ! -f "$script" ]; then
            script="$BACKUP_DIR/$backup_name.sh"
        fi
        backup_name="${backup_name%.sh}"
        if [ -x "$script" ]; then
            run_backup_script "$script" "$force"
        else
            echo "Error: Invalid backup name specified or script not executable: $backup_name" >&2
            exit 1
        fi
    done
}

CONFIG_DIR=~/.config/deck-backup
CONFIG_FILE="$CONFIG_DIR/config"
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi
if [[ -d "$CONFIG_DIR/config.d" ]]; then
    for file in "$CONFIG_DIR/config.d"/*; do
        source "$file" 2>/dev/null || :
    done
fi

if [[ -n "${DISABLED_BACKUPS:-}" ]]; then
    echo "Warning: DISABLED_BACKUPS is set, no backups will run" >&2
    exit 0
fi

STATE_DIR=~/.local/state/deck-backup
mkdir -p "$STATE_DIR"

BACKUP_DIR=~/.config/deck-backup/backup.d

force_backup=false
specified_backups=
if [[ -n "${ENABLED_BACKUPS+set}" ]]; then
    specified_backups="$ENABLED_BACKUPS"
fi

while getopts "cfs:h" opt; do
    case "$opt" in
    c)
        check_backup_times
        exit 0
        ;;
    f)
        force_backup=true
        ;;
    s)
        specified_backups=$OPTARG
        ;;
    \? | h)
        usage
        exit 0
        ;;
    esac
done
shift $((OPTIND - 1))

exec 200>"$LOCKFILE"
if ! flock -n 200; then
    echo "Another instance of the script is running. Exiting." >&2
    exit 1
fi

cleanup() {
    flock -u 200
    rm -f "$LOCKFILE"
}
trap cleanup EXIT INT TERM

process_backup_scripts "$force_backup" "$specified_backups"
