[core]
	excludesfile = ~/.config/git/exclude
	attributesfile = ~/.config/git/attributes
	whitespace = cr-at-eol

[init]
	templatedir = ~/.config/git/template

[user]
	name = Christopher Larson
	email = kergoth@gmail.com

[alias]
	ci = commit
	co = checkout
	au = add -u
	st = status -sb
	st-ignored = status -sb --ignored
	br = branch
	id = rev-parse
	ls = ls-files --exclude-standard
	staged = diff --cached

	# Pretty one line log
	lg = log --graph --pretty=format:'%Cred%h%Creset %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --date=short

	# Pretty one line log showing all commits, including dangling ones
	lg-all = !git lg --all $(git dangling)

	# Pretty one line log showing commits in the last hour/day/week/month/etc
	last = "!f(){ since="$1"; shift; git lg --since=\"last $since\" "$@"; }; f"

	# Show dangling commits
	dangling = !git fsck | sed -n 's/^dangling commit //p'

	# Amend the current commit, but don't prompt to edit the commit message
	amend = commit --amend -C HEAD

	# example: git subdo pull
	subdo = submodule foreach git

	# Clean out the ignored files (i.e. to rebuild)
	iclean = clean -fdX

	# Show repo root
	root = rev-parse --show-toplevel

	# Repo local task lists
	bug = !t.py -t $(git root) -l BUGS
	todo = !t.py -t $(git root) -l TODO

	# show list of contributors in descending order by number of commits
	rank = shortlog -sn --no-merges

	# given a string for an author, try to figure out full name and email:
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

	# given any git object, try to show it briefly
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

	# what changed between ORIG_HEAD and current
	lc = log ORIG_HEAD.. --stat --no-merges

	# remove changes to a file from the index
	unstage = reset HEAD --

	# list the largest files in the repository
	ls-large-files = !git ls-tree -rl HEAD | sort -rnk 4 | head

	# Diffstat of uncached changes, ignoring whitespace
	ds = !git --no-pager diff --stat -M -w

	# Create a new, entirely empty branch with no commits
	empty-branch = "!sh -e -c 'git symbolic-ref HEAD \"refs/heads/$1\"; rm -f $(git rev-parse --git-dir)/index; git clean -fdx' \"$@\""

	# Edit the unmerged files
	edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f`"

	# Compare two commits with interdiff (used to compare two commits which implement the same feature, for example)
	intercommit = !sh -c 'git show "$1" > .git/commit1 && git show "$2" > .git/commit2 && interdiff .git/commit[12] | less -FRS' -

	# Show the remote branch which this branch is tracking
	remote-ref = "!sh -c ' \
	    local_ref=$(git symbolic-ref HEAD 2>/dev/null); \
	    local_ref=${local_ref##refs/heads/}; \
	    local_name=${local_ref:-master} \
	    remote=$(git config branch.\"$local_name\".remote || echo origin); \
	    remote_ref=$(git config branch.\"$local_name\".merge || echo $local_name); \
	    remote_name=${remote_ref##refs/heads/}; \
	    echo remotes/$remote/$remote_name'"

	# Show commits that would be pushed from the current branch
	outgoing = !git log $(git remote-ref)..

	# Show commits that would be merged into the current branch
	incoming = !git log ..$(git remote-ref)

	# Run git test-sequence against the commits we'll be pushing
	test-outgoing = !git test-sequence $(git remote-ref).. "$@"

	# For each submodule
	subs = submodule foreach --recursive

	# Update submodules
	update-subs = submodule foreach --recursive "git fetch && git checkout `git remote-ref`"

[interactive]
	singlekey = true

[push]
	default = tracking

[branch]
	autosetuprebase = always

[apply]
	whitespace = fix

[status]
	submodulesummary = true

[diff]
	renames = copy
	mnemonicprefix = true
	ignoreSubmodules = dirty

[merge]
	summary = true
	conflictstyle = diff3
	ff = false

[pack]
	threads = 3

[log]
	decorate = short

[color]
	ui = auto

[color "diff"]
	whitespace = red reverse
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[color "branch"]
	current = yellow bold
	local = green
	remote = red bold

[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red

[notes]
	rewriteRef = refs/notes/*
	rewriteMode = concatenate

[rerere]
	enabled = 1

[help]
	autocorrect = 1

[credential]
	helper = osxkeychain

%include config.d/*
