#!/bin/bash

usage() {
    echo >&2 "${0##*/} [-a] [URL]"
    echo >&2
    echo >&2 "Options:"
    echo >&2 "  -a Include all forks of our parent, not just our children."
    echo >&2 "  -o ORIGIN_REMOTE      Prune branches relative to the specified remote, not origin."
    echo >&2 "  -u UPSTREAM_BRANCHES  Specify the base upstream branches where the changes are merged,"
    echo >&2 "                        defaults to master. Comma-separated."
    echo >&2 "  URL   Github repo URL. If unspecified, the url of the 'origin' git remote is used."
    exit 2
}

process_arguments () {
    all=0
    origin=origin
    upstream_branches=master
    while getopts ao:u:h opt; do
        case "$opt" in
            a)
                all=1
                ;;
            o)
                origin="$OPTARG"
                ;;
            u)
                upstream_branches="$OPTARG"
                ;;
            \? | h)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ $# -gt 1 ]; then
        usage
    elif [ $# -eq 1 ]; then
        url="$1"
        shift
    else
        url="$(git config remote.origin.url)"
        if [ -z "$url" ]; then
            echo >&2 "Error: no url for the origin git remote"
            return 1
        fi
    fi
}

set -eu

process_arguments "$@"
shift $((OPTIND - 1))

if [ $all -eq 1 ]; then
    set -- -a
else
    set --
fi
if [ -n "$url" ]; then
    set -- "$@" "$url"
fi

git fetch origin
github-list-forks "$@" | while read -r remote url; do
    if ! git config "remote.$remote.url" >/dev/null; then
        git remote add "$remote" "$url"
    fi
    git remote set-url "$remote" "$url"
    git prune-remote -L -o "$origin" -u "$upstream_branches" "$remote"
done
