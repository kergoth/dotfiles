#!/usr/bin/env bash

usage () {
    cat >&2 <<END
Usage: git clone-via [OPTIONS] SOURCE [DEST]

   Clone 'through' another local repository, to its upstream.

   This clones from one local repository to another, but without making
   the source the remote of the destination. Instead, the destination uses
   the source repo for its git objects, but gets reconfigured to point
   directly at the source repository's upstream. The main use case is
   setting up local git mirrors / caches.

   -f                   Force the clone, overwriting any existing repo
   -m                   Mirror to a bare repository the way clone --mirror does
                        Note: incompatible with the -t and -h arguments
   -s                   Reference the source repository the way clone -s does
   -b BRANCH            Branch to check out
                        Default value: master
   -r SOURCE_REMOTE     Specify the remote used in the source repository
                        Default value: origin
   -t SOURCE_TAGS_REFS  Specify the refspec for the remote's tags in the source repository
                        Default value: refs/tags/*
   -h SOURCE_HEADS_REFS Specify the refspec for the remote's heads in the source repository
                        Default value if source is a mirror: refs/heads/*
                        Default value otherwise: refs/remotes/<remote>/*
END
    exit 0
}

abspath () {
    _path="$1"
    if [ -n "${_path##/*}" ]; then
        _path="$PWD/$1"
    fi
    echo "$_path"
}

process_arguments () {
    process_options "$@" || usage
    if [ $OPTIND -eq 1 -a $# -eq 0 ]; then
        usage
    fi
    shift $(($OPTIND - 1))

    if [ $# -lt 1 -o $# -gt 2 ]; then
        usage
    fi

    from="$(abspath "$1")"
    shift
    if [ "$(cd "$from" && git config core.bare)" != true ]; then
        from="$(cd "$from" && git rev-parse --show-toplevel)"
    fi

    to=$1
    if [ -z "$to" ]; then
        to="$(basename "$from")"
    fi
    to="$(abspath "$to")"
    if [ $mirror -eq 1 ]; then
        if ! echo "$to"|grep -q '\.git/*$'; then
            to="$to.git"
        fi
    else
        if echo "$to"|grep -q '\.git/*$'; then
            to="$(echo $to|sed -e's,\.git/*$,,')"
        fi
    fi
}

process_options () {
    checkout_branch=
    source_remote=
    source_tags_refs="refs/tags/*"
    shared=0
    mirror=0
    force=0

    while getopts r:t:h:b:msf opt; do
        case "$opt" in
            r)
                source_remote=$OPTARG
                ;;
            m)
                mirror=1
                ;;
            t)
                source_tags_refs=$OPTARG
                ;;
            h)
                source_heads_refs=$OPTARG
                ;;
            s)
                shared=1
                ;;
            b)
                checkout_branch=$OPTARG
                ;;
            f)
                force=1
                ;;
            \?|h)
                return 1
                ;;
       esac
    done
}

extract_source_repo_info () {
    if [ -z "$source_heads_refs" ]; then
        source_mirror=$(GIT_DIR=$source_git_dir git config remote.$source_remote.mirror) || true
        if [ -n "$source_mirror" ]; then
            source_heads_refs="refs/heads/*"
        else
            source_heads_refs="refs/remotes/$source_remote/*"
        fi
    fi

    source_url=$(GIT_DIR=$source_git_dir git config remote.$source_remote.url) || true
    if [ -z "$source_url" ]; then
        echo >&2 "Error: unable to obtain remote url from $source_git_dir"
        exit 1
    fi
    source_refs=$(GIT_DIR=$source_git_dir git config remote.$source_remote.fetch) || true
}

clone () {
    if [ $mirror -eq 1 ]; then
        export GIT_DIR=$to

        heads="$source_heads_refs:refs/heads/*"
    else
        export GIT_DIR=$to/.git
        export GIT_WORK_TREE=$to

        heads="$source_heads_refs:refs/remotes/origin/*"
    fi

    # Initialize the repo
    mkdir -p "$GIT_DIR"
    if [ $mirror -eq 1 ]; then
        git init --bare --shared
    else
        git init
    fi

    if [ -e "$source_git_dir/shallow" ]; then
       cp -f "$source_git_dir/shallow" "$GIT_DIR/shallow"
    fi

    # Use the source repo for objects
    if [ $shared -eq 1 ]; then
        mkdir -p $GIT_DIR/objects/info
        echo "$source_git_dir/objects" > $GIT_DIR/objects/info/alternates
    else
        # Link all the objects over. git fetch doesn't support hard linking the way
        # clone does, so we do so manually here, and rely on git gc to prune the bits
        # we don't end up needing.
        for d in objects/?? objects/{pack,info}; do
            [ "$d" != "objects/??" ] || continue
            [ "$(echo "$source_git_dir/$d"/*)" != "$source_git_dir/$d/*" ] || continue

            mkdir -p "$GIT_DIR/$d"
            ln "$source_git_dir/$d/"* "$GIT_DIR/$d/" 2>/dev/null || cp "$source_git_dir/$d/"* "$GIT_DIR/$d/"
        done
    fi

    # Fetch the refs from the source repo
    git fetch -n $source_git_dir $heads
    git fetch -n $source_git_dir "$source_tags_refs:refs/tags/*"

    # Point back at upstream, and do checkout if appropriate
    git config remote.origin.url "$source_url"
    if [ $mirror -eq 1 ]; then
        git config remote.origin.mirror true
        git config remote.origin.fetch "+refs/*:refs/*"
    else
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        # Attempt to update from upstream, in case the branch to be checked
        # out wasn't available in the local source repo
        git fetch origin || true
        git branch --track $checkout_branch origin/$checkout_branch
        git update-ref HEAD refs/heads/$checkout_branch
        git read-tree $checkout_branch
        git checkout-index -a
    fi
}


set -e

unset GIT_DIR GIT_WORK_TREE

process_arguments "$@"

if [ $force -eq 1 ]; then
    rm -rf "$to"
elif [ -e "$to" ]; then
    echo >&2 "Error: $to already exists, aborting"
    exit 3
fi


source_git_dir=$(cd "$from" && abspath $(git rev-parse --git-dir))

if [ -z "$source_remote" ]; then
    if [ $(GIT_DIR="$source_git_dir" git remote | wc -l) = 1 ]; then
        source_remote="$(GIT_DIR="$source_git_dir" git remote)"
    else
        source_remote=origin
    fi
fi

if [ -z "$checkout_branch" ]; then
    from_branch="$(GIT_DIR="$source_git_dir" git symbolic-ref HEAD 2>/dev/null)"
    if [ "$(GIT_DIR="$source_git_dir" git config "branch.$from_branch.remote")" = "$source_remote" ]; then
        checkout_branch="$(GIT_DIR="$source_git_dir" git config "branch.$from_branch.merge")"
        if [ -z "$checkout_branch" ] && [ -n "$from_branch" ]; then
            checkout_branch="${from_branch#refs/heads/}"
        fi
    fi

    if [ -z "$checkout_branch" ]; then
        checkout_branch=master
    fi
fi

extract_source_repo_info

trap "rm -rf $to" EXIT
clone
trap - EXIT
