#!/bin/sh

usage() {
    echo >&2 "${0##*/} [-r RELATIVETO] PATH [PATH..]"
    exit 2
}

branch_name="$(basename "$(git rev-parse --symbolic-full-name HEAD)")"
if [ -z "$branch_name" ]; then
    echo >&2 "Error: a branch must be checked out"
    exit 1
fi
upstream=
pushremote=
simple=0
while getopts u:p:sh opt; do
    case "$opt" in
        u)
            upstream="$OPTARG"
            ;;
        p)
            pushremote="$OPTARG"
            ;;
        s)
            simple=1
            ;;
        \? | h)
            usage
            ;;
    esac
done
if [ -z "$pushremote" ]; then
    pushremote="$(git config github.user 2>/dev/null)"
    if [ -z "$pushremote" ]; then
        pushremote="${LOGNAME:-$(id -nu)}"
    fi
fi
shift $((OPTIND - 1))

if [ "$simple" -eq 1 ]; then
    upstream=origin/"$branch_name"
    pushremote=origin
fi

existing_remote="$(git config "branch.$branch_name.remote")"
existing_merge="$(git config "branch.$branch_name.merge")"
if [ -n "$upstream" ] || [ -z "$existing_remote" ] || [ -z "$existing_merge" ]; then
    if [ -z "$upstream" ]; then
        upstream=origin/master
    fi
    echo >&2 "Configuring to pull from $upstream"
    git branch -u "$upstream"
fi

echo >&2 "Configuring to push to $pushremote/$branch_name"
if [ "$simple" -eq 1 ]; then
    git config --unset "branch.$branch_name.rebase"
    git config --unset "branch.$branch_name.pushremote"
else
    git config push.default simple
    git config "branch.$branch_name.rebase" true
    git config "branch.$branch_name.pushremote" "$pushremote"
    if ! git remote | grep -qxF "$pushremote"; then
        created_remote=1
        if command -v gh; then
            gh repo fork --remote=false --clone=false
        elif command -v hub >/dev/null 2>&1; then
            hub fork
        fi
        hub fetch kergoth
    else
        create_remote=0
    fi
    git fetch -p "$pushremote" \
        || if [ "$created_remote" -eq 1 ]; then
            git remote rm "$pushremote"
            exit 1
        else
            exit 1
        fi
fi
