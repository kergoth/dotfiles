#!/usr/bin/env bash

set -euo pipefail

usage() {
    cat <<END >&2
${0##*/} [options..] [REPO|URL..]

If no REPO/URLs are specified, the url of the ORIGIN_REMOTE is used by default.

Options:
  -a   Show all forks, including the parents if REPO is a fork
  -h   Show usage
END
    exit 2
}

repo_info() {
    local repo="$1"
    local cache_file
    cache_file="$cache_dir/$(echo "$repo" | tr / _)"
    if ! [ -e "$cache_file" ]; then
        gh api repos/"$repo" >"$cache_file" || return 1
    fi
    cat "$cache_file"
}

repo_forks() {
    local repo="$1"
    local forks
    forks="$(repo_info "$repo" | jq -r .forks)" || return
    if [ "$forks" != "0" ]; then
        _repo_forks "$@"
    fi
}

_repo_forks() {
    local repo="$1"
    local cache_file
    gh api --paginate repos/"$repo"/forks \
        | jq -r '.[] | [.full_name, .forks] | map(tostring) | join("\t")' \
        | while IFS=$'\t' read -r name forks; do
            echo "${2:-}$name"
            if [ "$forks" -gt 0 ]; then
                _repo_forks "$name" "${2:-}  " || continue
            fi
        done
}

cache_dir="$(mktemp -d -t "${0##*/}.XXXXXX")" || exit 1
trap 'rm -rf "$cache_dir"' EXIT INT TERM

all_forks=0
while getopts ah opt; do
    case "$opt" in
        a)
            all_forks=1
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    remote_url="$(git config remote.origin.url)"
    if [ -z "$remote_url" ]; then
        echo >&2 "Error: no url for the origin git remote"
        usage
    else
        set -- "$remote_url"
    fi
fi

for repo; do
    repo="${repo%/}"
    case "$repo" in
        *github.com:*)
            repo="${repo#*github.com:}"
            ;;
        *://github.com/*)
            repo="${repo#*://github.com/}"
            ;;
        *://*)
            echo >&2 "Unrecognized url: $repo"
            exit 1
            ;;
    esac
    repo="${repo%/.git}"
    repo="${repo%.git}"

    if [ $all_forks -eq 1 ]; then
        # Walk up fork parents, recursively
        while true; do
            is_fork="$(repo_info "$repo" | jq -r .fork)" || break
            if [ "$is_fork" != "true" ]; then
                break
            fi
            repo="$(repo_info "$repo" | jq -r .parent.full_name)" || break
        done
    fi
    repo_forks "$repo"
done | awk '!visited[$0]++'
