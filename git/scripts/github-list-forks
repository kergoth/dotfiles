#!/bin/bash

set -euo pipefail

usage() {
    cat <<END >&2
${0##*/} [options..] REPO

Options:
  -a   Show all forks, including the parents if REPO is a fork
  -h   Show usage
END
    exit 2
}

info() {
    if [ "$verbose" -eq 1 ]; then
        echo >&2 "$@"
    fi
}

repo_info() {
    local repo="$1"
    local cache_file
    cache_file="$cache_dir/$(echo "$repo" | tr / _)"
    if ! [ -e "$cache_file" ]; then
        hub api repos/"$repo" >"$cache_file"
    fi
    cat "$cache_file"
}

repo_forks() {
    local repo="$1"
    if [ "$(repo_info "$repo" | jq -r .forks)" != "0" ]; then
        _repo_forks "$@"
    fi
}

_repo_forks() {
    local repo="$1"
    local cache_file
    hub api --paginate repos/"$repo"/forks \
        | jq -r '.[] | [.full_name, .forks] | map(tostring) | join("\t")' \
        | while IFS=$'\t' read -r name forks; do
            echo "${2:-}$name"
            if [ "$forks" -gt 0 ]; then
                _repo_forks "$name" "${2:-}  "
            fi
        done
}

verbose=0
all_forks=0
while getopts avh opt; do
    case "$opt" in
        a)
            all_forks=1
            ;;
        v)
            verbose=1
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
fi

repo="$1"
case "$repo" in
    *://github.com/*)
        repo="${repo#*://github.com/}"
        ;;
    *://*)
        echo >&2 "Unrecognized url: $repo"
        exit 1
        ;;
esac

cache_dir="$(mktemp -d -t "${0##*/}.XXXXXX")" || exit 1
# mkdir -p "$cache_dir"
trap 'rm -rf "$cache_dir"' EXIT INT TERM

if [ $all_forks -eq 1 ]; then
    # Walk up fork parents, recursively
    while true; do
        is_fork="$(repo_info "$repo" | jq -r .fork)"
        if [ "$is_fork" != "true" ]; then
            break
        fi
        repo="$(repo_info "$repo" | jq -r .parent.full_name)"
    done
fi
repo_forks "$repo"
