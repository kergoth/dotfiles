#!/usr/bin/env bash

usage () {
    echo >&2 "${0##*/} [-r REMOTE] [-R] [UPSTREAM_BRANCH..]"
    echo >&2
    echo >&2 "Delete branches which have been fully merged."
    echo >&2
    echo >&2 "Options:"
    echo >&2
    echo >&2 "  UPSTREAM_BRANCH     Specify the base upstream branches where the"
    echo >&2 "                      changes are merged, defaults to origin/master."
    echo >&2 "  -r REMOTE   Prune branches of the specified remote, not local."
    echo >&2 "  -R          Prune the branches in the repo repo, not just the tracking branches."
    echo >&2 "  -l          List refs rather than removing them."
    echo >&2 "  -c CORRESPONDING_REMOTE  Delete branches which have been merged to the branch of"
    echo >&2 "                           the same name in CORRESPONDING_REMOTE, not to UPSTREAM_BRANCH."
    echo >&2 "  -n          Dry-run"
    exit 2
}

ref_prefix=refs/heads
prune_remote_repo=0
list_refs=0
dry_run=0
corresponding=
while getopts r:Rlc:nh opt; do
    case "$opt" in
        r)
            ref_prefix="refs/remotes/$OPTARG"
            ;;
        R)
            prune_remote_repo=1
            ;;
        l)
            list_refs=1
            ;;
        n)
            dry_run=1
            ;;
        c)
            corresponding="$OPTARG"
            ;;
        \?|h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ -n "$corresponding" ]; then
    if [ $# -gt 0 ]; then
        echo >&2 "Error: -c and UPSTREAM_BRANCH arguments conflict"
        exit 1
    fi
    set -- $corresponding
elif [ $# -gt 0 ]; then
    set -- $(echo "$@" | tr ' ' '\n' | sed 's/^/--merged=/')
else
    set -- --merged=origin/master
fi

if [ "$ref_prefix" != "refs/heads" ] && [ $prune_remote_repo -eq 1 ]; then
    # Exclude the default branch for the remote
    default_branch_for_remote="$(git ls-remote --symref "${ref_prefix#refs/remotes/}" | sed -n -e 's#^ref: refs/heads/\([^	]*\)	HEAD$#\1#p')"
else
    default_branch_for_remote=
fi

to_delete=
to_push=
git for-each-ref "$@" --format='%(refname)' "$ref_prefix" | (
    while read -r ref; do
        ref="${ref#$ref_prefix/}"

        if [ -n "$corresponding" ]; then
            upstream_ref="$corresponding/$ref"
            if ! git rev-parse --quiet --verify "refs/remotes/$upstream_ref" >/dev/null; then
                # No corresponding branch upstream
                continue
            else
                resolved="$(git rev-parse "$ref_prefix/$ref")"
                if [ "$(git merge-base "refs/remotes/$upstream_ref" "$ref_prefix/$ref")" != "$resolved" ]; then
                    # Not merged into corresponding branch upstream
                    continue
                fi
            fi
        fi

        case "$ref_prefix" in
            refs/heads)
                remote="$(git config "branch.$ref.pushremote" 2>/dev/null || git config "branch.$ref.remote")"
                to_delete="$ref $to_delete"
                if [ $prune_remote_repo -eq 1 ] && git rev-parse --quiet --verify "refs/remotes/$remote/$ref" >/dev/null; then
                    to_push=":$ref $to_push"
                fi
                ;;
            refs/remotes/*)
                remote="${ref_prefix#refs/remotes/}"
                if [ $prune_remote_repo -eq 1 ]; then
                    if [ "$ref" != "$default_branch_for_remote" ]; then
                        to_push=":$ref $to_push"
                    fi
                else
                    to_delete="${ref_prefix#refs/remotes/}/$ref $to_delete"
                fi
                ;;
        esac
    done

    if [ $dry_run -eq 1 ]; then
        git () {
            echo git "$@"
        }
    fi

    if [ $list_refs -eq 1 ]; then
        for ref in $to_delete; do
            echo "$ref"
        done
    else
        if [ -n "$to_delete" ]; then
            case "$ref_prefix" in
                refs/heads)
                    git branch -D $to_delete
                    ;;
                refs/remotes/*)
                    git branch -r -d $to_delete
                    ;;
            esac
        fi

        if [ -n "$to_push" ]; then
            git push "$remote" $to_push
        fi
    fi
)
