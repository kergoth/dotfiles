#!/usr/bin/env python3
# git-assembler: update git branches using high-level instructions
# Copyright(c) 2019-2020 by wave++ "Yuri D'Elia" <wavexx@thregr.org>
# Distributed under the GNU GPLv3+ license, WITHOUT ANY WARRANTY.
import subprocess as sp
import argparse
import os, sys
import shutil
import json
from enum import Enum, IntEnum

import logging
from logging import error, warning, info, debug

APP_DSC = "update git branches using high-level instructions"
APP_SIG = "git-assembler"
APP_VER = "1.2"


def repo_toplevel():
    try:
        line = sp.check_output(['git', 'rev-parse', '--show-toplevel'])
    except sp.CalledProcessError as e:
        return None
    return line.decode(sys.getfilesystemencoding()).rstrip()


def repo_git_dir():
    try:
        line = sp.check_output(['git', 'rev-parse', '--git-dir'])
    except sp.CalledProcessError as e:
        return None
    return line.decode(sys.getfilesystemencoding()).rstrip()


def repo_common_dir():
    try:
        line = sp.check_output(['git', 'rev-parse', '--git-common-dir'])
    except sp.CalledProcessError as e:
        return None
    return line.decode(sys.getfilesystemencoding()).rstrip()


def assembly_path(toplevel_dir, common_dir):
    path = os.path.join(common_dir, 'assembly')
    if os.path.exists(path):
        return path
    path = os.path.join(toplevel_dir, '.gitassembly')
    if os.path.exists(path):
        return path
    return None


def parse_error(path, line, msg):
    error('{}:{}: {}'.format(path, line, msg))

def os_error(e):
    error(str(e))


def parse_assembly(path):
    try:
        fd = open(path)
    except OSError as e:
        os_error(e)
        return None

    nodes = {}
    settings = {'target': []}

    for n, line in enumerate(fd, 1):
        # strip comments
        line = line.split('#', 1)[0]

        # basic tokenization
        tokens = line.split()
        if len(tokens) == 0:
            continue

        cmd = tokens[0]
        if cmd == 'target':
            if len(tokens) < 2:
                parse_error(path, n, 'invalid assembly line')
                return None
            if len(settings['target']):
                parse_error(path, n, 'default target/s redefined')
                return None
            settings['target'] = tokens[1:]

        elif cmd in {'base', 'rebase', 'stage', 'merge'}:
            if len(tokens) < 3:
                parse_error(path, n, 'invalid assembly line')
                return None
            branch, args = tokens[1], tokens[2:]

            node = nodes.get(branch)
            if node is None:
                node = empty_node(branch)
                nodes[branch] = node

            if cmd in {'base', 'rebase', 'stage'}:
                # define the branch base
                if node['base']:
                    parse_error(path, n, 'branch base/type cannot be redefined')
                    return None
                if len(args) != 1:
                    parse_error(path, n, 'invalid base for branch {}'.format(branch))
                    return None
                node['base'] = args[0]
                if node['base'] == node['name']:
                    parse_error(path, n, 'refusing to {} {} onto itself'.format(cmd, node['base']))
                    return None
                if cmd == 'stage':
                    node['type'] = BranchType.STAGE
                elif cmd == 'rebase':
                    node['type'] = BranchType.REBASE
                else:
                    node['type'] = BranchType.BASE
            elif cmd == 'merge':
                # add dependencies
                for arg in args:
                    if arg == node['name']:
                        parse_error(path, n, 'refusing merge of {} into itself'.format(arg, branch))
                        return None
                    elif arg in node['merge']:
                        parse_error(path, n, 'duplicate merge of {} into {}'.format(arg, branch))
                        return None
                node['merge'].extend(args)

        else:
            parse_error(path, n, 'unknown command: {}'.format(cmd))
            return None

    return nodes, settings


class BranchType(Enum):
    BRANCH = 0 # regular branch (no base)
    BASE   = 1 # optional bootstrapping
    REBASE = 2 # rebase when needed
    STAGE  = 3 # bootstrap on any change

def leaf_node(node):
    return len(node['deps']) == 0

def empty_node(name):
    return {'name': name,
            'base': None,
            'type': BranchType.BRANCH,
            'merge': [],
            'deps': [],
            'state': {'dirty': False,
                      'used': False,
                      'missing': None}}


def assembly_graph(nodes, targets=None):
    # convert all nodes
    for branch in list(nodes):
        node = nodes[branch]
        deps = []

        # convert base
        if node['base'] is not None:
            base_name = node['base']
            base_node = nodes.get(base_name)
            if base_node is None:
                base_node = empty_node(base_name)
                nodes[base_name] = base_node
            node['base'] = base_node
            deps.append(base_node)

        # direct merge dependencies
        merge = []
        for branch_name in node.get('merge'):
            branch_node = nodes.get(branch_name)
            if branch_node is None:
                branch_node = empty_node(branch_name)
                nodes[branch_name] = branch_node
            if branch_node is node['base'] and node['type'] != BranchType.BASE:
                # we allow base switching for experimentation, but
                # notify the user about no-ops and discard the rule
                warning('discarding useless merge of branch {} into {}'.format(
                    color_node(branch_node), color_node(node)))
            else:
                merge.append(branch_node)
        node['merge'] = merge
        deps.extend(merge)

        # all dependencies (in order)
        node['deps'] = deps

    # filter targets
    if targets is None:
        left = set(nodes)
    else:
        left = set(targets)
        branches = set(nodes)
        for branch in targets:
            if branch not in branches:
                error('unknown branch {}'.format(branch))
                return None

    # find roots
    connected = set()
    for branch in left:
        for dep in nodes[branch]['deps']:
            connected.add(dep['name'])
    roots = set(left) - connected
    if len(roots) == 0 and len(left) != 0:
        # graph has no root nodes, instead of exiting immediately pick a
        # random node to produce a more useful message later
        roots.add(next(iter(left)))

    # check for cycles
    stack = [(root, set()) for root in roots]
    while len(stack):
        branch, seen = stack.pop()
        if branch in seen:
            error('dependency cycle detected for branch {}'.format(branch))
            return None
        seen.add(branch)
        for dep in nodes[branch]['deps']:
            if not leaf_node(dep):
                stack.append((dep['name'], set(seen)))

    # return root nodes
    return [nodes[name] for name in sorted(roots)]


COLOR_MODE = None

class Ansi:
    BOLD  = "\033[;1m"
    GREEN = "\033[0;32m"
    RED   = "\033[1;31m"
    RESET = "\033[0;0m"

def color_node(node):
    name = node['name']
    if COLOR_MODE == False or \
       (COLOR_MODE is None and not sys.stdout.isatty()):
        return name
    elif node['state']['missing']:
        return Ansi.RED + name + Ansi.RESET
    elif node['state']['dirty']:
        return Ansi.BOLD + name + Ansi.RESET
    elif node['state']['used']:
        return Ansi.GREEN + name + Ansi.RESET
    else:
        return name

def dump_graph(graph, state, root=None, depth=0):
    roots = list(reversed(graph))
    if root is None:
        root = roots

    seen = set()
    while len(roots):
        node = roots.pop()
        if node['name'] in seen:
            continue
        seen.add(node['name'])
        prefix = '  ' * depth

        # calculate an extended suffix
        suffix = ''
        base_node = node['base']
        while base_node is not None:
            if node['type'] == BranchType.STAGE:
                suffix += ' <= '
            elif node['type'] == BranchType.REBASE:
                suffix += ' <- '
            else:
                suffix += ' .. '
            base_name = color_node(base_node)
            if base_node['base'] is not None and len(base_node['merge']) != 0:
                # split the branch into a fake root
                suffix += '[' + base_name + ']'
                root.append(base_node)
                break
            suffix += base_name
            base_node = base_node['base']

        if node['name'] == state['current_branch']:
            prefix += '>'
        if node['name'] == state.get('start_branch'):
            suffix = '*' + suffix
        node_name = color_node(node)
        print(prefix + node_name + suffix)

        merge = node['merge']
        if len(merge):
            dump_graph(merge, state, root, depth + 1)


def topo_sort(graph, seen=None):
    if seen is None:
        seen = set()
    nodes = []
    for node in graph:
        name = node['name']
        if name in seen:
            continue
        seen.add(name)
        nodes.extend(topo_sort(node['deps'], seen))
        nodes.append(node)
    return nodes


def mark_tree_dirty(node, graph):
    dirty = False
    for root in graph:
        if root is node or mark_tree_dirty(node, root['deps']):
            root['state']['dirty'] = dirty = True
    return dirty


def needs_merge(dst, branch):
    proc = sp.run(['git', 'merge-base', '--is-ancestor', branch, dst],
                  stderr=sp.DEVNULL)
    if proc.returncode not in [0, 1]:
        return None
    return proc.returncode != 0


def fork_point(dst, base):
    proc = sp.run(['git', 'merge-base', '--fork-point', base, dst],
                  stdout=sp.PIPE, stderr=sp.DEVNULL)
    fork_point = proc.stdout.decode('ascii').rstrip()
    if proc.returncode != 0 or len(fork_point) == 0:
        return None
    return fork_point


def branch_tip(name):
    proc = sp.run(['git', 'rev-parse', '--verify', name],
                  stdout=sp.PIPE, stderr=sp.DEVNULL)
    tip = proc.stdout.decode('ascii').rstrip()
    if proc.returncode != 0 or len(tip) == 0:
        return None
    return tip


def needs_rebase(dst, base):
    tip = branch_tip(base)
    if tip is None:
        return None
    fp = fork_point(dst, base)
    if fp is None:
        return None
    return tip != fp


def branch_exists(name):
    proc = sp.run(['git', 'rev-parse', '--verify', name],
                  stdout=sp.DEVNULL, stderr=sp.DEVNULL)
    return proc.returncode == 0


def node_missing(node):
    if node['state']['missing'] is None:
        node['state']['missing'] = not branch_exists(node['name'])

def nodes_missing(nodes):
    for node in nodes:
        node_missing(node)


def update_state(ordered_nodes, graph, force):
    for node in ordered_nodes:
        if leaf_node(node):
            continue

        if node['base'] is not None:
            if node['type'] == BranchType.BASE:
                # base should be created only when missing
                nodes_missing([node, node['base']])
                if node['state']['missing']:
                    node['base']['state']['used'] = True
                    mark_tree_dirty(node, graph)
            else:
                # always check if rebase is needed
                if force or node['state']['missing'] or node['base']['state']['missing']:
                    dirty = None
                else:
                    dirty = needs_rebase(node['name'], node['base']['name'])
                if dirty is not False:
                    if dirty is None:
                        nodes_missing([node, node['base']])
                    node['base']['state']['used'] = True
                    mark_tree_dirty(node, graph)

        # merge dependencies
        for dep in node['merge']:
            if node['state']['missing'] or dep['state']['missing']:
                ret = None
            elif node['base'] is dep and node['type'] != BranchType.BASE:
                # merge is known in advance to be a no-op
                ret = False
            else:
                ret = needs_merge(node['name'], dep['name'])
            if ret is not False:
                if ret is None:
                    nodes_missing([node, dep])
                mark_tree_dirty(node, graph)
                dep['state']['used'] = True
                if node['type'] == BranchType.STAGE:
                    node['base']['state']['used'] = True


def check_missing(nodes, create):
    state = True
    for node in nodes:
        if node['state']['missing']:
            if node['base'] is None:
                # find the branch requiring node
                state = False
                for ref in nodes:
                    if node in ref['deps']:
                        break
                else:
                    ref = None
                if ref is None:
                    error('branch {} is required but does not exist'.format(color_node(node)))
                else:
                    error('branch {} is required by {} but does not exist'.format(color_node(node), color_node(ref)))
            elif node['type'] != BranchType.STAGE and not create:
                # prevent creation unless explicitly allowed
                state = False
                error('branch {} needs creation from {}'.format(color_node(node), color_node(node['base'])))
    return state


def check_dirty(nodes):
    for node in nodes:
        if node['state']['dirty']:
            return True
    return False


def current_branch():
    proc = sp.run(['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
                  stdout=sp.PIPE, stderr=sp.DEVNULL)
    name = proc.stdout.decode('ascii').rstrip()
    if proc.returncode != 0 or len(name) == 0:
        return None
    return name


def read_state(git_dir):
    state_path = os.path.join(git_dir, 'as-cache', 'state')
    if os.path.exists(state_path):
        return json.load(open(state_path))
    else:
        return {}


def save_state(git_dir, state):
    cache_dir = os.path.join(git_dir, 'as-cache')
    dir_exists = os.path.exists(cache_dir)
    if not state:
        if dir_exists:
            shutil.rmtree(cache_dir)
        return
    if not dir_exists:
        os.mkdir(cache_dir)
    state_path = os.path.join(cache_dir, 'state')
    json.dump(state, open(state_path, "w"))


def switch_to_branch(name, *git_flags):
    proc = sp.run(['git', 'checkout', '-q', '--no-guess', *git_flags, name],
                  stdout=sp.DEVNULL, stderr=sp.PIPE)
    stderr = proc.stderr.decode(sys.getdefaultencoding()).rstrip()
    return proc.returncode, stderr


def update_node(node, state, dry_run):
    if not node['state']['dirty']:
        return True

    # logging helper
    def log(prio, msg):
        state['last_msg'] = msg
        if dry_run and prio >= logging.INFO:
            prio = logging.WARNING
        logging.log(prio, msg)

    if node['type'] == BranchType.STAGE:
        # switch to base branch, erase target (if exists)
        if node['base']['name'] != state['last_branch']:
            log(logging.DEBUG, 'switching to branch {}'.format(color_node(node['base'])))
            if not dry_run:
                # checkout in detached state since this is only done in
                # preparation for the subsequent branch creation
                ret, err = switch_to_branch(node['base']['name'], '--detach')
                if ret != 0:
                    state['last_err'] = err
                    return False
            state['last_branch'] = node['name']
        if not node['state']['missing']:
            log(logging.INFO, 'erasing existing branch {}'.format(color_node(node)))
            if not dry_run:
                proc = sp.run(['git', 'branch', '-q', '-D', node['name']])
                if proc.returncode != 0:
                    return False
        exists = False
    elif node['name'] == state['last_branch']:
        exists = True
    else:
        # switch to target
        log(logging.DEBUG, 'switching to branch {}'.format(color_node(node)))
        if dry_run:
            exists = branch_exists(node['name'])
        else:
            # check existence optimistically to avoid extra queries
            ret, err = switch_to_branch(node['name'])
            exists = (ret == 0)
            if ret != 0:
                # slow path to exclude checkout errors
                if branch_exists(node['name']):
                    state['last_err'] = err
                    return False

    if not exists:
        # branch is missing, bootstrap
        log(logging.INFO, 'creating branch {} from {}'.format(color_node(node), color_node(node['base'])))
        if not dry_run:
            proc = sp.run(['git', 'checkout', '-q', '--no-guess', '-b', node['name'], node['base']['name']])
            if proc.returncode != 0:
                return False
        state['last_branch'] = node['name']
    else:
        state['last_branch'] = node['name']

        # rebase when required
        if node['type'] == BranchType.REBASE and node['base'] is not None:
            if node['base']['state']['dirty']:
                dirty = True
            else:
                dirty = needs_rebase(node['name'], node['base']['name'])
            if dirty is not False:
                log(logging.INFO, 'rebasing {} onto {}'.format(color_node(node), color_node(node['base'])))
                if not dry_run:
                    proc = sp.run(['git', 'rebase', '-q', '--fork-point',
                                   node['base']['name'], node['name']])
                    if proc.returncode != 0:
                        return False


    # merge dependencies
    for dep in node['merge']:
        if not exists and node['base'] is dep:
            # branch has been bootstrapped and dependency is the base
            # itself, skip the merge (it's useless)
            continue
        elif not exists or dep['state']['dirty']:
            # branch is new or dependency has been updated earlier on,
            # there's no need to peform another check: we need to merge
            pass
        elif not needs_merge(node['name'], dep['name']):
            continue

        log(logging.INFO, 'merging {} into {}'.format(color_node(dep), color_node(node)))
        if not dry_run:
            proc = sp.run(['git', 'merge', '-q', '--rerere-autoupdate', '--no-edit', dep['name']])
            if proc.returncode == 1:
                # directly attempt to autocommit in case rerere was successful
                proc = sp.run(['git', 'commit', '-q', '--no-edit'], stderr=sp.DEVNULL)
                if proc.returncode == 0:
                    log(logging.WARN, 'automatic merge resolution successful')
            if proc.returncode != 0:
                return False

    return True


def check_pending(git_dir):
    if os.path.exists(os.path.join(git_dir, 'MERGE_HEAD')):
        error('merge in progress, refusing to continue')
        return True
    elif os.path.exists(os.path.join(git_dir, 'rebase-apply')):
        error('rebase in progress, refusing to continue')
        return True
    elif os.path.exists(os.path.join(git_dir, 'BISECT_LOG')):
        error('bisect in progress, refusing to continue')
        return True
    return False


class ExitStatus(IntEnum):
    SUCCESS = 0
    ERROR   = 1
    CONFIG  = 2

def main(argv):
    ap = argparse.ArgumentParser(description=APP_DSC)
    ap.add_argument('-f', '--config', metavar='PATH',
                    help='explicit path to assembly file')
    ap.add_argument('-c', '--create', action='store_true',
                    help='create required branches')
    ap.add_argument('--recreate', action='store_true',
                    help='recreate base branches (implies -c, destructive!)')
    ap.add_argument('-n', '--dry-run', action='store_true',
                    help='show what assemble would do')
    ap.add_argument('-a', '--assemble', action='store_true',
                    help='assemble the target branches')
    ap.add_argument('-v', '--verbose', default=0, action='count',
                    help='increase verbosity')
    ap.add_argument('--version', action='version', version=APP_VER)
    ap.add_argument('--color', choices=['auto', 'always', 'never'],
                    default='auto', help='set terminal coloring mode')
    g = ap.add_mutually_exclusive_group()
    g.add_argument('target', nargs='*', default=[],
                   help='branch to update/display')
    g.add_argument('--all', action='store_true',
                   help='override assembly: act on all branches')
    args = ap.parse_args(argv[1:])

    # logging
    levels = (logging.WARNING, logging.INFO, logging.DEBUG)
    logging.basicConfig(level=levels[min(len(levels)-1, args.verbose)],
                        format='{}: %(message)s'.format(APP_SIG))

    # color mode
    global COLOR_MODE
    if args.color == 'always':
        COLOR_MODE = True
    elif args.color == 'never':
        COLOR_MODE = False

    # repository paths
    toplevel_dir = repo_toplevel()
    if toplevel_dir is None:
        return ExitStatus.CONFIG
    git_dir = repo_git_dir()
    common_dir = repo_common_dir()
    if common_dir is None:
        # support for old versions of git
        common_dir = git_dir

    if args.config:
        path = args.config
    else:
        path = assembly_path(toplevel_dir, common_dir)
        if path is None:
            error('no assembly instructions')
            return ExitStatus.CONFIG
        path = os.path.relpath(path)
        debug('reading instructions from {}'.format(path))

    # build the list of nodes and resulting graph
    res = parse_assembly(path)
    if res is None:
        return ExitStatus.CONFIG
    nodes, settings = res

    # construct the list of targets
    if len(args.target):
        targets = set(args.target)
    else:
        targets = set(settings['target'])
    if args.all or len(targets) == 0:
        targets = None

    # construct the resulting graph
    graph = assembly_graph(nodes, targets)
    if graph is None:
        return ExitStatus.CONFIG
    if len(graph) == 0:
        error('nothing to do')
        return ExitStatus.CONFIG

    # recreate works just by switching all BASE branches to STAGE
    if args.recreate:
        args.create = True
        for node in nodes.values():
            if node['type'] == BranchType.BASE:
                node['type'] = BranchType.STAGE

    # update and check current state
    ordered_nodes = topo_sort(graph)
    update_state(ordered_nodes, graph, args.recreate)
    state = read_state(git_dir)
    state['current_branch'] = current_branch()
    state['last_branch'] = state['current_branch']

    # exit early when possible
    if not args.assemble and not args.dry_run:
        dump_graph(graph, state)
        return ExitStatus.SUCCESS
    if not check_missing(ordered_nodes, args.create):
        return ExitStatus.ERROR
    if not check_dirty(ordered_nodes):
        if state.get('start_branch', state['last_branch']) == state['last_branch']:
            info('already up to date')
            if not args.dry_run:
                save_state(git_dir, None)
            return ExitStatus.SUCCESS

    # refuse to continue if any stateful git operation is pending
    if check_pending(git_dir):
        return ExitStatus.ERROR

    # perform the required operations
    if 'start_branch' in state:
        start_set = False
    else:
        state['start_branch'] = state['last_branch']
        start_set = True

    for node in ordered_nodes:
        state['last_msg'] = None
        state['last_err'] = None
        if not update_node(node, state, args.dry_run):
            if not args.dry_run:
                save_state(git_dir, state)
            if state['last_msg'] is not None:
                error('error while ' + state['last_msg'])
            if state['last_err'] is not None:
                print(state['last_err'], file=sys.stderr)
            branch_name = state['last_branch']
            if branch_name in nodes:
                branch_name = color_node(nodes[branch_name])
            warning('stopping at branch {}, fix/commit then re-run {}'.format(branch_name, APP_SIG))
            return ExitStatus.ERROR

    # restore initial branch
    if state['start_branch'] != state['last_branch']:
        # the starting branch might no longer exist or be referenced in the nodes
        branch_name = state['start_branch']
        if branch_name in nodes:
            branch_name = color_node(nodes[branch_name])
        if not args.dry_run and not branch_exists(state['start_branch']):
            logging.log(logging.WARNING, 'cannot restore initial branch {}'.format(branch_name))
        else:
            level = logging.INFO if start_set else logging.WARNING
            logging.log(level, 'restoring initial branch {}'.format(branch_name))
            if not args.dry_run:
                ret, err = switch_to_branch(state['start_branch'])
                if ret != 0:
                    error('error restoring initial branch {}'.format(branch_name))
                    print(err, file=sys.stderr)
                    return ExitStatus.ERROR

    if not args.dry_run:
        save_state(git_dir, None)
    return ExitStatus.SUCCESS


if __name__ == '__main__':
    exit(main(sys.argv))
