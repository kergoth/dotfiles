#!/usr/bin/env python3
# Like go get but without the need for go.

import sys
import os
import subprocess
from urllib.parse import urlparse


def eprint(msg):
    sys.stderr.write(msg + '\n')


VERSION = "git-get %VERSION%"
USAGE = """usage: git get [flags] <git-clone-url>

  -v    print version
  -h    print help
"""

if len(sys.argv) == 1:
    eprint(USAGE)
    sys.exit(1)

git_url = sys.argv[1]
base_dir = os.getenv('GIT_PATH')

if git_url == '-v':
    eprint(VERSION)
    sys.exit(0)

if git_url == '-h':
    eprint(USAGE)
    sys.exit(0)

if not base_dir:
    eprint('$GIT_PATH must be set')
    sys.exit(1)

if not os.path.exists(base_dir):
    eprint('$GIT_PATH is set to %s, which does not exist.' % base_dir)
    sys.exit(1)

default_prefix = os.getenv('GIT_GET_DEFAULT_PREFIX')
if not git_url.endswith('.git') and default_prefix:
    git_url = default_prefix + git_url + '.git'
    eprint('Cloning %s' % git_url)

url_for_path_parsing = git_url
if git_url.startswith('git@'):
    url_for_path_parsing = 'https://' + git_url.replace(':', '/')

try:
    parsed_url = urlparse(url_for_path_parsing)
    pathend = os.path.splitext(parsed_url.path)[0].strip('/')
    path = os.path.join(base_dir, parsed_url.hostname, pathend)
except Exception:
    eprint('Could not parse url %s' % git_url)
    sys.exit(1)

if os.path.exists(path):
    eprint('Repository %s was already cloned.' % git_url)
    print(path)
    sys.exit(0)

created_parent_dir = False
parent_dir = os.path.dirname(path)
if not os.path.exists(parent_dir):
    os.makedirs(parent_dir)
    created_parent_dir = True

try:
    subprocess.check_call(['git', 'clone', git_url, path])
except subprocess.CalledProcessError:
    if created_parent_dir:
        os.rmdir(parent_dir)
    sys.exit(1)

print(path)
