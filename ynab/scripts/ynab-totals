#!/bin/sh

usage() {
    cat >&2 <<END
${0##*/} [options] [CSV_FILE]

Options:
  -c CATEGORY Filter output by category
  -l LIMIT    Limit the number of entries shown to LIMIT
  -a          Show totals for each category / all categories
  -i          Show income only
  -e          Show expenses only
  -r          Reverse sort
  -y          Yearly amounts, not monthly averages
END
    exit 2
}

main() {
    reverse_sort=0
    category_totals=0
    category=
    income=0
    expense=0
    yearly=0
    limit=
    while getopts c:aierl:yh opt; do
        case "$opt" in
            c)
                category="$OPTARG"
                ;;
            a)
                category_totals=1
                ;;
            i)
                income=1
                expense=0
                ;;
            e)
                expense=1
                income=0
                ;;
            r)
                reverse_sort=1
                ;;
            l)
                limit="$OPTARG"
                ;;
            y)
                yearly=1
                ;;
            \? | h)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ $# -eq 0 ]; then
        set -- ./*Register.csv
        if ! [ -e "$1" ]; then
            usage
        fi
    fi

    ynab-cleanup "$@" \
        | csvgrep -i -c Category -r '^$' \
        | csvgrep -i -c Payee -m 'Starting Balance' \
        | ynab-adjust-categories \
        | csvsql -v --query "$(sql_query)" \
        | if [ -t 1 ]; then
            csvpycol -c Total 'currency(float(Total) / 100, grouping=True)' \
                | csvaddrow -c 1,Total '"Total"' 'currency(sum(float(r["Total"].replace("$", "").replace(",", "")) for r in rows), grouping=True)' \
                | if command -v csview >/dev/null 2>&1; then
                    csview
                else
                    csvlook -I
                fi
        else
            csvpycol -c Total 'int(float(Total))'
        fi
}

sql_query() {
    (
        if [ $category_totals -eq 1 ]; then
            payee_query=
            group=Category
        else
            payee_query=Payee,
            group=Payee,Category
        fi
        if [ $reverse_sort -eq 1 ]; then
            desc=DESC
        else
            desc=ASC
        fi
        if [ -n "$limit" ]; then
            limit="LIMIT $limit"
        else
            limit=
        fi
        if [ $yearly -eq 1 ]; then
            by_month=
        else
            by_month="/12"
        fi
        if [ $income -eq 1 ]; then
            where='WHERE Inflow > 0'
        elif [ $expense -eq 1 ]; then
            where='WHERE Outflow > 0'
        else
            where=
        fi
        if [ -n "$category" ]; then
            if [ -n "$where" ]; then
                where="$where AND Category LIKE '$category'"
            else
                where="WHERE Category LIKE '$category'"
            fi
        fi

        cat <<END
SELECT $payee_query
       Category,
       Round(Sum(Amount * 100)$by_month) AS Total
FROM   (SELECT $payee_query
               Category,
               CASE
                 WHEN Inflow > 0 THEN Inflow
                 ELSE -Outflow
               end AS Amount
        FROM   stdin
        $where)
GROUP  BY $group
ORDER  BY Total $desc
$limit
END
    )
}

main "$@"
