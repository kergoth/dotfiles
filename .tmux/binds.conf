# use screen-style prefix key
set -g prefix C-a
unbind C-b

# send the prefix to client inside window (ala nested sessions)
bind C-a send-prefix
bind a send-prefix

# toggle last window like screen
bind C-a last-window

# Make ctrl-n and ctrl-p act like n and p
bind C-n next-window
bind C-p previous-window

# Bind | to the same as %
bind | split-window -h

# bind C-w to the same as w
bind C-w choose-window

# bind C-Space to the same as Space
bind C-Space next-layout

# select which session this client should use
bind @ choose-session

# confirm before killing a window, session, server
bind \ confirm kill-session
bind C-\ confirm kill-server

# new session
bind C confirm new-session

# split current window into a new session
#bind C-! confirm -p 'Split window into new session?' "command-prompt \"new -s %%; move-window -t %%:2; kill-window -t %%:1; att -t %%\""

# reload a window whose process has exited
bind C-r respawn-window

# refresh display
bind C-l refresh-client
bind l refresh-client

# toggle remaining on exit for the window (ideally this would be pane-local, though)
bind ^ setw remain-on-exit

# reload our configuration
bind r source-file ~/.tmux.conf

# open a man page in a new window
bind / command-prompt "split-window 'exec man %%'"

# quick view of processes
bind '~' split-window "exec htop"

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
bind -r < resize-pane -L 3
bind -r > resize-pane -R 3
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

# vi-style controls for interactive modes
setw -g mode-keys vi
set -g status-keys vi
