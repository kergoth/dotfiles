#!/bin/bash

if [ -d .svn ]; then
    rev=$(svn info 2>/dev/null|grep ^Revision|cut -d" " -f2)
    if [ $? -ne 0 ]; then
        rev=""
    fi
elif [ -d CVS ]; then
    branch=$(cat CVS/Tag 2>/dev/null | sed -e's,^.,,')
else
    h=$(git-rev-parse HEAD 2>/dev/null)
    if [ $? -eq 0 ]; then
        GIT_DIR="$(git-rev-parse --git-dir)"
        path="$(git-rev-parse --show-cdup)$(git-rev-parse --show-prefix)"
        path="${path%/}"
        # Let's try to hide the git repo information if we're within an ignored path
#        if git-ls-files --error-unmatch -c --exclude-from=$GIT_DIR/info/exclude --exclude-per-directory=.gitignore --directory --full-name $path &>/dev/null || git-ls-files --error-unmatch -o --exclude-from=$GIT_DIR/info/exclude --exclude-per-directory=.gitignore --directory --full-name $path &>/dev/null; then
#            rev=$(git-show-ref -s --abbrev HEAD)
#            rev=$(git-diff-tree -m --quiet --pretty=format:%h $h)
#            branch=$(git-symbolic-ref HEAD 2>/dev/null)
#            if [ $? -ne 0 ]; then
#                branch=""
#            fi
#            reponame=$(git config core.reponame 2>/dev/null)
#        fi
        rev=$(git-diff-tree -m --quiet --pretty=format:%h $h)
        branch=$(git-symbolic-ref HEAD 2>/dev/null)
        if [ $? -ne 0 ]; then
            branch=""
        fi
        reponame=$(git config core.reponame 2>/dev/null)
    fi
fi


if [ -n "$branch" ]; then
    sep1=" "
    sep2="#"
    sep3="!"
    branch="${branch##refs/heads/}"
fi

if [ -n "$rev" ]; then
    rev="$sep3$rev"
    sep1=" "
    sep2="#"
fi

if [ -n "$reponame" ]; then
    sep1=" "
    reponame="$reponame$sep2"
fi

echo "$sep1$reponame$branch$rev"
