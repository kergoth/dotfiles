#!/bin/sh
#
# TODO:
# - Ignore subversion subrepos when manually populating, let hg handle it
# - Enhance handling for hggit repositories
#   - Populate the git objects for hggit (.hg/git) from the git-cache
#   - Run an hg pull from the git repository (possibly the one in git-cache) to
#     ensure the git refs are accessible as bookmarks, as the tags as hg tags.
# - Potentially merge portions of the git and mercurial cache code
# - Implement the cache as a mercurial extension
# - Potentially attempt to support chaining between repositories which are
#   forks of one another

set -e

main () {
    cache_dir=~/.scm-cache
    url="$1"
    cache_url="$(canonical_url "$url")"
    dest="$2"
    if [ -z "$dest" ]; then
        dest="$(basename "$cache_url")"
    fi

    cached_clone "$cache_url" "$dest"
}

prepare_cache () {
    url="$1"
    cache_dest="$2"

    if [ ! -e "$cache_dir/$cache_dest" ]; then
        hg clone -U "$url" "$cache_dir/$cache_dest"
    else
        pushd "$cache_dir/$cache_dest" >/dev/null
        hg pull
        popd >/dev/null
    fi
}

canonical_url () {
    sedscript=$(mktemp)
    echo 's,^bb://,https://bitbucket.org/,;' >>$sedscript
    if [ -e ~/.hgrc ]; then
        sed -n '/^\[schemes\]/{: start; n; /^\[/b done; /^ *$/b start; p; b start}; : done' ~/.hgrc|while read scheme eq url; do echo "s,^$scheme://,$url,;"; done >>$sedscript
    fi
    echo "$1" | sed -f $sedscript
    rm -f $sedscript
}

get_cache_dest () {
    echo $1 | sed 's,^.*://,,; s,[:/@#&?],_,g; s,__*,_,g; s,\.git/*$,,'
}

cached_clone () {
    url="$1"
    dest="$2"
    cache_dest="$(get_cache_dest "$url")"

    prepare_cache "$url" "$cache_dest"

    mkdir -p "$dest"
    pushd "$dest" >/dev/null
    hg init
    hg pull "$cache_dir/$cache_dest"
    cat <<END >.hg/hgrc
[paths]
default = $url
END
    if [ -e "$cache_dir/$cache_dest/.hg/git" ]; then
        cp -PR "$cache_dir/$cache_dest/.hg/git" .hg/
        hg gexport
    fi

    update_subrepos
    update_git_submodules
    hg update
    popd >/dev/null
}

update_subrepos () {
    if hg manifest tip | grep -q '.hgsub'; then
        hg cat -r tip .hgsub 2>/dev/null | while IFS== read dir url; do
            if [ -z "$dir" ]; then
                continue
            fi
            dir=$(echo $dir | sed 's, *$,,')

            if echo "$url" | grep -q '^ *\[git\]'; then
                url=$(echo $url | sed 's,^ *,,; s,^\[git\],,')
                git cached-clone "$url" "$dir"
            else
                url=$(echo $url | sed 's,^\[hg\],,; s,^ *,,')
                cached_clone "$url" "$dir"
            fi
        done
    fi
}

update_git_submodules () {
    if hg manifest tip | grep -q '.gitmodules'; then
        tmpfile=$(mktemp -t hg-cached-clone.XXXXXX)
        hg cat -r tip .gitmodules >>$tmpfile
        for module in $(git config -f $tmpfile --get-regexp 'submodule\.[a-z]+\.path' | cut -d. -f2); do
            submodule_path=$(git config -f $tmpfile --get submodule.$module.path)
            submodule_url=$(git config -f $tmpfile --get submodule.$module.url)
            git cached-clone "$submodule_url" "$submodule_path"
        done
        rm -f "$tmpfile"
    fi
}

main "$@"
