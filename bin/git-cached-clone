#!/bin/sh

usage () {
    cat >&2 <<END
Usage: git cached-clone [OPTIONS] SOURCE [DEST]

   Clone a repository and its submodules via a cache

   Defaults to hard linking when on the same filesystem, and shared/reference
   when across filesystems.

   -f                   Force the clone, overwriting any existing repo
   -s                   Reference the source repository the way clone -s does
   -m                   Mirror to a bare repository the way clone --mirror does
END
    exit 0
}

canonical_url () {
    # Give us the url in its canonical form
    echo "$1" | \
        sed -e '
s,^git://github.com,https://github.com,;
s,^http://github.com,https://github.com,;
s,^git://openembedded\.org,git://git.openembedded.org,;
s,^http://git\.sv\.gnu\.org/,http://git.savannah.gnu.org/,;
s,^git://git\.sv\.gnu\.org/,http://git.savannah.gnu.org/r/,;
s,^git://git\.savannah\.gnu\.org/,http://git.savannah.gnu.org/r/,;
s,\.sf\.net/,.sourceforge.net/,;
s,^git://[^.]\+\.git\.sourceforge\.net/,git://gitscm.sourceforge.net/,;
/git:\/\/gitscm.sourceforge.net\//q;
s,\.git/*$,,;
s,$,.git,;
        '
}

full_url () {
    # Give us the full upstream url, first translating for any use of git's
    # "insteadOf", then ensuring the url is in its canonical form.
    url="$1"
    git config --global --get-regexp "url\..*\.insteadof" | {
        while read real other; do
            realurl="$(echo "$real"|sed 's,^url\.,,; s,\.insteadof$,,')"
            if echo "$url" | grep -q "^$other"; then
                url="$(echo "$url"|sed -e"s,^$other,$realurl,")"
                break
            fi
        done
        new_url="$(canonical_url "$url")"
        if [ -z "$new_url" ]; then
            echo >&2 "Error: $url was translated to an empty string"
            exit 1
        fi
        echo "$new_url"
    }
}

cache_name () {
    echo $1 | sed 's,^.*://,,; s,[:/@#&?],_,g; s,__*,_,g; s,\.git/*$,,'
}

if echo $OSTYPE | grep -q "^darwin"; then
    alias stat_format="stat -f"
else
    alias stat_format="stat --format"
fi

abspath () {
    _path="$1"
    if [ -n "${_path##/*}" ]; then
        _path="$PWD/$1"
    fi
    echo "$_path"
}

process_options () {
    force=0
    shared=0
    mirror=0
    while getopts fsm opt; do
        case "$opt" in
            f)
                force=1
                ;;
            s)
                shared=1
                ;;
            m)
                mirror=1
                ;;
        esac
    done
}

clone_submodules () {
    if [ ! -e .gitmodules ]; then
        return
    fi

    git submodule init
    GIT_CONFIG=.gitmodules git config --get-regexp submodule\\..\*\\.path | while read key path; do
        submodule_name=$(echo $key|sed -e's,^submodule\.,,; s,\.path$,,')
        submodule_url=$(GIT_CONFIG=.gitmodules git config --get submodule.$submodule_name.url)
        rm -rf $path

        if echo "$submodule_url" | grep -q "^\."; then
            submodule_url="$(git config --get remote.origin.url)/$submodule_url"
            submodule_url="$(echo "$submodule_url"|sed 's,[a-z\.\-]\+/\.\./,,g; s,/\./,,')"
        fi
        git cached-clone "$@" "$submodule_url" "$path"
    done
    git submodule update
}

process_options "$@" || usage
if [ $OPTIND -eq 1 -a $# -eq 0 ]; then
    usage
fi
shift $(($OPTIND - 1))

if [ $# -lt 1 -o $# -gt 2 ]; then
    usage
fi


url=$1
if [ -z "$url" ]; then
    usage
fi

cache_dir="$HOME/.scm-cache"
cache_url="$(full_url "$url")"
url_basename="$(basename $(echo $cache_url|sed -e's,\.git/*$,,'))"
url_cache_entry="$cache_dir/$(cache_name "$cache_url").git"

dest=$2
if [ -z "$dest" ]; then
    dest="$url_basename"
else
    dest="$(echo "$dest" | sed -e's,\.git/*$,,')"
fi
dest="$(abspath "$dest")"

if [ ! -d "$url_cache_entry" ]; then
    git clone --mirror "$url" "$url_cache_entry"
    GIT_DIR=$url_cache_entry git gc
else
    GIT_DIR="$url_cache_entry" git fetch
fi


set --
if [ $force -eq 1 ]; then
    set -- -f
fi
if [ $shared -eq 1 ]; then
    set -- "$@" -s
fi
if [ $mirror -eq 1 ]; then
    set -- "$@" -m
    dest="$dest.git"
fi

git clone-via "$@" "$url_cache_entry" "$dest"

if [ $mirror -eq 0 ]; then
    cd $dest
    clone_submodules "$@"
fi
