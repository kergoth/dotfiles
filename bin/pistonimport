#!/usr/bin/env python

import os, sys, re
from tempfile import mkdtemp
from subprocess import Popen, PIPE

def addonimport(client, upstream, local = None, wc = '.', tempdir = None):
    if not tempdir:
        cleanup = True
        tempdir = mkdtemp()
    else:
        cleanup = False

    if not local:
        local = os.path.basename(upstream)
    fullpath = os.path.join(os.path.abspath(wc), local)

    # Import with piston
    if not os.path.exists(fullpath):
        print("Importing %s." % fullpath)
        proc = Popen(['piston', 'import', upstream, fullpath], stdin=None, stderr=None)
        status = proc.wait()
        if status != 0:
            sys.__stderr__.write('Error in import, aborting.\n')
            return
        # checkin the new piston import and svn up
        client.checkin(fullpath, 'Imported %s.' % local)
    else:
        print("Updating %s." % fullpath)
        proc = Popen(['piston', 'update', fullpath], stdin=None, stderr=None)
        proc.wait()
        # checkin the new piston import and svn up
        client.checkin(fullpath, 'Updated %s.' % local)
    client.update(fullpath)

    # Check out upstream path to temp dir
    tmp = os.path.join(tempdir, local)
    if not os.path.exists(tmp):
        client.checkout(upstream, tmp, ignore_externals = True)
    else:
        client.switch(tmp, upstream)
        client.update(tmp, ignore_externals = True)

    # scan that path for svn:externals
    prop_list = client.propget('svn:externals', tmp, recurse = True)
    for basepath in prop_list.keys():
        restpath = re.sub('^%s(/|$)' % tmp, '', basepath)
        localpath = os.path.join(fullpath, restpath)
        lines = prop_list[basepath].splitlines()
        for line in lines:
            parts = line.split(' ')
            if len(parts) < 2:
                continue
            (path, url) = (parts[0], parts[1])

            extdir = os.path.join(localpath, path)
            if not os.path.exists(extdir):
                extparentdir = os.path.dirname(extdir)
                if not os.path.exists(extparentdir):
                    os.makedirs(extparentdir)
                    client.add(extparentdir)
                    client.checkin(extparentdir, 'Created parent dir for %s in %s.' % (path, local))

                # piston import each external
                print("Importing %s." % os.path.join(restpath, path))
                proc = Popen(['piston', 'import', url, extdir], stdin=None, stderr=None)
                status = proc.wait()
                if status != 0:
                    continue
            else:
                print("Updating %s." % os.path.join(restpath, path))
                proc = Popen(['piston', 'update', extdir], stdin=None, stderr=None)
                proc.wait()

    client.checkin(fullpath, 'Imported externals for %s.' % local)
    client.update(fullpath)

    if cleanup:
        cleanupproc = Popen(['rm', '-rf', tempdir])
        cleanupproc.wait()

import pysvn
c = pysvn.Client()

from optparse import OptionParser
usage = "usage: %prog [options] addon_url [addon_import_dir]"
parser = OptionParser(usage=usage)

(options, args) = parser.parse_args()

if len(args) < 1 or len(args) > 2:
    sys.stderr.write("Invalid syntax.\n")
    parser.print_help()
    sys.exit(1)

url = args[0]
addonimport(c, url)
