#!/bin/sh

#SVKDEPOT="/wow/mirror"
#SVKDEPOT="/wow/local"
SVKDEPOT="//mirror/addons"
SVKCO="/home/World of Warcraft/Interface"

usage () {
	echo "Usage: `basename $0` [-d|--delete] [-a|--addons ADDONS] [-v|--version VERSION] [--] FILENAME.ZIP"
	echo "  -d,--delete        Delete FILENAME.ZIP after successful operation."
	echo "  -a ADDONS,--addons ADDONS       Import/tag the supplied ADDONS rather than all addons in FILENAME.ZIP."
	echo "  -v,--version       Default version to be used if the .toc file(s) do not include Version."
	echo "  -V,--forcever      Version to be used regardless of the .toc version."
	echo "  [--] FILENAME.ZIP  The zip file which contains the addons to be operated against."
	exit 1
}

msg () {
	echo "WOW_ADDON: $@"
}

error () {
	echo >&2 "WOW_ADDON: ERROR: $@"
}

fatal () {
	echo >&2 "WOW_ADDON: FATAL: $@"
	exit 1
}

# 1) Extract the addon's .zip
# 2) Use the addon's .toc file to locate the addon sources in the extracted zip tree
# 3) Import those sources into /WOW/vendor/$addon/current
# 4) Tag /WOW/vendor/$addon/current as /WOW/vendor/$addon/$version
# 5) Merge changes from /WOW/vendor/$addon/current to /WOW/trunk/KergWOW/AddOns/$addon

GETOPTINFO="`getopt -l addons:,version:,forcever:,delete a:v:V:d \"$@\"`"
if [ "x$?" != "x0" ]; then
	usage
fi
eval set -- "$GETOPTINFO"

while test "X$1" != "X--"; do
	case "$1" in
		-d|--delete)
			OPT_DELETE=1
			;;
		-a|--addons)
			shift
			OPT_ADDONS="$1"
			;;
		-v|--version)
			shift
			# sets the default version for the addon(s)
			OPT_VERSION="$1"
			;;
		-V|--forcever)
			shift
			OPT_FORCE_VER="$1"
			;;
	esac
	shift
done

shift

if [ "x$1" = "x" ]; then
	usage
fi

file="$1"
#if [ -e "$file" ]; then
#    :
#else
#    error "file $file does not exist."
#    exit 1
#fi

_extract () {
	_file="`file \"$1\"`"
	if echo $_file | grep -q "Zip archive data"; then
		unzip "$1" >/dev/null 2>&1
	elif echo $_file | grep -q "RAR archive data"; then
		unrar x "$1" >/dev/null 2>&1
	else
		unset _file
		return 1
	fi
	unset _file
	return 0
}

# 1) Extract the .zip
# 2) Determine the addons we'll be processing:
#    if OPT_ADDONS, those the user specified.
#    otherwise, all the ones we find
# 3) iterate over the .toc files in the zip, reading out
#    the name/version for scm operations
# 4) Import the addon's sources into vendor/$addon/current
# 5) Tag vendor/$addon/current as vendor/$addon/$version
# 6) Star merge changes from vendor/$addon/current to trunk/KergWOW/AddOns/$addon


TMPDIR="`mktemp -d \"/tmp/$addon.XXXXXX\"`" || (error "Unable to create temporary directory."; exit 1)
ORIGDIR="`pwd`"

# Get absolute path
if ! (echo "$file"|grep -q '^/'); then
	file="$ORIGDIR/$file"
fi

cd "$TMPDIR"
_extract "$file"
if [ "x$?" != "x0" ]; then
	error "Unable to unpack \"$file\"."
	rm -rf "$TMPDIR"
	exit 1
fi


find . -name CVS -o -name \.svn -exec rm -rf "{}" \;
find . -type d -exec chmod u+rwx "{}" \;
find . -type f -exec chmod u+rwX "{}" \;

tocfiles="`find . -name \*.toc|sed -e's, ,%20,g'`"
if [ "x$tocfiles" = "x" ]; then
	error "Unable to locate any .toc files."
	rm -rf $TMPDIR
	exit 1
fi

ERROR=0
for toc in $tocfiles; do
	toc="`echo \"$toc\"|sed -e's,%20, ,g'`"
	tocpath=`dirname "$toc"`
	addon="`basename \"$toc\"|sed -e's,\.[^.]\+$,,;'`"
	title="`cat "$toc"|dos2unix|grep -E "^## *(Name|Title):"|tail -n 1|cut -d: -f2|sed -e's,^ *,,'`"
	version="`cat "$toc"|dos2unix|grep -E "^## *Version:"|head -n 1|sed -e's, \\$Revision: \\(.\\+\\) \\$,.\\1,'|cut -d: -f2-|cut -d" " -f2-`"
	if [ "x$addon" = "x" ]; then
		error "Unable to determine addon name for \"$toc\"."
		ERROR=1
		continue
	fi
	if [ "x$OPT_FORCE_VER" != "x" ]; then
		version="$OPT_FORCE_VER"
	else
		if [ "x$version" = "x" ]; then
			if [ "x$OPT_VERSION" != "x" ]; then
				version="$OPT_VERSION"
			else
				error "Unable to determine addon version for \"$toc\"."
				ERROR=1
				continue
			fi
		fi
	fi

	if [ "x$OPT_ADDONS" != "x" ]; then
		if ! (echo "$OPT_ADDONS" | grep -q -w "$addon"); then
			continue
		fi
	fi

	svk ls "$SVKDEPOT/tags/$addon/$version" >/dev/null 2>&1
	if [ "$?" = "0" ]; then
		msg "Version $version of $title is already imported and tagged."
		continue
	else
		svk import -m "Import version $version of $title." "$tocpath" "$SVKDEPOT/trunk/$addon"
		svk cp -p -m "Tag version $version of $title." "$SVKDEPOT/trunk/$addon" "$SVKDEPOT/tags/$addon/$version"
		# svn_load_dirs -no_user_input -t "${SVKREPOPRE}vendor/$addon/$version" "$SVKREPO" "${SVKREPOPRE}vendor/$addon/current" "$tocpath"
		if [ "x$?" != "x0" ]; then
			error "Unable to import/tag the sources for version $version of $title."
			ERROR=1
			continue
		fi

		msg "Import/Tag of version $version of $title is complete."
	fi


	# svk ls "$SVKDEPOT/trunk/KergWOW/AddOns/$addon" >/dev/null 2>&1
	# if [ "$?" != "0" ]; then
	#         continue
	# fi
	# svk smerge -m "Update $addon to version $version." "$SVKDEPOT/vendor/$addon/current" "$SVKDEPOT/trunk/KergWOW/AddOns/$addon"
	# if [ "x$?" != "x0" ]; then
	#         error "Unable to merge the changes in version $version of $title to the trunk."
	#         ERROR=1
	#         continue
	# fi
	# msg "Merge of version $version of $title to trunk is complete."

	# svk up "$SVKCO/AddOns/$addon" >/dev/null 2>&1 # I'm lazy, what can i say?
done

rm -rf "$TMPDIR"

if [ x"$ERROR" = "x1" ]; then
	# error "Update of one or more addons failed."
	exit 1
fi

if [ "x$OPT_DELETE" != "x" -a "x$ERROR" == "x0" ]; then
	rm -f "$file"
fi

exit 0
