#!/usr/bin/env python
"""For any specified ebooks, correct case of title/author and rename based on
the metadata and the series_format and base_format patterns."""

import errno
import os
import re
import shutil
import string
import subprocess
import sys
import titlecase


# Ebook file naming
series_format = "{Series}/{Index} - {Title}"
base_format = "{Title}"


def get_metadata(filename):
    output = subprocess.check_output(['ebook-meta', filename])
    data = {}
    for line in output.splitlines():
        try:
            field, value = line.split(':', 1)
        except ValueError:
            field = field.strip()
            data[field] = data[field] + ' ' + line.rstrip()
        else:
            data[field.strip()] = value.strip()
    return data

series_line = re.compile("(.*) #([0-9]+)")
author_line = re.compile("([^[]*) \[(.*)\]")

def get_sane_metadata(filename):
    data = get_metadata(filename)

    # Titlecase and sanitize title for metadata
    title = data['Title']
    new_title = mangle_title(title)
    if title != new_title:
        data['Title'] = title = new_title

    # Remove author sort portion of Author field
    author = data['Author(s)']
    m = author_line.match(author)
    if m:
        data['Author(s)'] = author = m.group(1)
        data['Author Sort'] = m.group(2)

    series, index = get_series(data)
    if series:
        data['Series'] = series
        data['Index'] = index
    return data

fixchars = string.maketrans("/:", "--")
filename_replacements = (
    (": ", " - "),
    (":", " -"),
    ("/", "-"),
    (r"^\. *", "Dot "), # We don't want a hidden file
    (u"\u201C", '"'),
    (u"\u201D", '"'),
    (u"\u2018", "'"),
    (u"\u2019", "'"),
    (u"\u00E9", "e"),
)
def sanitize_filename(name):

    for (fromval, toval) in filename_replacements:
        name = re.sub(fromval, toval, name)

    name = string.translate(name, fixchars)
    return name

title_replacements = (
    ('"', ""),
    ('Iwork', 'iWork'),
    ('- [tT]he', '- The'),
)
terms = (
    "XHTML",
    "HTML",
    "XML",
    "MBA",
    "XSLT",
    "XSL",
    "TCP/IP",
    "TCP",
    "IP",
    "IPv6",
    "EAP",
    "CLR",
    "CSS",
    "OS",
    "DSL",
    "SEO",
    "CEO",
    "CEOs",
    "GUI",
    "LINQ",
    "SQL",
    "RPM",
    "GDB",
    "PDF",
    "EPUB",
    "I/O",
    "GNU",
    "DSLs",
    "PRS-505",
    "MEAP", # Manning Early Access Program
    "MapReduce",

    "GTK+",
    ".NET",

    "JavaScript",
    "MontaVista",
    "PowerShell",
    "SketchUp",
    "PragPub",

    "BS",
)

def mangle_title(title):
    title = titlecase.titlecase(title.lower())

    for term in terms:
        title = re.sub(r"(^|\b|(?<=\W))%s(\b|$|(?=\W))" % re.escape(titlecase.titlecase(term.lower())), term, title)

    for fromval, toval in title_replacements:
        title = re.sub(fromval, toval, title)

    return title

def get_series(data):
    series = data.get('Series')
    if series:
        m = re.match(series_line, series)
        if m:
            series_name = m.group(1)
            series_index = m.group(2)
            if not series_name or not series_index:
                return None, None

            return series_name, series_index
    return None, None

def makedirs(directory):
    try:
        os.makedirs(directory)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e

def book_rename(filename, new_filename):
    base, ext = os.path.splitext(filename)
    destdir = os.path.dirname(filename)
    structure = os.path.dirname(new_filename)
    new_basename = sanitize_filename(os.path.basename(new_filename))
    if structure and destdir.endswith('/%s' % structure):
        # File already in the needed directory structure
        new_filename = os.path.join(destdir, new_basename) + ext
    else:
        makedirs(os.path.join(destdir, structure))
        new_filename = os.path.join(destdir, structure, new_basename) + ext

    if filename != new_filename:
        print("%s -> %s" % (filename, new_filename))
        shutil.move(filename, new_filename)


if __name__ == '__main__':
    for filename in sys.argv[1:]:
        filename = os.path.realpath(filename)

        data = get_sane_metadata(filename)
        if not data.get('Title'):
            sys.exit("Error: title is not set")

        if data.get('Series'):
            new_filename = series_format.format(**data)
        else:
            new_filename = base_format.format(**data)

        # Re-set author and title metadata, resulting in ebook-meta also
        # setting the author sort and title sort.
        subprocess.call(['ebook-meta', '-a', data['Author(s)'],
                         '-t', data['Title'], filename])

        book_rename(filename, new_filename)
