#!/bin/sh

set -u

# shellcheck disable=SC2039
case "${OSTYPE:-}" in
    darwin*)
        if command -v grm >/dev/null 2>&1; then
            rm_cmd_default="grm -rf --one-file-system"
        else
            rm_cmd_default="rm -rf"
        fi
        ;;
    *)
        rm_cmd_default="rm -rf --one-file-system"
        ;;
esac

usage () {
    cat <<END >&2
Usage: ${0##*/} [options] PATH [PATH..]

Rename/move the specified paths out of the way, then remove them in the
background.

Options:

  -r RM_CMD         Specify rm command. Default: $rm_cmd_default
  -d DELAY_SECONDS  Specify a delay to control when the actual removal occurs.

  -n IONICE_CLASS   Class to specify for ionice to lower the I/O priority of
                    the removal process. By default, the class is set to 3,
                    which is Idle, but if it this is too slow, one could set
                    it to 2, which is Best-Effort.

  -p IONICE_BESTEFFORT_PRIORITY  Set the priority used when IONICE_CLASS
                                 is set to 2 (Best-Effort). Default: 7 (Lowest)
END
    exit 1
}

main () {
    process_arguments "$@"
    shift $((OPTIND - 1))

    items="$(mktemp bgrm.XXXXXX)" || exit 1
    trap 'rm -f "$items"' EXIT INT TERM

    while [ $# -gt 0 ]; do
        echo "$1" >>"$items"
        shift
    done

    while read -r item; do
        if [ "${item%bgrm.}" != "$item" ]; then
            # Existing bgrm directories can presumably be skipped
            continue
        fi
        if [ ! -e "$item" ] && [ ! -L "$item" ]; then
            continue
        fi

        dir="$(dirname "$item")"
        tmpdir="$(mktemp -d "$dir/bgrm.XXXXXX")" || exit 1

        mv "$item" "$tmpdir/"
        if [ $? -eq 0 ]; then
            set -- "$@" "$tmpdir"
        else
            rmdir "$tmpdir"
        fi
    done <"$items"

    if [ -n "$delay" ]; then
        nohup sh -c "sleep \"$delay\" && $rm_cmd \"\$@\"" - "$@" &
    else
        nohup $rm_cmd "$@" &
    fi >/dev/null 2>&1 </dev/null
}

process_arguments () {
    delay=
    io_class=3
    io_besteffort_priority=7
    rm_cmd="$rm_cmd_default"

    while getopts r:d:n:p:h opt; do
        case "$opt" in
            r)
                rm_cmd="$OPTARG"
                ;;
            d)
                delay="$OPTARG"
                ;;
            n)
                io_class="$OPTARG"
                case "$io_class" in
                    [0123])
                        ;;
                    *)
                        echo >&2 "Invalid I/O scheduling class: $io_class, please specify 0, 1, 2, or 3."
                        echo >&2 "See 'man ionice' for details."
                        return 1
                        ;;
                esac
                ;;
            p)
                io_besteffort_priority="$OPTARG"
                case "$io_besteffort_priority" in
                    [01234567])
                        ;;
                    *)
                        echo >&2 "Invalid Best-Effort priority: $io_besteffort_priority, please specify 0-7."
                        echo >&2 "See 'man ionice' for details."
                        return 1
                        ;;
                esac
                ;;
            h|\?)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ -n "$io_class" ] && command -v ionice >/dev/null 2>&1; then
        if [ "$io_class" = "2" ]; then
            rm_cmd="ionice -c $io_class -n $io_besteffort_priority $rm_cmd"
        else
            rm_cmd="ionice -c $io_class $rm_cmd"
        fi
    fi
}

main "$@"
