#!/bin/bash
#
# Usage: install-decky-plugin [-h] [-d destination_path] plugin_archive
#
# This script installs a Decky Loader plugin on a Steam Deck from a zip or 7z archive.
#
# Options:
#   -f                  Force installation even when the destination path already exists.
#   -d destination_path Specify the destination path within ~/homebrew/plugins/.
#                       If not provided, the script will determine the destination
#                       based on the archive contents or archive name.
#   -n                  Dry run. Show what would be done, but do not act.
#   -h                  Show this help message and exit.

set -euo pipefail

show_help() {
    sed -n '/^# Usage:/,/^# *-h /p' "$0" | sed 's/^# *//'
}

force=0
destination_path=""
dry_run=0
while getopts "fd:nh" opt; do
    case ${opt} in
        f )
            force=1
            ;;
        d )
            destination_path="$OPTARG"
            ;;
        n )
            dry_run=1
            ;;
        h )
            show_help
            exit 0
            ;;
        \? )
            echo >&2 "Invalid option: -$OPTARG"
            show_help
            exit 1
            ;;
        : )
            echo >&2 "Option -$OPTARG requires an argument."
            show_help
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

if [ $# -lt 1 ]; then
    echo >&2 "Error: Missing required plugin archive argument."
    show_help
    exit 1
fi

plugin_archive="$1"
if [ ! -f "$plugin_archive" ]; then
    echo >&2 "Error: File '$plugin_archive' does not exist."
    exit 1
fi

if [[ "$plugin_archive" == *.zip ]]; then
    extract_cmd="unzip -q"
elif [[ "$plugin_archive" == *.7z ]]; then
    extract_cmd="7z x -bd -y"
else
    echo >&2 "Error: Unsupported archive format. Only .zip and .7z are supported."
    exit 1
fi

temp_dir=$(mktemp -d)
trap 'rm -rf "$temp_dir"; chmod -w "$HOME/homebrew/plugins";' EXIT

$extract_cmd "$plugin_archive" -d "$temp_dir"

top_level_items=("$temp_dir"/*)
if [ ${#top_level_items[@]} -eq 1 ] && [ -d "${top_level_items[0]}" ]; then
    single_folder="${top_level_items[0]}"
    source_dir="$single_folder"
else
    single_folder=
    source_dir="$temp_dir"
fi

if [ -z "$destination_path" ]; then
    if [ -n "$single_folder" ]; then
        destination_path=$(basename "$single_folder")
    else
        destination_path=$(basename "$plugin_archive" | sed 's/\.[^.]*$//')
    fi
fi

case "$destination_path" in
    /*|./*)
        final_destination="$destination_path"
        ;;
    *)
        final_destination="$HOME/homebrew/plugins/$destination_path"
        ;;
esac

if [[ $dry_run -eq 1 ]]; then
    if [[ -e "$final_destination" ]]; then
        if [[ $force -eq 0 ]]; then
            echo >&2 "Error: $final_destination already exists. Pass -f to force installation."
            exit 1
        else
            echo >&2 "Would install $plugin_archive to $final_destination, replacing the existing plugin."
            exit 0
        fi
    else
        echo >&2 "Would install $plugin_archive to $final_destination"
    fi
    exit 0
fi

if [[ -e "$final_destination" ]]; then
    if [[ $force -eq 0 ]]; then
        echo >&2 "Error: $final_destination already exists. Pass -f to force installation."
        exit 1
    fi
    chmod -R u+w "$final_destination"
    rm -rf "$final_destination"
fi
chmod +w "$HOME/homebrew/plugins"
mkdir -p "$final_destination"

mv "$source_dir"/* "$final_destination"
chmod -R -w "$final_destination" || {
    echo >&2 "Error: Successfully installed $plugin_archive to $final_destination, but removing write permission failed."
    exit 1
}

echo >&2 "Successfully installed $plugin_archive to $final_destination"
