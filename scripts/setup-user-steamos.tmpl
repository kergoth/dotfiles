#!/usr/bin/env chezmoi-exec
#!/usr/bin/env bash
{{- $flatpaks := (list
    "org.mozilla.firefox"
    "com.github.tchx84.Flatseal"
    "com.github.Matoking.protontricks"
    "com.github.mtkennerly.ludusavi"
    "com.google.Chrome"
    "org.scummvm.ScummVM"
    ) }}
{{- if .retrodeck }}
{{-   $flatpaks = append $flatpaks "net.retrodeck.retrodeck" }}
{{- end }}
{{- $desktop_downloads := (list
    "https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/decky_installer.desktop"
    "https://raw.githubusercontent.com/CryoByte33/steam-deck-utilities/main/InstallCryoUtilities.desktop"
    "https://github.com/kmicki/SteamDeckGyroDSU/releases/latest/download/update-sdgyrodsu.desktop"
    "https://github.com/moraroy/NonSteamLaunchers-On-Steam-Deck/releases/latest/download/NSLPlugin.desktop") }}
{{- if .emudeck }}
{{-   $desktop_downloads = append $desktop_downloads "https://www.emudeck.com/EmuDeck.desktop" }}
{{- end }}

XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}
state_dir="$XDG_STATE_HOME/${0##*/}"
mkdir -p "$state_dir"

scriptdir=$(cd "$(dirname "$0")" && pwd)
PATH="$scriptdir:$PATH"

exec_zsh_by_default() {
    local bash_profile="$HOME/.bash_profile"
    local zsh_marker="# Launch zsh from bash if interactive"

    # Check if the marker already exists in .bash_profile
    if ! grep -qF "$zsh_marker" "$bash_profile" 2>/dev/null; then
        cat << 'EOF' >> "$bash_profile"

# Launch zsh from bash if interactive, and zsh is available
if [[ $- == *i* ]] && command -v zsh >/dev/null 2>&1; then
    if [ -z "$ZSH_STARTED" ]; then
        export ZSH_STARTED=1
        exec zsh || echo "Failed to start zsh; continuing in bash."
    fi
fi
EOF
        echo "✅ Zsh launcher block added to $bash_profile."
    # else
    #     echo "ℹ️ Zsh launcher block already present in $bash_profile. No changes made."
    fi
}

download_file() {
    local url="$1"
    shift
    if ! curl -fsSL --connect-timeout 60 "$@" "$url"; then
        echo >&2 "Failed to download $url"
        return 1
    fi
    return 0
}

link() {
    local linkpath="$1"
    local target="$2"

    if [ -d "$linkpath" ] && ! [ -L "$linkpath" ]; then
        if [ -d "$target" ]; then
            echo >&2 "Error: both $target and $linkpath exist"
        else
            echo >&2 "Moving existing $linkpath to $target"
            mv "$linkpath" "$target"
        fi
    fi
    if ! [ -e "$linkpath" ]; then
        mkdir -p "$target"
    fi
    rm -f "$linkpath"
    ln -sf "$target" "$linkpath"
}

stl() {
    ~/stl/prefix/steamtinkerlaunch "$@" \
        | { grep -v '^$' || :; } \
        | { grep -Ev '^(Dependency|Downloading|Preparing|Finished)' || :; }
}

add_nonsteam() {
    local name="$1"
    shift
    local ep="$1"
    shift

    if ! [ -e "$state_dir/games.txt" ]; then
        echo >&2 "Initializing Non-Steam Game List (One-Time)"
        stl list non-steam name >"$state_dir/games.txt"
    fi

    if grep -Fqx "$name" "$state_dir/games.txt"; then
        return 0
    fi

    if ! echo "$@" | grep -F '\-sd='; then
        set -- --startdir="$(dirname "$ep")" "$@"
    fi

    echo >&2 "Adding Non-Steam Game $name"
    stl addnonsteamgame --appname="$name" --exepath="$ep" "$@" || {
        echo >&2 "Error adding Non-Steam Game $name"
        return 1
    }

    echo "$name" >>"$state_dir/games.txt"
}

proton=
add_windows_nonsteam() {
    local name="$1"
    shift

    if ! [ -e "$state_dir/games.txt" ]; then
        echo >&2 "Initializing Non-Steam Game List (One-Time)"
        stl list non-steam name >"$state_dir/games.txt"
    fi

    if grep -Fqx "$name" "$state_dir/games.txt"; then
        return 0
    fi

    if [ -z "$proton" ]; then
        echo >&2 "Determining proton version"
        proton=$(stl listproton name | grep -F proton-9.0) || :
        if [ -z "$proton" ]; then
            echo >&2 "Proton 9.0 not found, skipping adding Windows Non-Steam Game $name"
            return 1
        fi
    fi

    add_nonsteam "$name" "$@" --compatibilitytool="$proton"
}

game_name() {
    local fn="$1"

    basename "$fn" \
        | sed -E \
            -e '/, The/{ s/, The//; s/^/The /; };' \
            -e 's/ - /: /' \
            -e 's/\[[^]]*\]//g' \
            -e 's/\([^)]*\)//g' \
            -e 's/  */ /g; s/  *$//;'
}

streamgrid_name() {
    local game="$1"
    case "$game" in
        "Kirby Air Ride Online")
            echo "Kirby Air Ride"
            ;;
        *)
            echo "$game"
            ;;
    esac
}

tmpdir=$(mktemp -d -t "${0##*/}.XXXXXX")
trap 'rm -rf "$tmpdir"' EXIT INT TERM

sdmount={{ .sdcard_mount | quote }}
emupath={{ .emupath | quote }}
if [ -z "$sdmount" ]; then
    echo >&2 "No SD card mounted"
else
    if [ -d "$emupath/roms" ]; then
        chmod +x "$emupath/roms/"*/*.sh 2>/dev/null || :
    fi
    if ! [ -L ~/SD ]; then
        ln -sf "$sdmount" ~/SD
    fi
fi

exec_zsh_by_default

mkdir -p ~/.local/bin ~/.local/share/applications
chmod +x ~/.local/bin/* 2>/dev/null

# Enable the ssh server if it's not already enabled
if ! systemctl is-enabled --quiet sshd; then
    /usr/bin/steamos-polkit-helpers/steamos-enable-sshd
fi

# shellcheck disable=SC2016
if ! grep -xqF 'export PATH="$HOME/.local/bin:$HOME/bin:$PATH"' ~/.bashrc; then
    echo 'export PATH="$HOME/.local/bin:$HOME/bin:$PATH"' >>~/.bashrc
fi
# shellcheck disable=SC2016
if ! grep -xqF 'export RESTIC_PASSWORD_FILE=$HOME/.config/restic/password.txt' ~/.bashrc; then
    echo 'export RESTIC_PASSWORD_FILE=$HOME/.config/restic/password.txt' >>~/.bashrc
fi
if ! grep -xqF 'export RESTIC_REPOSITORY=rclone:ludusavi-1728618970:Archives/Backups/System/Deck\ Restic' ~/.bashrc; then
    echo 'export RESTIC_REPOSITORY=rclone:ludusavi-1728618970:Archives/Backups/System/Deck\ Restic' >>~/.bashrc
fi

{{- range $desktop_downloads }}
if ! [ -e ~/Desktop/$(basename "{{ . }}") ]; then
    echo >&2 "Downloading $(basename "{{ . }}") to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 "{{ . }}"
fi
{{- end }}
if ! [ -e ~/Desktop/shortix_installer.desktop ] && ! [ -e ~/Desktop/shortix_updater.desktop ]; then
    echo >&2 "Downloading Shortix installer to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://github.com/Jannomag/shortix/releases/latest/download/shortix_installer.desktop
fi

flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

{{ range $flatpaks }}
if ! flatpak info {{ . }} &>/dev/null; then
    echo >&2 "Installing {{ . }}"
    flatpak install --user --noninteractive flathub {{ . }}
fi
{{- end }}
{{ if has "com.github.Matoking.protontricks" $flatpaks }}
# Allow Protontricks to access the SD card
if [ -n "$sdmount" ]; then
    flatpak override --user --filesystem="$sdmount" com.github.Matoking.protontricks
fi
{{- end }}
{{ if has "org.scummvm.ScummVM" $flatpaks }}
# Allow ScummVM to access the SD card
if [ -n "$sdmount" ]; then
    flatpak override --user --filesystem="$sdmount" org.scummvm.ScummVM
fi
{{- end }}

{{- if has "com.google.Chrome" $flatpaks }}
# Allow Chrome to access udev for USB devices, which allows gamepad usage
flatpak --user override --filesystem=/run/udev:ro com.google.Chrome
{{- end }}

{{- if .retrodeck }}
if ! flatpak info net.retrodeck.retrodeck &>/dev/null; then
    echo >&2 "Installing net.retrodeck.retrodeck"
    flatpak install --user --noninteractive flathub net.retrodeck.retrodeck
    add_nonsteam RetroDeck ~/.local/share/flatpak/exports/share/applications/net.retrodeck.retrodeck.desktop --steamgriddb-game-name=RetroDeck
fi
{{- end }}

if [ -e ~/.config/systemd/user/deck-backup.service ]; then
    systemctl --user enable ~/.config/systemd/user/deck-backup.timer
fi
if [ -e ~/.config/systemd/user/check-backup.service ]; then
    systemctl --user enable ~/.config/systemd/user/check-backup.service
fi
systemctl --user daemon-reload

if ! [ -e ~/Shortix/shortix.sh ]; then
    echo >&2 "Installing Shortix"
    mkdir -p ~/Shortix

    shortix_success=true
    for file in remove_prefix.sh shortix.sh shortix_uninstall.sh; do
        if ! download_file "https://raw.githubusercontent.com/Jannomag/shortix/refs/heads/main/$file" -O --output-dir ~/Shortix; then
            shortix_success=false
            break
        fi
    done
    if $shortix_success; then
        chmod +x ~/Shortix/*.sh
        touch ~/Shortix/.id
    else
        rm -rf ~/Shortix
    fi
fi
if ! grep -q "^ *sed -i -E.*／" ~/Shortix/shortix.sh; then
    # Work around Shortix bug with game names including a slash
    # shellcheck disable=SC2016
    sed -i -E '/^ *eval /a\
    sed -i -E "s#/#／#g" $TEMPFILE' ~/Shortix/shortix.sh
fi
~/Shortix/shortix.sh >/dev/null

if ! [ -e ~/sdgyrodsu/sdgyrodsu ]; then
    echo >&2 "Installing SteamDeckGyroDSU"
    curl -fsSL -O --output-dir "$tmpdir" https://github.com/kmicki/SteamDeckGyroDSU/releases/latest/download/SteamDeckGyroDSUSetup.zip
    unzip -d "$tmpdir" "$tmpdir/SteamDeckGyroDSUSetup.zip"
    (cd "$tmpdir/SteamDeckGyroDSUSetup" && ./install.sh)
fi

if ! [ -d ~/homebrew ]; then
    echo >&2 "Installing Decky Loader"
    echo >&2 "Warning: This will prompt for your password. Please ensure your deck user has a password set."
    curl -fsSL https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/install_release.sh | sh -
fi

if [ -d ~/homebrew ]; then
    if ! test -d "$HOME/homebrew/plugins/LetMeReShade"; then
        if download-github-release -m -o "$tmpdir" -p "LetMeReShade_.*.zip" itsOwen/LetMeReShade; then
            install-decky-plugin -d LetMeReShade "$tmpdir/"LetMeReShade_*.zip
        fi
    fi

    if ! test -d "$HOME/homebrew/plugins/NonSteamLaunchers"; then
        if curl -fsSL -o "$tmpdir/main.zip" https://github.com/moraroy/NonSteamLaunchersDecky/archive/refs/heads/main.zip; then
            install-decky-plugin -d NonSteamLaunchers "$tmpdir/main.zip"
        fi
    fi
fi

if [ -d "$sdmount/retrodeck" ]; then
    link "$sdmount/retrodeck/bios/dc/textures" "$sdmount/retrodeck/texture_packs/RetroArch-Flycast"
    link "$sdmount/retrodeck/saves/n3ds/Citra/load/textures" "$sdmount/retrodeck/texture_packs/RetroArch-Citra"
fi

if ! [ -e ~/stl/prefix/steamtinkerlaunch ]; then
    echo >&2 "Installing SteamTinkerLaunch"
    mkdir -p ~/stl
    chezmoi apply --force ~/stl/prefix
fi

if ! [ -e ~/stl/deps/usr/bin/yad ]; then
    echo >&2 "Installing SteamTinkerLaunch Dependencies"
    ~/stl/prefix/steamtinkerlaunch >/dev/null
fi

{{- $stlConfigPath := (joinPath .chezmoi.homeDir ".config/steamtinkerlaunch/global.conf") }}
{{- with stat $stlConfigPath }}
  {{- $content := include $stlConfigPath -}}
  {{- if regexMatch `(?m)^SGDBAPIKEY=.*none$` $content }}
# Set the SteamGridDB API Key for SteamTinkerLaunch
steamtinkerlaunch set SGDBAPIKEY global '{{ onepasswordRead "op://Private/SteamGridDB/API Keys/password" }}'
  {{- end }}
{{- end }}

launch_dirs() {
    if [ -d "$emupath/roms" ]; then
        for subdir in portable launchers desktop/cloud "desktop/generic-applications"; do
            if [ -d "$emupath/roms/$subdir" ]; then
                echo "$emupath/roms/$subdir"
            fi
        done
    fi

    for basedir in "$sdmount/Apps" "$HOME/Apps" "$sdmount/Games"; do
        if ! [ -d "$basedir" ]; then
            continue
        fi
        find "$basedir" -mindepth 1 -maxdepth 1 -type d
    done
}

# Note that --tags= is currently broken, so none of these games will be added to collections automatically
launch_dirs \
    | while read -r subdir; do
        case "$subdir" in
            */portable|*/Games/Linux|*/Games/Windows)
                tags="Portable Games"
                ;;
            */launchers|*/Launchers)
                tags=Launchers
                ;;
            */cloud|*/Cloud)
                tags=Cloud
                ;;
            */generic-applications|*/Generic)
                tags=Apps
                ;;
            *)
                tags=
                ;;
        esac

        echo >&2 "Adding Non-Steam Games from $subdir"
        find "$subdir" -mindepth 1 -maxdepth 1 -type f -name "*.lnk" -o -name "*.sh" \
            | while read -r fn; do
                game=$(game_name "${fn%.*}")
                set --
                case "$game" in
                    "Kirby Air Ride Online")
                        tags="${tags:+$tags,}Portable Games,Emulated Games"
                        set -- "$@" --use-steamgriddb --steamgriddb-game-name="Kirby Air Ride"
                        ;;
                    "CoinOPS Legends 4")
                        tags="${tags:+$tags,}Emulated Games"
                        set -- "$@" \
                            --iconpath="$sdmount/Game Art/CoinOPS Legends 4/icon.png" \
                            --hero="$sdmount/Game Art/CoinOPS Legends 4/hero.png" \
                            --logo="$sdmount/Game Art/CoinOPS Legends 4/logo.png" \
                            --boxart="$sdmount/Game Art/CoinOPS Legends 4/portrait.png" \
                            --tenfoot="$sdmount/Game Art/CoinOPS Legends 4/lastplayed.png"
                        ;;
                    "NeoLemmix")
                        set -- "$@" \
                            --hero="$sdmount/Game Art/NeoLemmix/neolemmix-background.gif" \
                            --logo="$sdmount/Game Art/NeoLemmix/neolemmix-logo.png" \
                            --boxart="$sdmount/Game Art/NeoLemmix/neolemmix-boxart.jpg" \
                            --tenfoot="$sdmount/Game Art/NeoLemmix/neolemmix-menu.jpg"
                        ;;
                    "Steam Metadata Editor" | "Steam Store" | "AI Before I Play" | "Before I Play")
                        set -- "$@" \
                            --steamgriddb-game-name="##--Invalid--##"
                        ;;
                    *)
                        set -- "$@" --use-steamgriddb --steamgriddb-game-name="$(streamgrid_name "$game")"
                        ;;
                esac

                case "$fn" in
                    *.lnk)
                        add_windows_nonsteam "$game" "$fn" ${tags:+--tags="$tags"} "$@"
                        ;;
                    *.sh)
                        chmod +x "$fn"
                        add_nonsteam "$game" "$fn" ${tags:+--tags="$tags"} "$@"
                        ;;
                esac
            done
    done
