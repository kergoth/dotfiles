. $env:DOTFILES_DIR\scripts\common.ps1

# Add USERPROFILE to the WSL environment
Add-EnvironmentVariableItem "WSLENV" "USERPROFILE/up" -User

# Add cargo bindir to the PATH
Add-EnvironmentVariableItem "PATH" "$env:USERPROFILE\.cargo\bin" -User

# Add extra binaries directory to the PATH
[System.Environment]::SetEnvironmentVariable("XDG_BIN_HOME", "$env:USERPROFILE\AppData\Local\Programs\bin", "User")
$env:XDG_BIN_HOME = "$env:USERPROFILE\AppData\Local\Programs\bin"
Add-EnvironmentVariableItem "PATH" "$env:XDG_BIN_HOME" -User

# Add ~/.local/bin to the PATH
Add-EnvironmentVariableItem "PATH" "$env:USERPROFILE\.local\bin" -User

# Install scoop
if (-not $env:SCOOP) {
  $env:SCOOP = "$env:USERPROFILE/scoop"
}
if (-not (Test-Path "$env:SCOOP")) {
  Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
}
RefreshEnvPath

# Install git
scoop install git

# Add scoop's Git for Windows bin directory to the PATH for its bash
$gitdir = scoop prefix git
Add-EnvironmentVariableItem "PATH" "$gitdir\bin" -User

# Enable buckets
if (-not (Test-Path "$env:SCOOP/buckets/extras")) {
  scoop bucket add extras
}
if (-not (Test-Path "$env:SCOOP/buckets/kergoth")) {
  scoop bucket add kergoth https://github.com/kergoth/scoop-bucket
}

# Install git-lfs
scoop install git-lfs

# Install python
scoop install python
reg import $env:SCOOP\apps\python\current\install-pep-514.reg

# Install UV for python tooling
if (-not (Test-Path "$env:XDG_BIN_HOME/uv")) {
    Invoke-RestMethod -Uri https://astral.sh/uv/install.ps1 | Invoke-Expression
}

# Windows-specific
scoop install gow
scoop install npiperelay
scoop install recycle-bin

# Starship is used for the PowerShell prompt. While this isn't truly Windows-specific,
# I only install and use PowerShell by default on Windows.
scoop install starship

# Install core
# Unavailable on Windows: tmux, zsh
scoop install neovim
scoop install wget
scoop install curl

# Install tools
scoop install bat
scoop install bat-extras
scoop install direnv
scoop install duf
scoop install eza
scoop install fd
scoop install less
scoop install ripgrep
scoop install zoxide
scoop install fzf

scoop install shfmt
scoop install jq
scoop install sad
scoop install sd
scoop install tealdeer
scoop install unar
scoop install zstd

# SCM & Related
scoop install delta
Install-Scoop-IfNotPresent gh GitHub.cli | Out-Null
scoop install git-absorb
scoop install sapling

uv tool install git-revise
uv tool install git-imerge

# Disk tools
scoop install dua

{{ if .work -}}
# Bug tracking and workflow
scoop install jira-cli
{{- end }}

# GUI Applications
{{ if not .headless -}}
if (Install-Scoop-IfNotPresent 7zip 7zip.7zip) {
    reg import "$env:SCOOP\apps\7zip\current\install-context.reg" | Out-Null
}
Install-Scoop-IfNotPresent autohotkey AutoHotkey.AutoHotkey | Out-Null
Install-Scoop-IfNotPresent discord Discord.Discord | Out-Null
Install-Scoop-IfNotPresent ditto Ditto.Ditto | Out-Null
Install-Scoop-IfNotPresent devdocs egoist.devdocs-desktop | Out-Null
Install-Scoop-IfNotPresent gsudo gerardog.gsudo | Out-Null
Install-Scoop-IfNotPresent gpg4win GnuPG.Gpg4win | Out-Null
Install-Scoop-IfNotPresent bulk-crap-uninstaller Klocman.BulkCrapUninstaller | Out-Null
Install-Scoop-IfNotPresent pwsh Microsoft.PowerShell | Out-Null
if (Install-Scoop-IfNotPresent powertoys Microsoft.PowerToys) {
    Invoke-Expression -Command "C:\Users\WDAGUtilityAccount\scoop\apps\powertoys\current\install-context.ps1"
}
if (Install-Scoop-IfNotPresent vscode Microsoft.VisualStudioCode) {
    reg import "$env:SCOOP\apps\vscode\current\install-context.reg" | Out-Null
    reg import "$env:SCOOP\apps\vscode\current\install-associations.reg" | Out-Null
    reg import "$env:SCOOP\apps\vscode\current\install-github-integration.reg" | Out-Null
}
if (Install-Scoop-IfNotPresent windows-terminal Microsoft.WindowsTerminal) {
    reg import "$env:SCOOP\apps\windows-terminal\current\install-context.reg" | Out-Null
}
if (Install-Scoop-IfNotPresent notepadplusplus Notepad++.Notepad++) {
    reg import "$env:SCOOP\apps\notepadplusplus\current\install-context.reg" | Out-Null
}
Install-Scoop-IfNotPresent quicklook QL-Win.QuickLook | Out-Null
Install-Scoop-IfNotPresent squirreldisk squirreldisk.SquirrelDisk | Out-Null
Install-Scoop-IfNotPresent synctrayzor SyncTrayzor.SyncTrayzor | Out-Null
Install-Scoop-IfNotPresent vivaldi Vivaldi.Vivaldi | Out-Null
scoop install zed

{{    if .work -}}
Install-Scoop-IfNotPresent microsoft-teams Microsoft.Teams | Out-Null
Install-Scoop-IfNotPresent putty PuTTY.PuTTY | Out-Null
{{      if not .ephemeral -}}
Install-Scoop-IfNotPresent rufus Rufus.Rufus | Out-Null
{{      end -}}
{{    else }}
Install-Scoop-IfNotPresent sumatrapdf SumatraPDF.SumatraPDF | Out-Null
{{      if .gaming -}}
Install-Scoop-IfNotPresent steam Valve.Steam | Out-Null
{{-     end }}
{{      if .video -}}
Install-Scoop-IfNotPresent vlc VideoLAN.VLC | Out-Null
{{-     end }}
{{-   end }}
{{- end }}

RefreshEnvPath

if (Get-Process ssh-agent -ErrorAction SilentlyContinue) {
  if ((Test-Path "$env:USERPROFILE\.ssh\keys") -and (Get-Command ssh-add -ErrorAction SilentlyContinue)) {
    Write-Output "Adding SSH keys to SSH agent"
    Get-ChildItem -Depth 0 -Path "$env:USERPROFILE\.ssh\keys" -File |
    Where-Object { ($_.Name -notlike "*.pub") -and ($_.Name -notlike "*.ppk") } |
    ForEach-Object {
      $pub = $_.FullName + ".pub"
      if (-not (Test-Path ($pub))) {
        ssh-keygen -y -f $_.FullName | Out-File ($pub)
      }
      if (-not (ssh-add -l | Select-String -SimpleMatch -Pattern (ssh-keygen -lf $pub))) {
        ssh-add $_.FullName
      }
    }
  }
} else {
  Write-Warning "SSH agent not running"
}

# Use the Windows native GnuPG for git if it's installed
if (Test-Path "C:\Program Files (x86)\GnuPG\bin\gpg.exe") {
  git config --global gpg.program "C:\Program Files (x86)\GnuPG\bin\gpg.exe"
} elseif (Test-Path "$env:SCOOP\apps\gpg4win\current\bin\gpg.exe") {
  git config --global gpg.program "$env:SCOOP\apps\gpg4win\current\bin\gpg.exe"
}

# Add installed software to the user's PATH and/or startup
if (Test-Path "C:\Program Files\7-Zip") {
  Add-EnvironmentVariableItem "PATH" "C:\Program Files\7-Zip" -User
}

# Run QuickLook
if (Test-Path "$env:LOCALAPPDATA\Programs\QuickLook") {
  Start-Process "$env:LOCALAPPDATA\Programs\QuickLook\QuickLook.exe"
} elseif (Test-Path "$env:SCOOP\apps\quicklook\current\QuickLook.exe") {
  Start-Process "$env:SCOOP\apps\quicklook\current\QuickLook.exe"
} else {
  Write-Warning "QuickLook not installed"
}

# Run SyncTrayzor, which will add itself to startup
if (Test-Path "C:\Program Files\SyncTrayzor") {
  Start-Process "C:\Program Files\SyncTrayzor\SyncTrayzor.exe" -ArgumentList --minimized
} elseif (Test-Path "$env:SCOOP\apps\synctrayzor\current\SyncTrayzor.exe") {
  Start-Process "$env:SCOOP\apps\synctrayzor\current\SyncTrayzor.exe" -ArgumentList --minimized
} else {
  Write-Warning "SyncTrayzor not installed"
}

# Run SnipDo, which will add itself to startup
$SnipDo = Get-ChildItem "$env:LOCALAPPDATA\Packages" | Where-Object {$_.Name -like "*Pantherbar*"}
if ($SnipDo) {
  Start-Process "explorer.exe" -ArgumentList "shell:AppsFolder\$($SnipDo.Name)!App"
} else {
  Write-Warning "SnipDo not installed"
}

# Apply my dotfiles
if (-not $env:CHEZMOI) {
  & "$env:DOTFILES_DIR\script\setup.ps1"
}

# Register fonts
& "$env:DOTFILES_DIR\scripts\windows\register-fonts.ps1"
