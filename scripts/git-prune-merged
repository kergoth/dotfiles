#!/bin/sh

usage () {
    echo >&2 "${0##*/} [-r REMOTE] [-R] [UPSTREAM_BRANCH]"
    echo >&2
    echo >&2 "Delete branches which have been fully merged."
    echo >&2
    echo >&2 "Options:"
    echo >&2
    echo >&2 "  UPSTREAM_BRANCH     Specify the base upstream branch where the"
    echo >&2 "                      changes are merged, defaults to origin/master."
    echo >&2 "  -r REMOTE   Prune branches of the specified remote, not local."
    echo >&2 "  -R          Prune the branches in the repo repo, not just the tracking branches."
    exit 2
}

prune_remote_repo=0
ref_prefix=refs/heads
while getopts r:Rh opt; do
    case "$opt" in
        r)
            ref_prefix="refs/remotes/$OPTARG"
            ;;
        R)
            prune_remote_repo=1
            ;;
        \?|h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

git for-each-ref "--merged=${1:-origin/master}" --format='%(refname)' "$ref_prefix" | \
    while read -r ref; do
        ref="${ref#$ref_prefix/}"
        case "$ref" in
            master|HEAD)
                continue
                ;;
        esac

        case "$ref_prefix" in
            refs/heads)
                remote="$(git config "branch.$ref.pushremote" 2>/dev/null || git config "branch.$ref.remote")"
                git br -d "$ref"
                if [ $prune_remote_repo -eq 1 ] && git rev-parse --quiet --verify "refs/remotes/$remote/$ref"; then
                    git push "$remote" ":$ref"
                fi
                ;;
            refs/remotes/*)
                remote="${ref_prefix#refs/remotes/}"
                if [ $prune_remote_repo -eq 1 ]; then
                    git push "$remote" ":$ref"
                else
                    git br -r -d "${ref_prefix#refs/remotes/}/$ref"
                fi
                ;;
        esac
    done
