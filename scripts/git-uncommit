#!/bin/sh
#
# Drop the commits from HEAD to the specified commit, saving the changes to
# the stash, preserving local modifications. A less dangerous alternative to
# reset --hard.
#
# 1. Stash uncommitted changes
# 2. Soft reset
# 3. Stash the changes the reset left in the working copy
# 4. Re-apply the original uncommitted changes
#
# Ex: to drop the latest commit, git uncommit HEAD^

set -e

if [ $# -eq 0 ]; then
    commit="HEAD^"
elif [ $# -ne 1 ] || [ "$1" = "-h" ]; then
    echo >&2 "${0##*/} COMMIT"
    exit 2
else
    commit="$1"
fi

commit="$(git rev-parse -q --verify "$commit")"

original_stash="$(git rev-parse refs/stash 2>/dev/null)" || true
ret=0; git mstash "local changes" || ret=$?
if [ $ret -eq 100 ]; then
    stashed_changes=0
elif [ $ret -eq 0 ]; then
    stashed_changes=1
else
    exit $ret
fi

orig_head="$(git rev-parse HEAD)"
git reset --soft "$commit"
ret=0; git mstash "Reset from $orig_head to $commit" || ret=$?

if [ $stashed_changes -eq 1 ]; then
    if [ $ret -eq 0 ]; then
        git stash pop stash@\{1\}
    else
        git stash pop stash@\{0\}
    fi
fi
exit $ret
