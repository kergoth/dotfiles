#!/bin/sh
# For each line in stdin, run the specified command on it, assuming this
# command will write a single line to stdout, then run 'paste' to add this
# output as a second column next to the original input. Ex.:
#
# $ ( echo foo; echo bar ) | xargs-paste -I"{}" sh -c "echo {} | sed -e 's/o/q/g'"
# foo     fqq
# bar     bar
#
# A less contrived example would be a informational command which outputs bits
# you want to read in a shell script loop, but which doesn't write out the
# original input. For example, I have project paths which include jira issue
# ids. I can call jira-cli on a portion of each path to get additional info,
# but I may well still need the original path to do some operation to it, or
# write the gathered info to it.

set -eu

tmpfile="$(mktemp -t "${0##*/}.XXXXXX")"
trap 'rm "$tmpfile"' EXIT INT TERM
tmpfile2="$(mktemp -t "${0##*/}.XXXXXX")"
trap 'rm "$tmpfile" "$tmpfile2"' EXIT INT TERM

tee "$tmpfile" | tr '\n' '\0' | xargs -0 "$@" >"$tmpfile2"
paste "$tmpfile" "$tmpfile2"
