#!/usr/bin/env python3

import subprocess
from gi.repository import GLib
from pydbus import SessionBus
from pydbus.generic import signal

class Notifications(object):
    """
    <node>
        <interface name="org.freedesktop.Notifications">
            <signal name="NotificationClosed">
                <arg direction="out" type="u" name="id"/>
                <arg direction="out" type="u" name="reason"/>
            </signal>
            <signal name="ActionInvoked">
                <arg direction="out" type="u" name="id"/>
                <arg direction="out" type="s" name="action_key"/>
            </signal>
            <method name="Notify">
                <arg direction="out" type="u"/>
                <arg direction="in" type="s" name="app_name"/>
                <arg direction="in" type="u" name="replaces_id"/>
                <arg direction="in" type="s" name="app_icon"/>
                <arg direction="in" type="s" name="summary"/>
                <arg direction="in" type="s" name="body"/>
                <arg direction="in" type="as" name="actions"/>
                <arg direction="in" type="a{sv}" name="hints"/>
                <arg direction="in" type="i" name="timeout"/>
            </method>
            <method name="CloseNotification">
                <arg direction="in" type="u" name="id"/>
            </method>
            <method name="GetCapabilities">
                <arg direction="out" type="as" name="caps"/>
            </method>
            <method name="GetServerInformation">
                <arg direction="out" type="s" name="name"/>
                <arg direction="out" type="s" name="vendor"/>
                <arg direction="out" type="s" name="version"/>
                <arg direction="out" type="s" name="spec_version"/>
            </method>
        </interface>
    </node>
    """

    NotificationClosed = signal()
    ActionInvoked = signal()

    def Notify(self, app_name, replaces_id, app_icon, summary, body, actions, hints, timeout):
        # print("Notification: {} {} {} {} {} {} {} {}".format(app_name, replaces_id, app_icon, summary, body, actions, hints, timeout))
        import pipes
        text_args = [app_name + ': ' + summary, body]
        text_args = ','.join(pipes.quote(i) for i in text_args)
        print(text_args)
        subprocess.run(['powershell.exe',
                        '-command', 'New-BurntToastNotification',
                        '-Text', text_args])
        return 4 # chosen by fair dice roll. guaranteed to be random.

    def CloseNotification(self, id):
        pass

    def GetCapabilities(self):
        return []

    def GetServerInformation(self):
        return ("org.kergoth.notify_burnt_toast", "notify-burnt-toast", "?", "0.1")

bus = SessionBus()
bus.publish("org.freedesktop.Notifications", Notifications())
loop = GLib.MainLoop()
loop.run()
