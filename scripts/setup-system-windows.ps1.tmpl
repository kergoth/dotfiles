# Self-elevate the script if required
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoProfile -NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath (Get-Process -pid $pid).Path -Verb runas -ArgumentList $CommandLine
    exit
  }
}

. $env:DOTFILES_DIR\scripts\common.ps1

# Enable WSL, WSL 2, Sandbox
if (-not (Test-InWindowsSandbox)) {
  # Enable WSL
  $feature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
  if (-not $feature) {
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -All -NoRestart
  }

  # Enable Virtual Machine Platform for WSL 2
  $feature = Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform
  if (-not $feature) {
    Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -All -NoRestart
  }

  # Enable Windows Sandbox
  $feature = Get-WindowsOptionalFeature -Online -FeatureName Containers-DisposableClientVM
  if (-not $feature) {
    Enable-WindowsOptionalFeature -Online -FeatureName Containers-DisposableClientVM -All -NoRestart
  }
}

# Install winget
if (-Not (Get-Command winget -ErrorAction SilentlyContinue)) {
  Write-Host "Installing WinGet PowerShell module from PSGallery..."
  Install-PackageProvider -Name NuGet -Force | Out-Null
  Install-Module -Name Microsoft.WinGet.Client -Force -Repository PSGallery | Out-Null
  Write-Host "Using Repair-WinGetPackageManager cmdlet to bootstrap WinGet..."
  Repair-WinGetPackageManager
  if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
    Write-Host "Error installing winget"
  }
}

if (-not (Get-Command pwsh -ErrorAction SilentlyContinue)) {
  winget install --disable-interactivity --accept-source-agreements --accept-package-agreements --silent --no-upgrade --id Microsoft.PowerShell
}

# Install SnipDo
If (-Not (Get-AppxPackage -name JohannesTscholl.Pantherbar)) {
    if (-Not (Get-AppxPackage -Name "Microsoft.VCLibs.140.00.UWPDesktop" | Where-Object {$_.Architecture -eq "X86"})) {
        Write-Host "Installing x86 framework Microsoft.VCLibs.140.00.UWPDesktop for SnipDo..."
        $uri = "https://aka.ms/Microsoft.VCLibs.x86.14.00.Desktop.appx"
        $tempFile = [System.IO.Path]::GetTempFileName() + ".appx"
        try {
            Invoke-WebRequest -Uri $uri -OutFile $tempFile
            Add-AppxPackage -Path $tempFile
        } finally {
            Remove-Item -Path $tempFile -Force -ErrorAction SilentlyContinue
        }
    }

    Write-Host "Installing SnipDo..."
    $installerUrl = "https://snipdo-app.com/wp-content/uploads/bins/SnipDo.appinstaller"
    $installerXml = (Invoke-WebRequest -Uri $installerUrl).Content
    $xml = [xml]$installerXml
    $bundleUri = $xml.AppInstaller.MainBundle.Uri
    $tempFile = [System.IO.Path]::GetTempFileName() + ".msixbundle"
    try {
        Invoke-WebRequest -Uri $bundleUri -OutFile $tempFile
        Add-AppxPackage -Path $tempFile
    } finally {
        Remove-Item -Path $tempFile -Force -ErrorAction SilentlyContinue
    }
}

# Install WinGet packages
Install-ModuleIfNotInstalled Microsoft.WinGet.Client

Import-Module Microsoft.WinGet.Client

Install-WinGetPackageIfNotInstalled -Mode Silent -Id AgileBits.1Password | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id AntibodySoftware.WizTree | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id 7zip.7zip | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Discord.Discord | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Ditto.Ditto | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id GnuPG.Gpg4win | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id AutoHotkey.AutoHotkey | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id egoist.devdocs-desktop | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id gerardog.gsudo | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Klocman.BulkCrapUninstaller | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Microsoft.PowerShell | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Microsoft.PowerToys | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Microsoft.VisualStudioCode | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Microsoft.WindowsTerminal | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Notepad++.Notepad++ | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id QL-Win.QuickLook | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id SyncTrayzor.SyncTrayzor | Out-Null
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Vivaldi.Vivaldi | Out-Null
{{ if .video -}}
Install-WinGetPackageIfNotInstalled -Mode Silent -Id VideoLAN.VLC | Out-Null
{{- end }}

# WiFi Analyzer
Install-WinGetPackageIfNotInstalled -Mode Silent -Source msstore -Id 9NBLGGH33N0N

# GUI Apps for work
{{ if .work -}}
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Microsoft.Teams
Install-WinGetPackageIfNotInstalled -Mode Silent -Id PuTTY.PuTTY
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Rufus.Rufus
{{- end }}

# Personal systems only
{{ if not .work -}}
Install-WinGetPackageIfNotInstalled -Mode Silent -Id BiniSoft.WindowsFirewallControl | Out-Null

#   Gaming
{{   if .gaming -}}
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Valve.Steam
Install-WinGetPackageIfNotInstalled -Mode Silent -Id Valve.SteamLink
{{-  end }}
{{- end }}

# Configuration
& "$env:DOTFILES_DIR\scripts\windows\configure-admin.ps1"
