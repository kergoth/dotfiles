#!/usr/bin/ruby
# TODO: Save tags should check for existing file and merge data?
# TODO: Ability to restore tags on specific files, handy in a git hook to only re-tag changed files.
# mdfind -0 -onlyin ~ 'kMDItemUserTags = "=*"c' | xargs -0 ~/scripts/tagbak

%w[fileutils zlib logger shellwords optparse].each do |filename|
  require filename
end

class TagBak

  attr_writer :base_dir, :ignore_pattern

  def initialize(base = Dir.getwd, options = {})
    # Locate the .metadata.stash file, working up the directory tree
    @opts = options
    @base_dir = base
    @stash_name = @opts[:stash_name] || '.metadata.stash'
    @cli_util = @opts[:cli_util] || '/usr/local/bin/bookmark'
    pattern = @opts[:ignore_pattern] || "\.(git|svn)\/.*$"
    @ignore_pattern = %r{#{pattern}}
    @stash_file ||= File.join(@base_dir, @stash_name)
    @log = Logger.new(STDERR)
    if @opts[:debug]
      case @opts[:debug].to_i
      when 1
        @log.level = Logger::WARN
      when 2
        @log.level = Logger::INFO
      else
        @log.level = Logger::DEBUG
      end
    else
      @log.level = Logger::INFO
    end

    original_formatter = Logger::Formatter.new
    @log.progname = self.class.name
    @log.formatter = proc { |severity, datetime, progname, msg|
      abbr_sev = case severity
        when 'WARN' then ">  "
        when 'ERROR' then ">> "
        when 'FATAL' then "FATAL > "
        when 'INFO' then "* "
        else "(d) "
      end

      unless @opts[:silent]
        "#{abbr_sev}#{datetime.strftime('%H:%M:%S')} #{progname}: #{msg}\n"
      end
    }

    Dir.chdir(@base_dir)
    @start_time = Time.now
  end

  def debug
    @log.level = Logger::DEBUG
  end

  def store_tags
    datastore = []
    files = %x{mdfind -onlyin . 'kMDItemUserTags = "*"'}
    files = files.encode('utf-8', 'binary', :invalid => :replace, :undef => :replace)
    files = files.split("\n")
    files.delete_if {|file| file =~ @ignore_pattern }

    trap("SIGINT") { exit_cleanly }

    begin
      backup_stash
      store([]) # create stash and clobber existing file

      total = files.length

      clear
      @log.info("Storing tags for #{total} files in #{@base_dir}")
      term_width = get_term_width
      files.each_with_index { |file, i|
        filename = file.sub(/#{@base_dir}\//,"")
        clear
        printf "\r[%5d / %5d] %s\r", i + 1, total, filename[0..(term_width - 30)] unless @opts[:silent]
        if datastore.length >= 500
          @log.debug("Storing data to #{@stash_file}")
          datastore = swapout(datastore)
        end
        # inode = File.stat(file).ino
        if bookmark_util_installed?
          bookmark = %x{#{@cli_util} save #{Shellwords.escape(file)}}.strip
        else
          bookmark = ""
        end
        data = %x{xattr -px com.apple.metadata:_kMDItemUserTags #{Shellwords.escape(file)} 2> /dev/null}
        if data && data.length > 0
          datastore << {
            'filename' => filename,
            # 'inode' => inode,
            'bookmark' => bookmark,
            'data' => data
          }

        end
      }
      swapout(datastore)
      finish_timer("storing tags for #{files.length} files")
    rescue
      restore_backup_stash
    ensure
      clean_backup_stash
    end
  end

  def bookmark_util_installed?
    if File.file?(@cli_util)
      true
    else
      false
    end
  end

  def restore_tags

    unless stash_found?
      raise "No stash found"
      Process.exit 1
    end

    datastore = load
    files = datastore.select { |h| File.join(File.dirname(@stash_file), h['filename']) =~ /#{@base_dir}/ }

    total = files.length

    clear
    @log.info("Restoring tags for #{total} files in #{@base_dir}")

    files.each_with_index { |entry, i|
      file = File.expand_path(entry['filename'])
      clear
      printf "[%5d / %5d] %s\r", i + 1, total, file  unless @opts[:silent]
      unless File.exists?(file)
        # @log.debug("File #{file} no longer exists in #{File.dirname(file)}, trying inode")
        # find_result = %x{find #{Shellwords.escape(@base_dir)} -inum #{entry['inode']}}.strip
        if bookmark_util_installed?
          @log.debug("File #{file} no longer exists in #{File.dirname(file)}, trying bookmark")
          find_result = %x{#{@cli_util} find '#{entry['bookmark']}'}.strip

          if find_result != ""
            file = File.expand_path(find_result)
          else
            @log.debug("bookmark no longer exists")
            next
          end
        end
      end

      next unless File.exists?(file)

      hex = entry['data']

      if hex && hex.length > 0
        %x{xattr -wx com.apple.metadata:_kMDItemUserTags "#{hex}" #{Shellwords.escape(file)}}
        @log.debug("Restored tags for: #{file}")
      end
    }
    finish_timer("restoring tags for #{files.length} files")
  end

  def stash_info
    if stash_found?
      stash = load
      curr_dir = @base_dir.sub(/^#{File.dirname(@stash_file)}\/?/,'').sub(/\/$/,'')
      puts curr_dir
      curr_stash = stash.dup.delete_if {|file|
        file['filename'] !~ /^#{curr_dir}/
      }
      curr_stash.each {|file|
        $stdout.printf "%s\n", file['filename'] unless @opts[:silent]
      }
      $stdout.puts "------------------------------------"

      $stdout.puts "Located stash at #{@stash_file}"
      $stdout.puts "Stash Size: #{readable_file_size(File.stat(@stash_file).size)}"
      $stdout.puts "Records for current dir: #{curr_stash.length}"
      $stdout.puts "Total Records: #{stash.length}"
    else
      $stdout.puts "No stash file found for current directory"
    end
  end

  private

  def get_tags(file)
    rawtags = %x{mdls -raw -name 'kMDItemUserTags' #{Shellwords.escape(file)}}
    rawtags.gsub(/\n?[\(\)]\n?/m,'').strip.split(/,\n\s+/)
  end

  def stash_found?
    until File.exists? @stash_file
      if File.expand_path(Dir.getwd).split('/').length > 2
        Dir.chdir('..')
        @stash_file = File.join(Dir.getwd, @stash_name)
      else
        break
      end
    end

    unless File.exists? @stash_file
      @log.error("No metadata stash found for current tree.")
      return false
    else
      clear
      @log.info("Using metadata stash from #{@stash_file}")
      return true
    end
  end

  # Add data in memory to disk stash
  def swapout(arr)
    stored_data = load_or_create
    stored_data.concat(arr)
    if store(stored_data)
      []
    else
      false
    end
  end

  # Store a Marshal dump of a hash
  def store(obj)
    begin
      marshal_dump = Marshal.dump(obj)
      file = Zlib::GzipWriter.new(File.new(@stash_file,'w'))
      file.write marshal_dump
      file.close
    rescue
      @log.error("Failed to write stash to disk")
      return false
    end
    return true
  end

  # Load the Marshal dump to a hash
  def load
    begin
      file = Zlib::GzipReader.open(@stash_file)
    rescue Zlib::GzipFile::Error
      @log.error("Error reading #{file_name}")
      raise "Error reading #{file_name}"
    ensure
      obj = Marshal.load file.read
      file.close
      return obj
    end
  end

  def load_or_create
    unless File.exists?(@stash_file)
      store([])
    end
    load
  end

  def backup_stash
    if File.exists?(@stash_file)
      FileUtils.cp @stash_file, @stash_file+'~'
    end
  end

  def restore_backup_stash
    if File.exists?(@stash_file+'~')
      FileUtils.mv @stash_file+'~', @stash_file
    end
    clean_backup_stash
  end

  def clean_backup_stash
    if File.exists?(@stash_file+'~')
      FileUtils.rm @stash_file+'~'
    end
  end

  def finish_timer(task)
    finish_time = Time.now - @start_time
    total_min = "%d" % (finish_time / 60)
    total_sec = "%02d" % (finish_time % 60)
    clear
    @log.info("Finished #{task} in #{total_min}:#{total_sec}")
  end

  def clear
    print "\r"
    print(" " * (get_term_width - 1))
    print "\r"
  end

  def get_term_width
    begin
      if ENV['COLUMNS'] =~ /^\d+$/
        ENV['COLUMNS'].to_i
      else
        cols = `tput cols`
        cols.length > 0 ? cols.to_i : 80
      end
    rescue
      80
    end
  end

  def exit_cleanly
    restore_backup_stash
    Process.exit 1
  end

  # Return the file size with a readable style.
  def readable_file_size(size)
    gigsize = 1073741824.0
    megsize = 1048576.0
    ksize = 1024.0
    case
    when size == 1
      "1 Byte"
    when size < ksize
      "%d Bytes" % size
    when size < megsize
      "%.2f KB" % (size / ksize)
    when size < gigsize
      "%.2f MB" % (size / megsize)
    else
      "%.2f GB" % (size / gigsize)
    end
  end

end # TagBak class

### CLI

def usage
  $stderr.puts "Usage: #{File.basename(__FILE__)} [options] (store|restore|info) [dir [dir...]]"
  $stderr.puts "#{File.basename(__FILE__)} -h for more info."
  Process.exit 1
end

def perform_action(type, base_dir, options)
  t = TagBak.new(base_dir, options)

  case type
  when 'restore'
    t.restore_tags
  when 'store'
    t.store_tags
  when 'info'
    t.stash_info
  end
end

options = {}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options] (store|restore|info) [dir [dir...]]"

  options[:silent] = false
  opts.on( '-s', '--silent', 'Run silently' ) do
    options[:silent] = true
  end

  opts.on('--cli_util PATH', 'Use alternate location for bookmark tool (default /usr/local/bin/bookmark)') do |cli|
    options[:cli_util] = cli
  end

  opts.on('--ignore_pattern PATTERN', 'File pattern (regex) to ignore (default "\.(git|svn)\/.*$")') do |ignore|
    options[:ignore_pattern] = ignore
  end

  opts.on('--debug LEVEL', 'Degug level [1-3] (default 1)') do |debug|
    options[:debug] = debug
  end

  opts.on('--stash_name FILENAME', 'Use alternate stash file name (default .metadata.stash)' ) do |stash|
    options[:stash_name] = stash
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

usage if ARGV.length == 0
rel_base = Dir.getwd

type = 'store'
case ARGV[0]
when /^r(estore)?/
  type = 'restore'
  ARGV.shift
when /^s(tore|ave)?/
  type = 'store'
  ARGV.shift
when /^i(nfo)?/
  type = 'info'
  ARGV.shift
else
  usage unless File.exists?(File.expand_path(ARGV[0]))
end

if ARGV.length == 0
  base_dir = Dir.getwd
  perform_action(type, base_dir, options)
else
  ARGV.each {|arg|
    target = arg =~ /^\// ? arg : File.join(rel_base, arg)
    if File.directory? File.expand_path(target)
      base_dir = File.expand_path(target)
      perform_action(type, base_dir, options)
    else
      $stderr.puts "#{ARGV[1]} is not a directory"
      next
    end
  }
end
