#!/bin/sh
# Background a process with nohup, but return quickly with an exit code if it
# fails within the 0.1s timeout, which likely indicates a wrong command-line
# argument.
# Via https://superuser.com/a/814527

TIMEOUT=0.1

if [ $# -eq 0 ]; then
    exec nohup
fi

if [ -t 1 ]; then
    rm -f nohup.out
fi
nohup "$@" &
nohup_pid=$!

# After the timeout, kill ourselves, interrupting the wait, so we can return
# nohup's exit code if it's no longer running
trap 'exit 0' HUP
sleep "$TIMEOUT" && kill -HUP "$$" 2>/dev/null &

wait "$nohup_pid"
ret=$?
if [ $ret -ne 0 ]; then
    printf >&2 'Error running %s' "$*"
    if [ -t 1 ] && [ -e nohup.out ]; then
        echo >&2 :
        cat >&2 nohup.out
    else
        printf >&2 '\n'
    fi
fi
exit "$ret"
