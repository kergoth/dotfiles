#!/usr/bin/env python3

import argparse
import functools
import itertools
import sys
import toml


def _lookup(x, y):
    if y not in x:
        x[y] = {}
    return x[y]


def lookup(obj, key):
    return functools.reduce(_lookup, key, obj)


def pairs(iterable):
    a, b = itertools.tee(iterable)
    a = itertools.islice(a, 0, None, 2)
    b = itertools.islice(b, 1, None, 2)
    return zip(a, b)


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', help='Input path rather than stdin')
parser.add_argument('-o', '--output', help='Output path. If --file is specified, defaults to that, otherwise stdout')
parser.add_argument('-n', '--new', help='Create a new file from the arguments, do not read input', action='store_true')
parser.add_argument('values', metavar='VALUE', nargs='+')

args = parser.parse_args()

if len(args.values) % 2 != 0:
    sys.exit("Error: odd number of arguments. Arguments must be in key/value pairs")

if args.new:
    obj = {}
else:
    if not args.file or args.file == '-':
        obj = toml.load(sys.stdin)
    else:
        with open(args.file, 'r') as f:
            obj = toml.load(f)

for key, value in pairs(args.values):
    key = key.split(".")
    prefix, final_key = key[:-1], key[len(key)-1]
    lookup(obj, prefix)[final_key] = toml._load_value(value)[0]

if not args.file or args.file == '-':
    f = sys.stdout
else:
    f = open(args.file, 'w')

try:
    toml.dump(obj, f)
finally:
    if f is not sys.stdout:
        f.close()
