#!/usr/bin/env python

# Lab Manager Worksation status manipulation script
# Works via SOAP api
# Written by Nikita Shulga

from SOAPpy import WSDL
from SOAPpy.Types import structType,headerType,anyType
import getpass
from optparse import OptionParser
from ConfigParser import RawConfigParser, NoOptionError, NoSectionError
import os.path
import sys

actionNames={1:"Power On", 2: "Power Off", 3: "Suspend", 4: "Resume", 5: "Reset", 6: "Snapshot", 7: "Revert", 8: "Shutdown"}

defaults = {
	"doDeploy": False,
	"doUndeploy": False,
	"showConf": False,
	"showMach": False,
}
default_cfg_group = "DEFAULT"

def update_defaults_from_cfg(parser, cfg, options = None):
	"""Update our default values for our optparse options based on a supplied ConfigParser"""
	for opt in parser.option_list:
		dest = opt.dest
		if not dest:
			continue

		for key in [opt.dest] + [arg.replace("--", "") for arg in opt._long_opts]:
			try:
				if opt.action in ("store_true", "store_false"):
					default = cfg.getboolean(default_cfg_group, key)
				elif opt.type == "int":
					default = cfg.getint(default_cfg_group, key)
				elif opt.action == "append":
					default = cfg.get(default_cfg_group, key).split("\n")
				else:
					default = cfg.get(default_cfg_group, key)
				break
			except (NoOptionError, NoSectionError):
				pass
		else:
			continue

		defaults[dest] = default
		opt.default = default

def doParse():
	parser = OptionParser()
	parser.add_option("-u", "--user", dest="login", help="Login name")
	parser.add_option("-p", "--passwd", dest="passwd", help="password")
	parser.add_option("-o", "--organization", dest="org", help="LAB Manager organization")
	parser.add_option("-w", "--workspace", dest="workspace", help="LAB Manager workspace")
	parser.add_option("-c", "--configuration", dest="conf", help="LAB Manager configuration")
	parser.add_option("-m", "--machine", dest="mach", help="LAB Manager machine name(all by default")

	parser.add_option("-D", "--deploy", dest="doDeploy", action="store_true", help="Perform a deploy action in the specified configuration")
	parser.add_option("-U", "--undeploy", dest="doUndeploy", action="store_true", help="Perform an undeploy action in the specified configuration")
	parser.add_option("-P", "--start", dest="action", const=1, action="store_const", help="Power on selected machine(s)")
	parser.add_option("-S", "--stop", dest="action", const=2, action="store_const", help="Power off selected machine(s)")
	parser.add_option("-s", "--suspend", dest="action", const=3, action="store_const", help="Suspend selected machine(s)")
	parser.add_option("-r", "--resume", dest="action", const=4, action="store_const", help="Resume selected machine(s)")
	parser.add_option("-R", "--reset", dest="action", const=5, action="store_const", help="Reset selected machine(s)")
	parser.add_option("--snapshot", dest="action", const=6, action="store_const", help="Snapshot selected machine(s)")
	parser.add_option("--revert", dest="action", const=7, action="store_const", help="Revert selected machine(s) to the snapshot")
	parser.add_option("--shutdown", dest="action", const=8, action="store_const", help="Shutdown selected machine(s)")

	parser.add_option("--show-configurations", dest="showConf", action="store_true", help="Get list of machines defined for that configuration")
	parser.add_option("--show-machines", dest="showMach", action="store_true", help="Get list of machines defined for that configuration")

	cfg = RawConfigParser()
	cfg.read(os.path.expanduser("~/.lmwsaction.ini"))

	update_defaults_from_cfg(parser, cfg)
	parser.set_defaults(**defaults)
	return parser.parse_args()

wsdlURL="https://lm.alm.mentorg.com/LabManager/SOAP/LabManager.asmx?WSDL"
vmwareNS="http://vmware.com/labmanager"

class Auth(structType):
	_validURIs= ('',)
	def __init__(self, login = None, passwd=None, org=None, workspace=None):
		structType.__init__(self, None, "AuthenticationHeader", 0, {"xmlns":vmwareNS})
		if login is not None:self.username=login
		if passwd is not None:self.password=passwd
		if org is not None: self.organizationname=org
		if workspace is not None: self.workspacename=workspace
	

def LMVMConnect(login,passwd,org=None,workspace=None):
	server = WSDL.Proxy(wsdlURL)
	server.soapproxy.config.buildWithNamespacePrefix=False
	headers=headerType()
	if org is None or workspace is None:
		headers.AuthenticationHeader=Auth(login,passwd)
		server.soapproxy.header=headers
		if org is None: org = server.GetCurrentOrganizationName()
		if workspace is None: workspace = server.GetCurrentWorkspaceName()

	headers.AuthenticationHeader=Auth(login,passwd, org, workspace)
	server.soapproxy.header=headers

	for x in server.methods.keys(): server.methods[x].namespace=vmwareNS
	return server


def displayConfs(configs):
	print "%10s %30s %30s" % ("Id","Name", "Owner")
	if not hasattr(configs[0],"id"): configs=configs[0]
	for c in configs:
		print "%10s %30s %30s" % (c.id, c.name, c.owner)

def displayMachines(machines):
	print "%10s %20s %17s %10s %20s" % ("Id","Name", "IntIP/MAC", "Status", "Owner")
	if len(machines)==1 and type(machines[0]) is list: machines=machines[0]
	for m in machines:
		status = internalIP="-"
		if hasattr(m,"internalIP"): internalIP=m.internalIP
		elif hasattr(m,"macAddress"): internalIP=m.macAddress
		if hasattr(m,"status"):
			if m.status == "1": status = "Off"
			elif m.status == "2": status = "On"
			elif m.status == "3": status = "Suspended"
			elif m.status == "4": status = "Stuck"
			else: status=="Unknown(%s)"%m.status
		print "%10s %20s %17s %10s %20s" % (m.id, m.name, internalIP, status, m.OwnerFullName)


if __name__ == "__main__":

	print "LabManager CLI Control"
	(opt, args ) = doParse()
	 
	if opt.login is None: opt.login = getpass.getuser()
	if opt.passwd is None: opt.passwd = getpass.getpass("Enter %s's password:" % opt.login)

	print "Connecting to %s.." % wsdlURL
	server = LMVMConnect(opt.login, opt.passwd, opt.org, opt.workspace)

	if opt.showConf:
		confs = server.ListConfigurations(configurationType=1)
		displayConfs(confs)
		sys.exit(0)
	if opt.conf is None:
		configs = server.ListConfigurations(configurationType=1)
		if not hasattr(configs[0],"id"): configs=configs[0]
		configId=int(configs[0].id)
		configName=configs[0].name
	else:
		config = server.GetConfigurationByName(name=opt.conf)
		if not hasattr(config,"id"): config=config[0]
		configId=int(config.id)
		configName=config.name
	print "Choosing configuration %s with id %s." % (configName, configId)

	if opt.doDeploy:
		print "Deploying configuration."
		server.ConfigurationDeploy(configurationId=configId, fenceMode=1)
		sys.exit(0)

	if opt.doUndeploy:
		print "Undeploying configuration."
		server.ConfigurationUndeploy(configurationId=configId)
		sys.exit(0)

	if opt.showMach:
		machines = server.ListMachines(configurationId=configId)
		displayMachines(machines)
		sys.exit(0)

	if opt.mach is not None:
		machine = server.GetMachineByName(configurationId=configId, name=opt.mach)
		if not hasattr(machine,"id"): machine=machine[0]
		machineId=int(machine.id)
	else: machineId = None

	if opt.action is None:
		print "Nothing to do. Run it with --help to get list of options"
		sys.exit(0)	

	if machineId is not None:
		print "Performing %s on %s(%d)" % (actionNames[opt.action], opt.mach,machineId)
		print server.MachinePerformAction(machineId=machineId,action=opt.action)
		sys.exit(0)

	machines=server.ListMachines(configurationId=configId)
	if not hasattr(machines[0],"id"): machines=machines[0]
	for machine in machines:
		print "Performing %s on %s(%s)" % (actionNames[opt.action], machine.name, machine.id)
		print server.MachinePerformAction(machineId=int(machine.id),action=opt.action)
