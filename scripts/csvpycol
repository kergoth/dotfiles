#!/usr/bin/env python3

import argparse
import csv
import locale
import re
import sys
import itertools
import textwrap

IMPORTS = ['re', 'itertools', 'textwrap']


def tocents(value):
    return sum((i * 100 if n == 0 else i) for n, i in enumerate(int(i) for i in re.sub(r"[$,]", "", value).split(".")))


def filter_rows(args):
    """Set a CSV column with python code."""
    parser = argparse.ArgumentParser(description='Set a CSV column with python code.')
    parser.add_argument('pythonstring', nargs='?', help='Python code to eval')
    parser.add_argument('args', metavar='ARG', nargs='*', help='Args to pass along to the python code')
    parser.add_argument('--column', '-c', help='Column to set')
    parser.add_argument('--filter', '-f', action='store_true', help='Filter mode. The result is used to determine if the row is kept.')
    args = parser.parse_args(args)

    if not args.pythonstring:
        sys.stdout.write(sys.stdin.read())
        sys.exit(0)
    elif not args.column:
        parser.error('--column is required when pythonstring is passed')

    locale.setlocale(locale.LC_ALL, '')

    reader = csv.DictReader(sys.stdin)
    if not reader.fieldnames:
        return
    if args.column not in reader.fieldnames:
        raise parser.error(f'column `{args.column}` not in columns: {", ".join(reader.fieldnames)}')

    _G = globals()
    imports = {name: _G[name] for name in IMPORTS}
    imports.update({'currency': locale.currency, 'tocents': tocents})
    writer = csv.DictWriter(sys.stdout, fieldnames=reader.fieldnames)
    writer.writeheader()
    for lineno, row in enumerate(reader):
        env = dict(row)
        env.update({'_': row, 'lineno': lineno + 1, 'args': args.args})
        env.update(imports)
        nval = eval(args.pythonstring, env, env)
        if args.filter:
            if not nval:
                continue
        elif nval is not None:
            row[args.column] = nval
        writer.writerow(row)


if __name__ == '__main__':
    filter_rows(sys.argv[1:])
