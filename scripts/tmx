#!/bin/bash

#
# Tmux launcher
#
# See:
#     http://github.com/brandur/tmux-extra
#
# Modified version of a script orginally found at:
#     http://forums.gentoo.org/viewtopic-t-836006-start-0.html
#

# Works because bash automatically trims by assigning to variables and by
# passing arguments
trim() { echo $1; }

# Ensure we get unicode/256color
tmux() {
    if [ -e ~/.config/tmux/config ]; then
        set -- -f ~/.config/tmux/config "$@"
    fi
    command tmux -u2 "$@"
}

if [[ -z "$1" ]]; then
    echo "Usage: tmx SESSION_NAME"
    echo
    echo "Connects to an existing tmux session, or creates a new one"
    echo
    echo "Existing sessions:"
    tmux ls -F "#{session_name}" 2>/dev/null | sed 's/^/  /'
    exit 1
fi

# Only because I often issue `ls` to this script by accident
if [[ "$1" == "ls" ]]; then
    tmux ls
    exit
fi

gen_session_id() {
    datetime=`date +%Y%m%d%H%M%S`
    if which shasum >/dev/null 2>&1; then
        echo $datetime | shasum - | cut -c1-4
    elif which sha1sum >/dev/null 2>&1; then
        echo $datetime | sha1sum - | cut -c1-4
    else
        echo >&2 "No checksum tool found, aborting"
        exit 3
    fi
}

base_session="$1"
# This actually works without the trim() on all systems except OSX
tmux_nb=$(trim `tmux ls 2>/dev/null | grep "^$base_session:" | wc -l`)
if [[ "$tmux_nb" == "0" ]]; then
    echo "Launching tmux base session $base_session ..."
    tmux new-session -s $base_session
else
    # Make sure we are not already in a tmux session
    if [[ -z "$TMUX" ]]; then
        # Kill defunct sessions first
        current_client_sessions=$(tmux lsc 2>/dev/null | cut -d' ' -f2)
        old_sessions=$(tmux ls 2>/dev/null | egrep "^$base_session-[0-9a-z]{4}:" | cut -f 1 -d:)
        for old_session_id in $old_sessions; do
            if ! echo $current_client_sessions | grep -qw $old_session_id; then
                tmux kill-session -t $old_session_id
            fi
        done

        echo "Launching copy of base session $base_session ..."
        # Session is is date and time to prevent conflict
        session_id="$base_session-`gen_session_id`"
        # Create a new session (without attaching it) and link to base session
        # to share windows
        tmux new-session -d -t $base_session -s $session_id

        # Update the current window of the new session to match the base
        current_window="$(tmux list-windows -t $base_session | sed -n -e 's/\(.*\): [^(]*\* (.*/\1/p')"
        if [ -n "$current_window" ]; then
            tmux select-window -t "$session_id:$current_window"
        fi

        # Attach to the new session
        tmux attach-session -t $session_id

        # Update the current window of the base session, only if no other
        # sessions exist
        old_sessions=$(tmux ls 2>/dev/null | grep -v "^$session_id" | egrep "^$base_session-[0-9a-z]{4}:" | cut -f 1 -d:)
        if [ -z "$old_sessions" ]; then
            current_window="$(tmux list-windows -t $session_id 2>/dev/null | sed -n -e 's/\(.*\): [^(]*\* (.*/\1/p')"
            if [ -n "$current_window" ]; then
                tmux select-window -t "$base_session:$current_window" 2>/dev/null
            fi
        fi

        # When we detach from it, kill the session
        tmux kill-session -t $session_id
    fi
fi
