#!/bin/sh
# TODO: add -V argument to specify a brewv env rather than prefix path, for
# convenience / to save typing for my most common case
# TODO: fix -a usage combined with specification of formulas. The issue here
# is, since the upgrade method is different, we need to determine which of the
# user-specified formulas are HEAD and which are not. Not terribly difficult,
# just need to implement it

usage () {
    echo >&2 "${0##*/} [options] [[formula]..]"
    echo >&2
    echo >&2 "Update homebrew and upgrade its formulas. Lightweight wrapper"
    echo >&2 "around brew update + brew upgrade, and --reinstall for HEAD."
    echo >&2
    echo >&2 "If no formulas are specified, all which can be upgraded will be"
    echo >&2 "upgraded. HEAD recipes are always reinstalled, as their versions"
    echo >&2 "are untracked."
    echo >&2
    echo >&2 "Options:"
    echo >&2 "  -p PREFIX  Specify an alternate homebrew install prefix"
    echo >&2
    echo >&2 "  -n  Dry run, show what would be updated"
    echo >&2 "  -N  Upgrade only non-HEAD formulas (default)"
    echo >&2 "  -H  Upgrade only HEAD formulas (by re-installing). This will"
    echo >&2 "      reinstall all HEAD formulas regardless of actual updates."
    echo >&2 "  -a  Upgrade all formulas, including HEAD"
    echo >&2 "  -h  Show this usage/help"
}

prefix=
dry_run=0
head_formulas=0
normal_formulas=1
while getopts nNHap:h opt; do
    case "$opt" in
        n)
            dry_run=1
            ;;
        N)
            head_formulas=0
            normal_formulas=1
            ;;
        H)
            head_formulas=1
            normal_formulas=0
            ;;
        a)
            head_formulas=1
            normal_formulas=1
            ;;
        p)
            prefix=$OPTARG
            ;;
        \?|h)
            usage
            exit 2
            ;;
    esac
done
shift $((OPTIND - 1))

if [ -n "$prefix" ]; then
    PATH="$prefix/bin:$PATH"
fi

brew update >/dev/null

outdated="$(mktemp -t "${0##*/}")"
brew outdated --quiet >"$outdated"
trap 'rm -f "$outdated"' EXIT INT TERM

if [ $# -gt 0 ]; then
    formula_filter () {
        grep -E "^$(echo "$@" | tr " " "|") "
    }
else
    formula_filter () {
        cat
    }
fi

brew ls --versions | formula_filter "$@" | \
    while read -r formula versions; do
        version="$(echo "$versions" | sed "s,* ,,")"
        if [ $head_formulas -eq 1 ] && [ "$version" = "HEAD" ]; then
            echo >&2 "Upgrading HEAD formula $formula"
            if [ $dry_run -eq 0 ]; then
                brew reinstall --HEAD "$formula"
            fi
        elif [ $normal_formulas -eq 1 ] && grep -qx "$formula" "$outdated"; then
            echo >&2 "Upgrading formula $formula"
            if [ $dry_run -eq 0 ]; then
                brew upgrade "$formula"
            fi
        fi
    done
