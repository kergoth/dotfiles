#!/usr/bin/env python
#
# Rebases a stack of branches from one location to another.
#
# With git rebase-chain, you can easily take a stack of branches and relocate
# them onto another branch. It also handles resuming after conflict resolution
# (using --skip and --continue).
#
# This simplifies things when you're trying to keep a clean, linear history
# of in-development work, and want to merge some stuff into the base
# development branch, or you've altered some branch in the middle of your list
# of branches and want to fix up all remaining branches.
#
# This takes the destination branch as the first parameter and then the
# list of branches as subsequent parameters. As short-hand, you can use '.'
# for the current branch.
#
# If working with a large range of consecutive branches, you can use '..' to
# simplfy the list. For example, 'branch1..branch10'
#
# If you need to specify a parent commit/branch for any given branch range or
# individual branch passed, you can prefix with '<sha>:'. For example,
# 'abc1234:branch1..branch5' will start the rebase for 'branch1' at 'abc1234'.
# As short-hand, you can leave the parent blank, and it'll be the equivalent
# of 'branch1^'.
#
# Some example uses:
#
#   $ git rebase-chain master branch1 branch2 branch3 branch4
#   $ git rebase-chain . branch1 branch2 branch3 branch4
#   $ git rebase-chain . branch1..branch4
#   $ git rebase-chain . branch1 branch2..branch4 branch5
#   $ git rebase-chain . abc123:branch2..branch4
#   $ git rebase-chain . :branch2..branch4
#   $ git rebase-chain --continue
#   $ git rebase-chain --skip
#   $ git rebase-chain --abort
#

import argparse
import ConfigParser
import os
import subprocess
import sys


debug = False


class CommandError(Exception):
    pass


class State(object):
    FILENAME = 'rebase-chain-state'

    def __init__(self):
        self.git_dir = os.path.abspath(
            run_git('rev-parse', '--git-dir').strip())
        self.filename = os.path.join(self.git_dir, self.FILENAME)

        self.next_dest = ''
        self.remaining_branches = []
        self.branch_parents = {}

    def exists(self):
        return os.path.exists(self.filename)

    def load(self):
        config = ConfigParser.ConfigParser()
        config.read(self.filename)

        self.next_dest = config.get('state', 'next_dest')

        raw_remaining_branches = \
            config.get('state', 'remaining_branches').strip()

        if raw_remaining_branches:
            self.remaining_branches = raw_remaining_branches.split(',')
        else:
            self.remaining_branches = []

        for branch, parent in config.items('branch_parents'):
            self.branch_parents[branch] = parent

    def save(self):
        config = ConfigParser.ConfigParser()
        config.add_section('state')
        config.add_section('branch_parents')

        config.set('state', 'next_dest', self.next_dest)
        config.set('state', 'remaining_branches',
                   ','.join(self.remaining_branches))

        for branch, parent in self.branch_parents.iteritems():
            config.set('branch_parents', branch, parent)

        with open(self.filename, 'w') as fp:
            config.write(fp)

    def delete(self):
        os.unlink(self.filename)


def execute(command, split_lines=False, ignore_errors=False,
            extra_ignore_errors=(), interactive=False):
    """
    Utility function to execute a command and return the output.
    """
    if debug:
        print ">>> %s" % command

    if interactive:
        p = subprocess.Popen(command, shell=False)
        rc = p.wait()
        data = None
    else:
        p = subprocess.Popen(command,
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT,
                             shell=False,
                             close_fds=True)

        if split_lines:
            data = p.stdout.readlines()
        else:
            data = p.stdout.read()

        rc = p.wait()

    if rc and not ignore_errors and rc not in extra_ignore_errors:
        raise CommandError(data)

    return data


def run_git(*args, **kwargs):
    return execute(['git'] + list(args), **kwargs)


def run_rebase(*args):
    try:
        return run_git('rebase', *args)
    except CommandError as e:
        raise CommandError(str(e).replace('git rebase ', 'git rebase-chain '))


def has_rebase_state():
    return os.path.exists(os.path.join(state.git_dir, 'rebase-apply'))


def get_branches_in_range(branch1, branch2):
    """Returns the list of all branches in a range."""
    # Build a map of SHAs to branch names
    branches = {}
    branch_infos = run_git('for-each-ref', 'refs/heads', split_lines=True)

    strip_len = len('refs/heads/')

    for result in branch_infos:
        sha, remaining = result.strip().split(' ')
        ref_type, branch = remaining.split('\t')

        if ref_type == 'commit':
            branches[sha] = branch[strip_len:]

    # Get all revisions in the range between the two branches.
    shas = run_git('rev-list', '%s^..%s' % (branch1, branch2),
                   split_lines=True)
    shas = [sha.strip() for sha in shas]

    return reversed([
        branches[sha]
        for sha in shas
        if sha in branches
    ])


# Parse any arguments passed to git rebase-chain.
parser = argparse.ArgumentParser(description='Rebase a chain of branches')
parser.add_argument('dest_branch',
                    metavar='DEST_BRANCH',
                    type=str,
                    nargs='?',
                    help='Destination branch or SHA1')
parser.add_argument('source_branches',
                    metavar='BRANCH',
                    type=str,
                    nargs='*',
                    help='One or more branches to rebase')
parser.add_argument('--continue',
                    dest='continue_rebase',
                    action='store_true',
                    help='Continue the active rebase operation')
parser.add_argument('--skip',
                    dest='skip_commit',
                    action='store_true',
                    help='Skips the current conflicting commit')
parser.add_argument('--abort',
                    dest='abort_rebase',
                    action='store_true',
                    help='Aborts rebasing the rest of the branches (but '
                         'does not restore any finished branches)')
parser.add_argument('--debug',
                    dest='debug',
                    action='store_true',
                    help='Show debug output')

args = parser.parse_args()
debug = args.debug

new_rebase = (not args.continue_rebase and
              not args.skip_commit and
              not args.abort_rebase)

# Sanitize arguments.
if new_rebase and (not args.dest_branch or not args.source_branches):
    parser.print_help()
    sys.exit(1)

# Set up the state file for this rebase operation.
state = State()

if new_rebase:
    if state.exists():
        # The user is attempting to rebase while there's an existing rebase
        # operation in progress.
        sys.stderr.write(
            'You already have a git rebase-chain operation in progress.\n'
            'You must finish or abort this rebase before you can continue.\n'
            '\n'
            'If you are not rebasing, you can delete %s\n'
            % state.filename)
        sys.exit(1)

    if args.dest_branch == '.':
        # This is short-hand for, basically, HEAD. So, find that.
        state.next_dest = run_git('rev-parse', 'HEAD').strip()
    else:
        state.next_dest = args.dest_branch

    for branch in args.source_branches:
        if ':' in branch:
            branch_parent, branch = branch.split(':')
        else:
            branch_parent = None

        if '..' in branch:
            branch1, branch2 = branch.split('..')
            branch = branch1

            state.remaining_branches += get_branches_in_range(branch1, branch2)
        else:
            state.remaining_branches.append(branch)

        if branch_parent is not None:
            if branch_parent == '':
                # This is short-hand for branch1^.
                branch_parent = run_git('rev-parse', branch + '^').strip()

            state.branch_parents[branch] = branch_parent

    # Collect the SHA1s of each branch we're going to deal with, along with
    # their parents.
    prev_branch = state.next_dest

    for branch in state.remaining_branches:
        merge_base = run_git('merge-base', branch, prev_branch).strip()
        prev_sha1 = run_git('rev-parse', prev_branch).strip()

        if merge_base == prev_sha1 and branch not in state.branch_parents:
            state.branch_parents[branch] = prev_sha1

        prev_branch = branch

    state.save()
else:
    if not state.exists():
        # The user is attempting to continue in some form with an existing
        # rebase operation that doesn't have any existing state backing it.
        sys.stderr.write(
            "There doesn't appear to be a git rebase-chain in progress.\n")
        sys.exit(1)

    state.load()

    if args.abort_rebase:
        state.delete()

        try:
            print run_rebase('--abort')
        except CommandError as e:
            sys.stderr.write(str(e))
            sys.exit(1)

        sys.exit(0)
    elif args.skip_commit:
        try:
            print run_rebase('--skip')
        except CommandError as e:
            sys.stderr.write(str(e))
            sys.exit(1)
    elif args.continue_rebase:
        if has_rebase_state():
            try:
                print run_rebase('--continue')
            except CommandError as e:
                sys.stderr.write(str(e))
                sys.exit(1)

# Rebase the branches onto the destination, one-by-one.
for branch in list(state.remaining_branches):
    parent_branch = state.branch_parents.get(branch, None)
    args = []

    if parent_branch:
        args += ['--onto', state.next_dest, parent_branch]
    else:
        args.append(state.next_dest)

    args.append(branch)

    print 'Rebasing branch %s onto %s' % (branch, state.next_dest)

    # Store the state now, so that if the rebase fails, and the user decides
    # to skip or continue, we don't re-attempt this particular branch.
    state.next_dest = branch
    state.remaining_branches.pop(0)
    state.save()

    run_rebase(*args)

state.delete()
