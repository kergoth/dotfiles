#!/usr/bin/env bash

download_file() {
    local url="$1"
    shift
    if ! curl -fsSL --connect-timeout 60 "$@" "$url"; then
        echo >&2 "Failed to download $url"
        return 1
    fi
    return 0
}

install_decky_plugin() {
    local plugin_file="$1"
    local plugin_dir="$2"
    plugin_name=$(basename "$plugin_dir")

    if test -d "$plugin_dir"; then
        return 0
    fi

    echo >&2 "Installing $plugin_name plugin"
    local plugins_dir
    plugins_dir=$(dirname "$plugin_dir")

    trap 'rm -rf "$plugin_dir"; chmod -w "$plugins_dir"; rm -rf "$tmpdir"' EXIT INT TERM
    if test -d "$plugins_dir"; then
        chmod +w "$plugins_dir"
    fi

    mkdir -p "$plugin_dir"
    case "$plugin_file" in
    *.7z)
        7z x -o"$plugin_dir" "$plugin_file"
        ;;
    *.zip)
        unzip -d "$plugin_dir" "$plugin_file"
        ;;
    *)
        echo >&2 "Error: Unknown archive format for $plugin_name plugin"
        return 1
        ;;
    esac || rm -rf "$plugin_dir"

    if [ -d "$plugin_dir" ]; then
        if [ "$(find "$plugin_dir" -mindepth 1 -maxdepth 1 -not -name .DS_Store | wc -l | xargs)" = 1 ]; then
            # If there's only one directory in the plugin, hoist its contents into the plugin directory
            single_dir=$(find "$plugin_dir" -mindepth 1 -maxdepth 1 -type d)
            if test -d "$single_dir"; then
                find "$single_dir" -mindepth 1 -maxdepth 1 -print0 | xargs -0 -I"{}" mv "{}" "$plugin_dir/"
                rmdir "$single_dir"
            fi
        fi
        chmod -R -w "$plugin_dir"
        chmod -w "$plugins_dir"
        trap 'rm -rf "$tmpdir"' EXIT INT TERM

        echo >&2 "Installed $plugin_name plugin"
    else
        chmod -w "$plugins_dir"
        trap 'rm -rf "$tmpdir"' EXIT INT TERM
        echo >&2 "Error: Failed to install $plugin_name plugin"
        return 1
    fi
}

tmpdir=$(mktemp -d -t "${0##*/}.XXXXXX")
trap 'rm -rf "$tmpdir"' EXIT INT TERM

sdmount=$(find /run/media/deck -mindepth 1 -maxdepth 1 -type d)
if [ -z "$sdmount" ]; then
    echo >&2 "No SD card mounted"
else
    if [ -d "$sdmount/Emulation/roms" ]; then
        chmod +x "$sdmount/Emulation/roms/"*/*.sh 2>/dev/null || :
    fi
    if [ -d "$sdmount/retrodeck/roms" ]; then
        chmod +x "$sdmount/retrodeck/roms/"*/*.sh 2>/dev/null || :
    fi
    if ! [ -L ~/SD ]; then
        ln -sf "$sdmount" ~/SD
    fi
fi

mkdir -p ~/.local/bin ~/.local/share/applications
chmod +x ~/.local/bin/* 2>/dev/null

# Enable the ssh server if it's not already enabled
if ! systemctl is-enabled --quiet sshd; then
    /usr/bin/steamos-polkit-helpers/steamos-enable-sshd
fi

# shellcheck disable=SC2016
if ! grep -xqF 'export PATH="$HOME/.local/bin:$HOME/bin:$PATH"' ~/.bashrc; then
    echo 'export PATH="$HOME/.local/bin:$HOME/bin:$PATH"' >>~/.bashrc
fi
# shellcheck disable=SC2016
if ! grep -xqF 'export RESTIC_PASSWORD_FILE=$HOME/.config/restic/password.txt' ~/.bashrc; then
    echo 'export RESTIC_PASSWORD_FILE=$HOME/.config/restic/password.txt' >>~/.bashrc
fi
if ! grep -xqF 'export RESTIC_REPOSITORY=rclone:ludusavi-1728618970:Archives/Backups/System/Deck\ Restic' ~/.bashrc; then
    echo 'export RESTIC_REPOSITORY=rclone:ludusavi-1728618970:Archives/Backups/System/Deck\ Restic' >>~/.bashrc
fi

if ! [ -e ~/Desktop/decky_installer.desktop ]; then
    echo >&2 "Downloading decky installer to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/decky_installer.desktop
fi

if ! [ -e ~/Desktop/InstallCryoUtilities.desktop ]; then
    echo >&2 "Downloading CryoUtilities installer to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://raw.githubusercontent.com/CryoByte33/steam-deck-utilities/main/InstallCryoUtilities.desktop
fi

if ! [ -e ~/Desktop/EmuDeck.desktop ]; then
    echo >&2 "Downloading EmuDeck installer to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://www.emudeck.com/EmuDeck.desktop
fi

if ! [ -e ~/Desktop/update-sdgyrodsu.desktop ]; then
    echo >&2 "Downloading SteamDeckGyroDSU updater to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://github.com/kmicki/SteamDeckGyroDSU/releases/latest/download/update-sdgyrodsu.desktop
fi

if ! [ -e ~/Desktop/shortix_installer.desktop ] && ! [ -e ~/Desktop/shortix_updater.desktop ]; then
    echo >&2 "Downloading Shortix installer to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://github.com/Jannomag/shortix/releases/latest/download/shortix_installer.desktop
fi

if ! [ -e ~/Desktop/NSLPlugin.desktop ]; then
    echo >&2 "Downloading NSLPlugin installer to the desktop"
    curl -S -s -L -O --output-dir ~/Desktop --connect-timeout 60 https://github.com/moraroy/NonSteamLaunchers-On-Steam-Deck/releases/latest/download/NSLPlugin.desktop
fi

flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

if ! flatpak info org.mozilla.firefox &>/dev/null; then
    echo >&2 "Installing Firefox"
    flatpak install --user --noninteractive flathub org.mozilla.firefox
fi

if ! flatpak info com.github.tchx84.Flatseal &>/dev/null; then
    echo >&2 "Installing Flatseal"
    flatpak install --user --noninteractive flathub com.github.tchx84.Flatseal
fi

if ! flatpak info com.github.Matoking.protontricks &>/dev/null; then
    echo >&2 "Installing Protontricks"
    flatpak install --user --noninteractive flathub com.github.Matoking.protontricks
fi
if [ -n "$sdmount" ]; then
    flatpak override --user --filesystem="$sdmount" com.github.Matoking.protontricks
fi

if ! flatpak info com.github.mtkennerly.ludusavi &>/dev/null; then
    echo >&2 "Installing Ludusavi"
    flatpak install --user --noninteractive flathub com.github.mtkennerly.ludusavi
fi

if ! flatpak info com.google.Chrome &>/dev/null; then
    echo >&2 "Installing Chrome"
    flatpak install --user --noninteractive flathub com.google.Chrome
fi
# Allow Chrome to access udev for USB devices, which allows gamepad usage
flatpak --user override --filesystem=/run/udev:ro com.google.Chrome

if ! flatpak info net.retrodeck.retrodeck &>/dev/null; then
    echo >&2 "Installing RetroDeck"
    flatpak install --user --noninteractive flathub net.retrodeck.retrodeck
    steamos-add-to-steam ~/.local/share/flatpak/exports/share/applications/net.retrodeck.retrodeck.desktop
fi

if [ -e ~/.config/systemd/user/deck-backup.service ]; then
    systemctl --user enable ~/.config/systemd/user/deck-backup.timer
fi
if [ -e ~/.config/systemd/user/check-backup.service ]; then
    systemctl --user enable ~/.config/systemd/user/check-backup.service
fi
systemctl --user daemon-reload

if ! [ -e ~/Shortix/shortix.sh ]; then
    echo >&2 "Installing Shortix"
    mkdir -p ~/Shortix

    shortix_success=true
    for file in remove_prefix.sh shortix.sh shortix_uninstall.sh; do
        if ! download_file "https://raw.githubusercontent.com/Jannomag/shortix/refs/heads/main/$file" -O --output-dir ~/Shortix; then
            shortix_success=false
            break
        fi
    done
    if $shortix_success; then
        chmod +x ~/Shortix/*.sh
        touch ~/Shortix/.id
    else
        rm -rf ~/Shortix
    fi
fi
if ! grep -q "^ *sed -i -E.*／" ~/Shortix/shortix.sh; then
    # Work around Shortix bug with game names including a slash
    # shellcheck disable=SC2016
    sed -i -E '/^ *eval /a\
    sed -i -E "s#/#／#g" $TEMPFILE' ~/Shortix/shortix.sh
fi
~/Shortix/shortix.sh >/dev/null

if ! [ -e ~/sdgyrodsu/sdgyrodsu ]; then
    echo >&2 "Installing SteamDeckGyroDSU"
    curl -fsSL -O --output-dir "$tmpdir" https://github.com/kmicki/SteamDeckGyroDSU/releases/latest/download/SteamDeckGyroDSUSetup.zip
    unzip -d "$tmpdir" "$tmpdir/SteamDeckGyroDSUSetup.zip"
    (cd "$tmpdir/SteamDeckGyroDSUSetup" && ./install.sh)
fi

if ! [ -d ~/homebrew ]; then
    echo >&2 "Installing Decky Loader"
    echo >&2 "Warning: This will prompt for your password. Please ensure your deck user has a password set."
    curl -fsSL https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/install_release.sh | sh -
fi

if [ -d ~/homebrew ]; then
    if ! test -d "$HOME/homebrew/plugins/Decky Framegen"; then
        if curl -fsSL -o "$tmpdir/Decky.Framegen.zip" https://github.com/xXJSONDeruloXx/Decky-Framegen/releases/latest/download/Decky.Framegen.zip; then
            install_decky_plugin "$tmpdir/Decky.Framegen.zip" "$HOME/homebrew/plugins/Decky Framegen"
        fi
    fi

    if ! test -d "$HOME/homebrew/plugins/NonSteamLaunchers"; then
        if curl -fsSL -o "$tmpdir/main.zip" https://github.com/moraroy/NonSteamLaunchersDecky/archive/refs/heads/main.zip; then
            install_decky_plugin "$tmpdir/main.zip" "$HOME/homebrew/plugins/NonSteamLaunchers"
        fi
    fi
fi
