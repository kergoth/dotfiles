#!/usr/bin/env python3

import os
import sys

import click


def read_blocks(f):
    block = []
    for line in f:
        line = line.rstrip('\r\n')
        if line:
            block.append(line)
        elif block:
            yield block
            block = []

    if block:
        yield block

def filter_paths(paths, keep_path, remove_path, first, existing):
    for block in read_blocks(sys.stdin):
        if len(block) < 2:
            continue

        if existing:
            block = [p for p in block if os.path.exists(p)]
            if not block:
                continue

        if first or keep_path or remove_path:
            if first:
                first_path = block[0]

            removed = []
            for p in block:
                remove = None
                if first:
                    if p == first_path:
                        remove = False
                    else:
                        remove = True

                if keep_path:
                    if not any(p.startswith(k + os.sep) for k in keep_path):
                        remove = True
                    else:
                        remove = False

                if remove_path and any(p.startswith(k + os.sep) for k in remove_path):
                    if remove is False:
                        click.echo(f'Cannot both keep and remove a path: `{p}`', err=True)
                        sys.exit(1)
                    else:
                        remove = True

                if remove:
                    removed.append(p)

            kept = [p for p in block if p not in removed]
            if kept and removed:
                block = removed
            else:
                continue
        elif len(block) < 2:
            continue
        else:
            kept = None

        if block:
            yield block, kept

def path_lines(paths, compress, verbose):
    first = True
    for block, kept in paths:
        if not compress:
            if not first:
                yield '\n'
            else:
                first = False

        if verbose and kept:
            for p in kept:
                click.echo(f'Keep: {p}', err=True)

        for p in block:
            yield p + '\n'

@click.command()
@click.option('--keep-path', '-k', multiple=True, help='Path prefix(es) to keep')
@click.option('--remove-path', '-r', multiple=True, help='Path prefix(es) to remove')
@click.option('--first/', '-f', is_flag=True, help='Keep the first path in the list')
@click.option('--compress/--no-compress', '-c', default=False, help='Compress output, do not separate blocks of files')
@click.option('--verbose/--no-verbose', '-v', default=False, help='Verbose output, show files to keep, not just remove')
@click.option('--pager/--no-pager', default=True, help='Page output when on a terminal. Default.')
@click.option('--existing', '-e', is_flag=True, default=False)
def fdupes_select(keep_path, remove_path, first, compress, existing, verbose, pager):
    conflicting_prefixes = set(keep_path) & set(remove_path)
    if conflicting_prefixes:
        for prefix in conflicting_prefixes:
            click.echo(f'Cannot both keep and remove paths under a prefix: `{prefix}`', err=True)
        sys.exit(1)

    paths = filter_paths(read_blocks(sys.stdin), keep_path, remove_path, first, existing)
    lines = path_lines(paths, compress, verbose)

    if pager and sys.stdout.isatty():
        click.echo_via_pager(lines)
    else:
        for line in lines:
            click.echo(line, nl=False)

if __name__ == '__main__':
    fdupes_select()
