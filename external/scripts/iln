#!/bin/bash

help () {
    echo >&2 "interactive ln: ln with enhanced interactive mode and support for creation of backups"
    echo >&2
    echo >&2 "iln [-fsMibvh] [-L|-P] source_file target_file"
    echo >&2 "iln [-fsMibvh] [-L|-P] source_file... target_dir"
    echo >&2
    echo >&2 "ln options: (from the Single Unix Specification version 4)"
    echo >&2 "  -f  Force existing destination pathnames to be removed to allow the link."
    echo >&2 "  -s  Create symbolic links instead of hard links. If the -s option is specified, the -L and -P options shall be silently ignored."
    echo >&2 "  -L  For each source_file operand that names a file of type symbolic link, create a (hard) link to the file referenced by the symbolic link."
    echo >&2 "  -P  For each source_file operand that names a file of type symbolic link, create a (hard) link to the symbolic link itself."
    echo >&2
    echo >&2 "iln options:"
    echo >&2 "  -b  Create backups of files when overwriting (-f or -i specified). If neither -f nor -i are specified, create backups of the links to be created."
    echo >&2 "  -i  Interactive mode. If the destination exists, prompt to overwrite. If the target_file exists, but the source_file does not, prompt to move target_file to source_file and link it back. (The -i option overrides any previous -f or -M options.)"
    echo >&2 "  -M  Default to moving and linking back when appropriate (analagous to -f. If -i and -M are specified, prompt for overwrite but not for move)."
    echo >&2 "  -r  Convert absolute paths to relative paths when creating symbolic links."
    echo >&2 "  -v  Increase verbosity: display the work being done."
    echo >&2 "  -h  Show this help and usage information."
    exit 2
}


quote(){
    sed -e "s,','\\\\'',g; 1s,^,',; \$s,\$,',;" << EOF
$1
EOF
}

save () {
    case "$1" in
    # when a string contains a "'" we have to escape it
    *\'*)
        saved="$saved $(quote "$1")"
        ;;
    # otherwise just quote the variable
    *)
        saved="$saved '$1'"
        ;;
    esac
}

msg () {
    echo >&2 "iln:" "$@"
}

die () {
    msg "$@"
    exit 1
}

prompt_bool () {
    if [[ $# -gt 1 ]]; then
        default="$2"
    else
        default="y"
    fi
    case $default in
        [yY])
            y_side="Y"
            n_side="n"
            default_code=0
            ;;
        [nN])
            n_side="N"
            y_side="y"
            default_code=1
            ;;
    esac

    while true; do
        read -n 1 -p "$1 [$y_side|$n_side] " result </dev/tty
        printf "\n"
        case "$result" in
            [yY])
                return 0
                ;;
            [nN])
                return 1
                ;;
            "")
                return $default_code
                ;;
            *)
                echo >&2 "Invalid input '$result'"
                ;;
        esac
    done
}

get_backup_path () {
    if [ -e "${1}.${2}" ] || [ -h "${1}.${2}" ]; then
        last_num="$(ls -1d "${1}.${2}"* | sed "s|^${1}.${2}||" | sort -n | tail -n 1)"
        if [ -z "$last_num" ]; then
            last_num=0
        fi
        pattern="%s.%s.$(($last_num + 1))"
    else
        pattern="%s.%s"
    fi
    printf "$pattern" "$1" "$2"
}

relpath () {
    # http://stackoverflow.com/questions/2564634/bash-convert-absolute-path-into-relative-path-given-a-current-directory
    #
    # both $1 and $2 are absolute paths
    # returns $2 relative to $1

    if [ $# -ne 2 ]; then
        echo >&2 "Usage: relpath TO FROM"
        echo >&2
        echo >&2 "Returns FROM relative to TO"
        exit 2
    fi

    source="$1"
    target="$2"

    common_part="$source"
    back=
    while [ -n "$common_part" -a "${target#$common_part}" = "${target}" ]; do
      common_part="${common_part%/*}"
      back="../${back}"
    done

    if [ -z "$common_part" ]; then
        # nothing in common, keep absolute
        back="/"
    fi

    echo ${back}${target#$common_part/}
}

abspath () {
    _path="$1"
    if [ -n "${_path##/*}" ]; then
        _path="$PWD/$1"
    fi
    echo "$_path"
}

normalize_path()
{
    # Attempt to normalize the specified path, removing . and ..

    # Remove all /./ sequences.
    local path="${1//\/.\//\/}"

    # Remove dir/.. sequences.
    while [[ $path =~ ([^/][^/]*/\.\./) ]]
    do
        path="${path/${BASH_REMATCH[0]}/}"
    done
    echo "$path"
}

link_file () {
    link_source="$1"
    link_target="$2"

    if [ -e "$link_target" ] || [ -h "$link_target" ] ; then
        if [ ! -e "$link_source" ] && [ ! -h "$link_source" ]; then
            msg "warning: $link_target exists, but source file $link_source does not"
            if [ $move -eq 1 ] || prompt_bool "Move '$link_target' to '$link_source'?"; then
                mv "$link_target" "$link_source" || return $?
                msg "moved $link_target to $link_source"
            fi
        fi

        if [ -e "$link_target" ] || [ -h "$link_target" ]; then
            if [ $force -eq 0 ]; then
                msg "$link_target: File exists"
                if [ $interactive -eq 0 ] || ! prompt_bool "Replace $link_target?"; then
                    if [ $backup -eq 1 ]; then
                        backup_path="$(get_backup_path "${link_target%/}" ilnnew)"
                        ln "$link_source" "$backup_path" && msg "wrote new link to backup path $backup_path"
                    fi
                    return 1
                fi
            fi

            if [ $backup -eq 1 ]; then
                backup_path="$(get_backup_path "${link_target%/}" "ilnold")"
                mv "$link_target" "$backup_path" && msg "moved $link_target to backup path $backup_path"
                if [ $? -ne 0 ]; then
                    return $?
                fi
            else
                unlink "$link_target"
                if [ $? -ne 0 ]; then
                    return $?
                fi
            fi
        fi
    fi

    link_target="${link_target%/}"
    if [ $verbose -eq 1 ]; then
        printf "%s -> %s\n" "$link_target" "$link_source"
    fi
    ln "$link_source" "$link_target"
}

ln () {
    source="$1"
    target="$2"

    if [ $relative -eq 1 ]; then
        source="$(abspath "$1")"
        target="$(abspath "$target")"
        targetdir="${target%/*}"
        source="$(relpath "$targetdir" "$source")"
        case "$source" in
            /*)
                ;;
            *)
                # Sanity check
                resolved_path="$(normalize_path "$targetdir/$source")"
                if [ ! -e "$resolved_path" ]; then
                    echo >&2 "Error: $resolved_path does not exist"
                    return 1
                fi
                ;;
        esac
    fi

    if [ $create_leading_dirs -eq 1 ]; then
        mkdir -p "${link_target%/*}"
    fi

    old_saved="$saved"
    save "$source"
    save "$target"
    eval set -- "$saved"
    saved="$old_saved"

    command ln "$@"
}


saved=
interactive=0
backup=0
force=0
symlink=0
verbose=0
relative=0
move=0
create_leading_dirs=0
while getopts fsLPMDribvh opt; do
    case "$opt" in
        i)
            interactive=1
            force=0
            move=0
            continue
            ;;
        r)
            relative=1
            continue
            ;;
        M)
            move=1
            continue
            ;;
        b)
            backup=1
            continue
            ;;
        v)
            verbose=1
            continue
            ;;
        f)
            force=1
            continue
            ;;
        D)
            create_leading_dirs=1
            continue
            ;;
        s)
            symlink=1
            ;;
        \?|h)
            help
            ;;
    esac
    save "-$opt"
done
if [ $move -eq 1 ] && [ $force -eq 1 ]; then
    interactive=0
fi
if [ $relative -eq 1 ] && [ $symlink -eq 0 ]; then
    echo >&2 "Warning: -r (relative) has no effect without -s (symlink)."
fi
shift $(($OPTIND - 1))

if [ $# -eq 0 ]; then
    help
fi


exitcode=0
target_file="$(eval echo "\${$#}")"
if [ ! -d "$target_file" ]; then
    if [ $# -gt 2 ]; then
        if [ ! -e "${target_file%/}" ]; then
            die "$target_file: No such file or directory"
        else
            die "$target_file: Not a directory"
        fi
    fi

    if [ "${target_file%/}" != "$target_file" ]; then
        # Trailing / indicates this must be a directory
        die "$target_file: Not a directory"
    fi

    # ln [options] source_file target_file
    link_file "$1" "$target_file" || exitcode=3
else
    # ln [options] source_file... target_dir
    for i in $(seq 1 $(($# - 1))); do
        source_file="$(eval echo "\${$i}")"
        dest_file="${target_file%/}/${source_file##*/}"
        link_file "$source_file" "$dest_file" || exitcode=3
    done
fi
exit "$exitcode"
